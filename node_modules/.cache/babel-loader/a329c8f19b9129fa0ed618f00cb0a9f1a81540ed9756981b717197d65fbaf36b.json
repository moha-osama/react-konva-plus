{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\00-Mogul\\\\konva v2\\\\src\\\\pages\\\\Preview.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport Video from \"../components/Video\";\nimport { download } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Preview = ({\n  shapesUID,\n  videoName,\n  folderUid,\n  totalUploadedImages\n}) => {\n  _s();\n  const containerRef = useRef();\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const [preview, setPreview] = useState(false);\n  useEffect(() => {\n    const containerWidth = containerRef.current.offsetWidth;\n    setDimensions({\n      width: containerWidth,\n      height: 600\n    });\n  }, []);\n  const [rectangles, setRectangles] = useState([]);\n  const [downloadedImages, setDownloadedImages] = useState([]);\n  const [images, setImages] = useState([]);\n  const [textElements, setTextElements] = useState([]);\n  const [video, setVideo] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const jsonData = await download(`S3/mogulvideo/${folderUid}/shapes-${shapesUID}-json`);\n        //\n        const video = await download(`S3/mogulvideo/${folderUid}/${videoName}`);\n        setVideo(video);\n        //\n        for (let i = 0; i < totalUploadedImages; i++) {\n          const image = await download(`S3/mogulvideo/${folderUid}/images/image-${i}`);\n          setDownloadedImages(prevImage => [image, ...prevImage]);\n        }\n        //\n        downloadedImages.map(async item => {\n          try {\n            // Fetch the image as a Blob\n            const response = await fetch(item);\n            if (!response.ok) {\n              throw new Error(`Failed to fetch image: ${response.statusText}`);\n            }\n            const blob = await response.blob();\n            const reader = new FileReader();\n            reader.onload = e => {\n              const img = new window.Image();\n              img.src = e.target.result; // Use the data URL from FileReader\n              img.onload = () => {\n                const aspectRatio = img.width / img.height;\n                const newWidth = 200;\n                const newHeight = newWidth / aspectRatio;\n                img.width = newWidth;\n                img.height = newHeight;\n                setImages(preImage => [img, ...preImage]);\n              };\n            };\n            reader.readAsDataURL(blob);\n          } catch (error) {\n            console.error(\"Error fetching or processing image:\", error);\n          }\n        });\n\n        //\n        const response = await fetch(jsonData);\n        const jsonDataText = await response.text();\n        const parsedData = JSON.parse(jsonDataText);\n        setRectangles(parsedData.rectangles);\n        setTextElements(parsedData.textElements);\n      } catch (error) {\n        // Handle errors here\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData(); // Call the async function immediately\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preview\",\n    ref: containerRef,\n    onClick: () => setPreview(true),\n    children: /*#__PURE__*/_jsxDEV(Stage, {\n      width: dimensions.width,\n      height: dimensions.height,\n      className: \"canvas\",\n      children: [/*#__PURE__*/_jsxDEV(Video, {\n        src: video,\n        className: \"video-player\",\n        containerRef: containerRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), preview && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Layer, {\n          children: rectangles.map((rect, index) => /*#__PURE__*/_jsxDEV(Rect, {\n            x: rect.x,\n            y: rect.y,\n            width: rect.width,\n            height: rect.height,\n            fill: rect.fill\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Layer, {\n          children: images.map((img, index) => /*#__PURE__*/_jsxDEV(Image, {\n            image: img,\n            x: index * 50,\n            y: 0,\n            draggable: true,\n            onDragEnd: e => {\n              // Handle the end of dragging here if needed\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Layer, {\n          children: textElements.map((item, index) => /*#__PURE__*/_jsxDEV(Text, {\n            text: item.text,\n            x: item.x,\n            y: item.y,\n            fontSize: 20,\n            fill: \"white\"\n          }, item.text, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(Preview, \"aDYAhPh7dBw6j6zQxX9HqA9trrQ=\");\n_c = Preview;\nexport default Preview;\nvar _c;\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Stage","Layer","Rect","Text","Image","Video","download","jsxDEV","_jsxDEV","Fragment","_Fragment","Preview","shapesUID","videoName","folderUid","totalUploadedImages","_s","containerRef","dimensions","setDimensions","width","height","preview","setPreview","containerWidth","current","offsetWidth","rectangles","setRectangles","downloadedImages","setDownloadedImages","images","setImages","textElements","setTextElements","video","setVideo","fetchData","jsonData","i","image","prevImage","map","item","response","fetch","ok","Error","statusText","blob","reader","FileReader","onload","e","img","window","src","target","result","aspectRatio","newWidth","newHeight","preImage","readAsDataURL","error","console","jsonDataText","text","parsedData","JSON","parse","className","ref","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","rect","index","x","y","fill","draggable","onDragEnd","fontSize","_c","$RefreshReg$"],"sources":["D:/Work/00-Mogul/konva v2/src/pages/Preview.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\r\nimport Video from \"../components/Video\";\r\nimport { download } from \"../utils\";\r\n\r\nconst Preview = ({ shapesUID, videoName, folderUid, totalUploadedImages }) => {\r\n  const containerRef = useRef();\r\n  const [dimensions, setDimensions] = useState({\r\n    width: 0,\r\n    height: 0,\r\n  });\r\n  const [preview, setPreview] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const containerWidth = containerRef.current.offsetWidth;\r\n\r\n    setDimensions({\r\n      width: containerWidth,\r\n      height: 600,\r\n    });\r\n  }, []);\r\n\r\n  const [rectangles, setRectangles] = useState([]);\r\n  const [downloadedImages, setDownloadedImages] = useState([]);\r\n  const [images, setImages] = useState([]);\r\n  const [textElements, setTextElements] = useState([]);\r\n  const [video, setVideo] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const jsonData = await download(\r\n          `S3/mogulvideo/${folderUid}/shapes-${shapesUID}-json`\r\n        );\r\n        //\r\n        const video = await download(`S3/mogulvideo/${folderUid}/${videoName}`);\r\n        setVideo(video);\r\n        //\r\n        for (let i = 0; i < totalUploadedImages; i++) {\r\n          const image = await download(\r\n            `S3/mogulvideo/${folderUid}/images/image-${i}`\r\n          );\r\n          setDownloadedImages((prevImage) => [image, ...prevImage]);\r\n        }\r\n        //\r\n        downloadedImages.map(async (item) => {\r\n          try {\r\n            // Fetch the image as a Blob\r\n            const response = await fetch(item);\r\n            if (!response.ok) {\r\n              throw new Error(`Failed to fetch image: ${response.statusText}`);\r\n            }\r\n            const blob = await response.blob();\r\n            const reader = new FileReader();\r\n            reader.onload = (e) => {\r\n              const img = new window.Image();\r\n              img.src = e.target.result; // Use the data URL from FileReader\r\n              img.onload = () => {\r\n                const aspectRatio = img.width / img.height;\r\n                const newWidth = 200;\r\n                const newHeight = newWidth / aspectRatio;\r\n                img.width = newWidth;\r\n                img.height = newHeight;\r\n                setImages((preImage) => [img, ...preImage]);\r\n              };\r\n            };\r\n            reader.readAsDataURL(blob);\r\n          } catch (error) {\r\n            console.error(\"Error fetching or processing image:\", error);\r\n          }\r\n        });\r\n\r\n        //\r\n        const response = await fetch(jsonData);\r\n        const jsonDataText = await response.text();\r\n        const parsedData = JSON.parse(jsonDataText);\r\n        setRectangles(parsedData.rectangles);\r\n        setTextElements(parsedData.textElements);\r\n      } catch (error) {\r\n        // Handle errors here\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n    fetchData(); // Call the async function immediately\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"preview\"\r\n      ref={containerRef}\r\n      onClick={() => setPreview(true)}\r\n    >\r\n      <Stage\r\n        width={dimensions.width}\r\n        height={dimensions.height}\r\n        className=\"canvas\"\r\n      >\r\n        <Video\r\n          src={video}\r\n          className=\"video-player\"\r\n          containerRef={containerRef}\r\n        />\r\n        {preview && (\r\n          <>\r\n            <Layer>\r\n              {rectangles.map((rect, index) => (\r\n                <Rect\r\n                  key={index}\r\n                  x={rect.x}\r\n                  y={rect.y}\r\n                  width={rect.width}\r\n                  height={rect.height}\r\n                  fill={rect.fill}\r\n                />\r\n              ))}\r\n            </Layer>\r\n            <Layer>\r\n              {images.map((img, index) => (\r\n                <Image\r\n                  key={index}\r\n                  image={img}\r\n                  x={index * 50}\r\n                  y={0}\r\n                  draggable\r\n                  onDragEnd={(e) => {\r\n                    // Handle the end of dragging here if needed\r\n                  }}\r\n                />\r\n              ))}\r\n            </Layer>\r\n            <Layer>\r\n              {textElements.map((item, index) => (\r\n                <Text\r\n                  key={item.text}\r\n                  text={item.text}\r\n                  x={item.x}\r\n                  y={item.y}\r\n                  fontSize={20}\r\n                  fill=\"white\"\r\n                />\r\n              ))}\r\n            </Layer>\r\n          </>\r\n        )}\r\n      </Stage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}