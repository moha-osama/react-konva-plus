{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\nvar tslib_1 = require(\"tslib\");\nvar constants_1 = require(\"./constants\");\nvar RawSha256_1 = require(\"./RawSha256\");\nvar util_1 = require(\"@aws-crypto/util\");\nvar Sha256 = /** @class */function () {\n  function Sha256(secret) {\n    this.secret = secret;\n    this.hash = new RawSha256_1.RawSha256();\n    this.reset();\n  }\n  Sha256.prototype.update = function (toHash) {\n    if ((0, util_1.isEmptyData)(toHash) || this.error) {\n      return;\n    }\n    try {\n      this.hash.update((0, util_1.convertToBuffer)(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n      return this.outer.digest();\n    }\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  Sha256.prototype.digest = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2 /*return*/, this.digestSync()];\n      });\n    });\n  };\n  Sha256.prototype.reset = function () {\n    this.hash = new RawSha256_1.RawSha256();\n    if (this.secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(this.secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n      this.hash.update(inner);\n      this.outer.update(outer);\n      // overwrite the copied key in memory\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  };\n  return Sha256;\n}();\nexports.Sha256 = Sha256;\nfunction bufferFromSecret(secret) {\n  var input = (0, util_1.convertToBuffer)(secret);\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}","map":{"version":3,"names":["constants_1","require","RawSha256_1","util_1","Sha256","secret","hash","RawSha256","reset","prototype","update","toHash","isEmptyData","error","convertToBuffer","e","digestSync","outer","finished","digest","inner","bufferFromSecret","Uint8Array","BLOCK_SIZE","set","i","byteLength","exports","input","bufferHash","buffer"],"sources":["D:\\Work\\00-Mogul\\konva v2\\node_modules\\@aws-sdk\\client-s3\\node_modules\\@aws-crypto\\sha256-js\\src\\jsSha256.ts"],"sourcesContent":["import { BLOCK_SIZE } from \"./constants\";\nimport { RawSha256 } from \"./RawSha256\";\nimport { Checksum, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\n\nexport class Sha256 implements Checksum {\n  private readonly secret?: SourceData;\n  private hash: RawSha256;\n  private outer?: RawSha256;\n  private error: any;\n\n  constructor(secret?: SourceData) {\n    this.secret = secret;\n    this.hash = new RawSha256();\n    this.reset();\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  }\n\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  digestSync(): Uint8Array {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  }\n\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  async digest(): Promise<Uint8Array> {\n    return this.digestSync();\n  }\n\n  reset(): void {\n    this.hash = new RawSha256();\n    if (this.secret) {\n      this.outer = new RawSha256();\n      const inner = bufferFromSecret(this.secret);\n      const outer = new Uint8Array(BLOCK_SIZE);\n      outer.set(inner);\n\n      for (let i = 0; i < BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer);\n\n      // overwrite the copied key in memory\n      for (let i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n}\n\nfunction bufferFromSecret(secret: SourceData): Uint8Array {\n  let input = convertToBuffer(secret);\n\n  if (input.byteLength > BLOCK_SIZE) {\n    const bufferHash = new RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  const buffer = new Uint8Array(BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}