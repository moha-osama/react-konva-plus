{"ast":null,"code":"import { Buffer } from \"buffer\";\nimport { Readable } from \"stream\";\nimport { getChunkBuffer } from \"./chunks/getChunkBuffer\";\nimport { getChunkStream } from \"./chunks/getChunkStream\";\nimport { getDataReadable } from \"./chunks/getDataReadable\";\nimport { getDataReadableStream } from \"./chunks/getDataReadableStream\";\nexport const getChunk = (data, partSize) => {\n  if (data instanceof Buffer) {\n    return getChunkBuffer(data, partSize);\n  } else if (data instanceof Readable) {\n    return getChunkStream(data, partSize, getDataReadable);\n  } else if (data instanceof String || typeof data === \"string\" || data instanceof Uint8Array) {\n    return getChunkBuffer(Buffer.from(data), partSize);\n  }\n  if (typeof data.stream === \"function\") {\n    return getChunkStream(data.stream(), partSize, getDataReadableStream);\n  } else if (data instanceof ReadableStream) {\n    return getChunkStream(data, partSize, getDataReadableStream);\n  } else {\n    throw new Error(\"Body Data is unsupported format, expected data to be one of: string | Uint8Array | Buffer | Readable | ReadableStream | Blob;.\");\n  }\n};","map":{"version":3,"names":["Buffer","Readable","getChunkBuffer","getChunkStream","getDataReadable","getDataReadableStream","getChunk","data","partSize","String","Uint8Array","from","stream","ReadableStream","Error"],"sources":["D:/Work/00-Mogul/konva v2/node_modules/@aws-sdk/lib-storage/dist-es/chunker.js"],"sourcesContent":["import { Buffer } from \"buffer\";\nimport { Readable } from \"stream\";\nimport { getChunkBuffer } from \"./chunks/getChunkBuffer\";\nimport { getChunkStream } from \"./chunks/getChunkStream\";\nimport { getDataReadable } from \"./chunks/getDataReadable\";\nimport { getDataReadableStream } from \"./chunks/getDataReadableStream\";\nexport const getChunk = (data, partSize) => {\n    if (data instanceof Buffer) {\n        return getChunkBuffer(data, partSize);\n    }\n    else if (data instanceof Readable) {\n        return getChunkStream(data, partSize, getDataReadable);\n    }\n    else if (data instanceof String || typeof data === \"string\" || data instanceof Uint8Array) {\n        return getChunkBuffer(Buffer.from(data), partSize);\n    }\n    if (typeof data.stream === \"function\") {\n        return getChunkStream(data.stream(), partSize, getDataReadableStream);\n    }\n    else if (data instanceof ReadableStream) {\n        return getChunkStream(data, partSize, getDataReadableStream);\n    }\n    else {\n        throw new Error(\"Body Data is unsupported format, expected data to be one of: string | Uint8Array | Buffer | Readable | ReadableStream | Blob;.\");\n    }\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,QAAQ,QAAQ,QAAQ;AACjC,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,qBAAqB,QAAQ,gCAAgC;AACtE,OAAO,MAAMC,QAAQ,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;EACxC,IAAID,IAAI,YAAYP,MAAM,EAAE;IACxB,OAAOE,cAAc,CAACK,IAAI,EAAEC,QAAQ,CAAC;EACzC,CAAC,MACI,IAAID,IAAI,YAAYN,QAAQ,EAAE;IAC/B,OAAOE,cAAc,CAACI,IAAI,EAAEC,QAAQ,EAAEJ,eAAe,CAAC;EAC1D,CAAC,MACI,IAAIG,IAAI,YAAYE,MAAM,IAAI,OAAOF,IAAI,KAAK,QAAQ,IAAIA,IAAI,YAAYG,UAAU,EAAE;IACvF,OAAOR,cAAc,CAACF,MAAM,CAACW,IAAI,CAACJ,IAAI,CAAC,EAAEC,QAAQ,CAAC;EACtD;EACA,IAAI,OAAOD,IAAI,CAACK,MAAM,KAAK,UAAU,EAAE;IACnC,OAAOT,cAAc,CAACI,IAAI,CAACK,MAAM,CAAC,CAAC,EAAEJ,QAAQ,EAAEH,qBAAqB,CAAC;EACzE,CAAC,MACI,IAAIE,IAAI,YAAYM,cAAc,EAAE;IACrC,OAAOV,cAAc,CAACI,IAAI,EAAEC,QAAQ,EAAEH,qBAAqB,CAAC;EAChE,CAAC,MACI;IACD,MAAM,IAAIS,KAAK,CAAC,gIAAgI,CAAC;EACrJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}