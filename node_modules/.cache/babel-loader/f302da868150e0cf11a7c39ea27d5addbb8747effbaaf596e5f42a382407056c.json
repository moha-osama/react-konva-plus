{"ast":null,"code":"import { HttpResponse } from \"@smithy/protocol-http\";\nexport const throw200ExceptionsMiddleware = config => next => async args => {\n  const result = await next(args);\n  const {\n    response\n  } = result;\n  if (!HttpResponse.isInstance(response)) return result;\n  const {\n    statusCode,\n    body\n  } = response;\n  if (statusCode < 200 || statusCode >= 300) return result;\n  const bodyBytes = await collectBody(body, config);\n  const bodyString = await collectBodyString(bodyBytes, config);\n  if (bodyBytes.length === 0) {\n    const err = new Error(\"S3 aborted request\");\n    err.name = \"InternalError\";\n    throw err;\n  }\n  if (bodyString && bodyString.match(\"<Error>\")) {\n    response.statusCode = 400;\n  }\n  response.body = bodyBytes;\n  return result;\n};\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));\nexport const throw200ExceptionsMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true\n};\nexport const getThrow200ExceptionsPlugin = config => ({\n  applyToStack: clientStack => {\n    clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n  }\n});","map":{"version":3,"names":["HttpResponse","throw200ExceptionsMiddleware","config","next","args","result","response","isInstance","statusCode","body","bodyBytes","collectBody","bodyString","collectBodyString","length","err","Error","name","match","streamBody","Uint8Array","context","Promise","resolve","streamCollector","then","utf8Encoder","throw200ExceptionsMiddlewareOptions","relation","toMiddleware","tags","override","getThrow200ExceptionsPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["D:/Work/00-Mogul/konva v2/node_modules/@aws-sdk/middleware-sdk-s3/dist-es/throw-200-exceptions.js"],"sourcesContent":["import { HttpResponse } from \"@smithy/protocol-http\";\nexport const throw200ExceptionsMiddleware = (config) => (next) => async (args) => {\n    const result = await next(args);\n    const { response } = result;\n    if (!HttpResponse.isInstance(response))\n        return result;\n    const { statusCode, body } = response;\n    if (statusCode < 200 || statusCode >= 300)\n        return result;\n    const bodyBytes = await collectBody(body, config);\n    const bodyString = await collectBodyString(bodyBytes, config);\n    if (bodyBytes.length === 0) {\n        const err = new Error(\"S3 aborted request\");\n        err.name = \"InternalError\";\n        throw err;\n    }\n    if (bodyString && bodyString.match(\"<Error>\")) {\n        response.statusCode = 400;\n    }\n    response.body = bodyBytes;\n    return result;\n};\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nexport const throw200ExceptionsMiddlewareOptions = {\n    relation: \"after\",\n    toMiddleware: \"deserializerMiddleware\",\n    tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n    name: \"throw200ExceptionsMiddleware\",\n    override: true,\n};\nexport const getThrow200ExceptionsPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n    },\n});\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AACpD,OAAO,MAAMC,4BAA4B,GAAIC,MAAM,IAAMC,IAAI,IAAK,MAAOC,IAAI,IAAK;EAC9E,MAAMC,MAAM,GAAG,MAAMF,IAAI,CAACC,IAAI,CAAC;EAC/B,MAAM;IAAEE;EAAS,CAAC,GAAGD,MAAM;EAC3B,IAAI,CAACL,YAAY,CAACO,UAAU,CAACD,QAAQ,CAAC,EAClC,OAAOD,MAAM;EACjB,MAAM;IAAEG,UAAU;IAAEC;EAAK,CAAC,GAAGH,QAAQ;EACrC,IAAIE,UAAU,GAAG,GAAG,IAAIA,UAAU,IAAI,GAAG,EACrC,OAAOH,MAAM;EACjB,MAAMK,SAAS,GAAG,MAAMC,WAAW,CAACF,IAAI,EAAEP,MAAM,CAAC;EACjD,MAAMU,UAAU,GAAG,MAAMC,iBAAiB,CAACH,SAAS,EAAER,MAAM,CAAC;EAC7D,IAAIQ,SAAS,CAACI,MAAM,KAAK,CAAC,EAAE;IACxB,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IAC3CD,GAAG,CAACE,IAAI,GAAG,eAAe;IAC1B,MAAMF,GAAG;EACb;EACA,IAAIH,UAAU,IAAIA,UAAU,CAACM,KAAK,CAAC,SAAS,CAAC,EAAE;IAC3CZ,QAAQ,CAACE,UAAU,GAAG,GAAG;EAC7B;EACAF,QAAQ,CAACG,IAAI,GAAGC,SAAS;EACzB,OAAOL,MAAM;AACjB,CAAC;AACD,MAAMM,WAAW,GAAGA,CAACQ,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC,EAAEC,OAAO,KAAK;EAC5D,IAAIF,UAAU,YAAYC,UAAU,EAAE;IAClC,OAAOE,OAAO,CAACC,OAAO,CAACJ,UAAU,CAAC;EACtC;EACA,OAAOE,OAAO,CAACG,eAAe,CAACL,UAAU,CAAC,IAAIG,OAAO,CAACC,OAAO,CAAC,IAAIH,UAAU,CAAC,CAAC,CAAC;AACnF,CAAC;AACD,MAAMP,iBAAiB,GAAGA,CAACM,UAAU,EAAEE,OAAO,KAAKV,WAAW,CAACQ,UAAU,EAAEE,OAAO,CAAC,CAACI,IAAI,CAAEhB,IAAI,IAAKY,OAAO,CAACK,WAAW,CAACjB,IAAI,CAAC,CAAC;AAC7H,OAAO,MAAMkB,mCAAmC,GAAG;EAC/CC,QAAQ,EAAE,OAAO;EACjBC,YAAY,EAAE,wBAAwB;EACtCC,IAAI,EAAE,CAAC,sBAAsB,EAAE,IAAI,CAAC;EACpCb,IAAI,EAAE,8BAA8B;EACpCc,QAAQ,EAAE;AACd,CAAC;AACD,OAAO,MAAMC,2BAA2B,GAAI9B,MAAM,KAAM;EACpD+B,YAAY,EAAGC,WAAW,IAAK;IAC3BA,WAAW,CAACC,aAAa,CAAClC,4BAA4B,CAACC,MAAM,CAAC,EAAEyB,mCAAmC,CAAC;EACxG;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}