{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha1 = void 0;\nvar isEmptyData_1 = require(\"./isEmptyData\");\nvar constants_1 = require(\"./constants\");\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\nvar Sha1 = /** @class */function () {\n  function Sha1(secret) {\n    this.secret = secret;\n    this.reset();\n  }\n  Sha1.prototype.update = function (toHash) {\n    var _this = this;\n    if ((0, isEmptyData_1.isEmptyData)(toHash)) {\n      return;\n    }\n    this.operation = this.operation.then(function (operation) {\n      operation.onerror = function () {\n        _this.operation = Promise.reject(new Error(\"Error encountered updating hash\"));\n      };\n      operation.process(toArrayBufferView(toHash));\n      return operation;\n    });\n    this.operation.catch(function () {});\n  };\n  Sha1.prototype.digest = function () {\n    return this.operation.then(function (operation) {\n      return new Promise(function (resolve, reject) {\n        operation.onerror = function () {\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n        operation.oncomplete = function () {\n          if (operation.result) {\n            resolve(new Uint8Array(operation.result));\n          }\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n        operation.finish();\n      });\n    });\n  };\n  Sha1.prototype.reset = function () {\n    if (this.secret) {\n      this.operation = getKeyPromise(this.secret).then(function (keyData) {\n        return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, keyData);\n      });\n      this.operation.catch(function () {});\n    } else {\n      this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest(\"SHA-1\"));\n    }\n  };\n  return Sha1;\n}();\nexports.Sha1 = Sha1;\nfunction getKeyPromise(secret) {\n  return new Promise(function (resolve, reject) {\n    var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey(\"raw\", toArrayBufferView(secret), constants_1.SHA_1_HMAC_ALGO, false, [\"sign\"]);\n    keyOperation.oncomplete = function () {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n    keyOperation.onerror = function () {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\nfunction toArrayBufferView(data) {\n  if (typeof data === \"string\") {\n    return (0, util_utf8_browser_1.fromUtf8)(data);\n  }\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n  return new Uint8Array(data);\n}","map":{"version":3,"names":["isEmptyData_1","require","constants_1","util_utf8_browser_1","util_locate_window_1","Sha1","secret","reset","prototype","update","toHash","_this","isEmptyData","operation","then","onerror","Promise","reject","Error","process","toArrayBufferView","catch","digest","resolve","oncomplete","result","Uint8Array","finish","getKeyPromise","keyData","locateWindow","msCrypto","subtle","sign","SHA_1_HMAC_ALGO","exports","keyOperation","importKey","data","fromUtf8","ArrayBuffer","isView","buffer","byteOffset","byteLength","BYTES_PER_ELEMENT"],"sources":["D:\\Work\\00-Mogul\\konva v2\\node_modules\\@aws-crypto\\sha1-browser\\src\\ie11Sha1.ts"],"sourcesContent":["import { isEmptyData } from \"./isEmptyData\";\nimport { SHA_1_HMAC_ALGO } from \"./constants\";\nimport { Checksum, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { CryptoOperation, Key, MsWindow } from \"@aws-crypto/ie11-detection\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha1 implements Checksum {\n  private readonly secret?: SourceData;\n  private operation!: Promise<CryptoOperation>;\n\n  constructor(secret?: SourceData) {\n    this.secret = secret;\n    this.reset();\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then((operation) => {\n      operation.onerror = () => {\n        this.operation = Promise.reject(\n          new Error(\"Error encountered updating hash\")\n        );\n      };\n      operation.process(toArrayBufferView(toHash));\n\n      return operation;\n    });\n    this.operation.catch(() => {});\n  }\n\n  digest(): Promise<Uint8Array> {\n    return this.operation.then<Uint8Array>(\n      (operation) =>\n        new Promise((resolve, reject) => {\n          operation.onerror = () => {\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n          operation.oncomplete = () => {\n            if (operation.result) {\n              resolve(new Uint8Array(operation.result));\n            }\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n\n          operation.finish();\n        })\n    );\n  }\n\n  reset(): void {\n    if (this.secret) {\n      this.operation = getKeyPromise(this.secret).then((keyData) =>\n          (locateWindow() as MsWindow).msCrypto.subtle.sign(\n              SHA_1_HMAC_ALGO,\n              keyData\n          )\n      );\n      this.operation.catch(() => {});\n    } else {\n      this.operation = Promise.resolve(\n          (locateWindow() as MsWindow).msCrypto.subtle.digest(\"SHA-1\")\n      );\n    }\n  }\n}\n\nfunction getKeyPromise(secret: SourceData): Promise<Key> {\n  return new Promise((resolve, reject) => {\n    const keyOperation = (locateWindow() as MsWindow).msCrypto.subtle.importKey(\n      \"raw\",\n      toArrayBufferView(secret),\n      SHA_1_HMAC_ALGO,\n      false,\n      [\"sign\"]\n    );\n\n    keyOperation.oncomplete = () => {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n    keyOperation.onerror = () => {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}