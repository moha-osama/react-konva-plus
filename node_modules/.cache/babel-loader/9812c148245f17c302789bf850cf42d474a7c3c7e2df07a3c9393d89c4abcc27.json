{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\00-Mogul\\\\konva v2\\\\src\\\\components\\\\TextElements.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextElements = () => {\n  const handleCanvasClick = e => {\n    // Check if the click is on a text element, if yes, enable editing\n    const clickedText = e.target;\n    if (clickedText instanceof window.Konva.Text) {\n      setSelectedText(clickedText);\n    } else {\n      // Otherwise, create a new text element\n      const newText = /*#__PURE__*/_jsxDEV(Text, {\n        x: e.evt.clientX - e.target.getStage().container().getBoundingClientRect().left,\n        y: e.evt.clientY - e.target.getStage().container().getBoundingClientRect().top,\n        text: \"Click to edit\",\n        draggable: true,\n        onClick: () => setSelectedText(newText),\n        onTransform: () => setSelectedText(newText),\n        onTap: () => setSelectedText(newText)\n      }, textElements.length, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this);\n      setTextElements([...textElements, newText]);\n    }\n  };\n  const handleTextChange = e => {\n    // Update the text content when editing\n    const newText = selectedText.clone({\n      text: e.target.value\n    });\n    const updatedTextElements = textElements.map(element => {\n      return element.key === selectedText.key ? newText : element;\n    });\n    setTextElements(updatedTextElements);\n  };\n  return /*#__PURE__*/_jsxDEV(Layer, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n};\n_c = TextElements;\nexport default TextElements;\nvar _c;\n$RefreshReg$(_c, \"TextElements\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Stage","Layer","Rect","Text","Image","jsxDEV","_jsxDEV","TextElements","handleCanvasClick","e","clickedText","target","window","Konva","setSelectedText","newText","x","evt","clientX","getStage","container","getBoundingClientRect","left","y","clientY","top","text","draggable","onClick","onTransform","onTap","textElements","length","fileName","_jsxFileName","lineNumber","columnNumber","setTextElements","handleTextChange","selectedText","clone","value","updatedTextElements","map","element","key","_c","$RefreshReg$"],"sources":["D:/Work/00-Mogul/konva v2/src/components/TextElements.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Stage, Layer, Rect, Text, Image } from \"react-konva\";\r\n\r\nconst TextElements = () => {\r\n  const handleCanvasClick = (e) => {\r\n    // Check if the click is on a text element, if yes, enable editing\r\n    const clickedText = e.target;\r\n    if (clickedText instanceof window.Konva.Text) {\r\n      setSelectedText(clickedText);\r\n    } else {\r\n      // Otherwise, create a new text element\r\n      const newText = (\r\n        <Text\r\n          key={textElements.length}\r\n          x={\r\n            e.evt.clientX -\r\n            e.target.getStage().container().getBoundingClientRect().left\r\n          }\r\n          y={\r\n            e.evt.clientY -\r\n            e.target.getStage().container().getBoundingClientRect().top\r\n          }\r\n          text=\"Click to edit\"\r\n          draggable\r\n          onClick={() => setSelectedText(newText)}\r\n          onTransform={() => setSelectedText(newText)}\r\n          onTap={() => setSelectedText(newText)}\r\n        />\r\n      );\r\n      setTextElements([...textElements, newText]);\r\n    }\r\n  };\r\n\r\n  const handleTextChange = (e) => {\r\n    // Update the text content when editing\r\n    const newText = selectedText.clone({ text: e.target.value });\r\n    const updatedTextElements = textElements.map((element) => {\r\n      return element.key === selectedText.key ? newText : element;\r\n    });\r\n    setTextElements(updatedTextElements);\r\n  };\r\n\r\n  return <Layer></Layer>;\r\n};\r\n\r\nexport default TextElements;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEC,KAAK,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC/B;IACA,MAAMC,WAAW,GAAGD,CAAC,CAACE,MAAM;IAC5B,IAAID,WAAW,YAAYE,MAAM,CAACC,KAAK,CAACV,IAAI,EAAE;MAC5CW,eAAe,CAACJ,WAAW,CAAC;IAC9B,CAAC,MAAM;MACL;MACA,MAAMK,OAAO,gBACXT,OAAA,CAACH,IAAI;QAEHa,CAAC,EACCP,CAAC,CAACQ,GAAG,CAACC,OAAO,GACbT,CAAC,CAACE,MAAM,CAACQ,QAAQ,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,CAACC,qBAAqB,CAAC,CAAC,CAACC,IACzD;QACDC,CAAC,EACCd,CAAC,CAACQ,GAAG,CAACO,OAAO,GACbf,CAAC,CAACE,MAAM,CAACQ,QAAQ,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,CAACC,qBAAqB,CAAC,CAAC,CAACI,GACzD;QACDC,IAAI,EAAC,eAAe;QACpBC,SAAS;QACTC,OAAO,EAAEA,CAAA,KAAMd,eAAe,CAACC,OAAO,CAAE;QACxCc,WAAW,EAAEA,CAAA,KAAMf,eAAe,CAACC,OAAO,CAAE;QAC5Ce,KAAK,EAAEA,CAAA,KAAMhB,eAAe,CAACC,OAAO;MAAE,GAbjCgB,YAAY,CAACC,MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAczB,CACF;MACDC,eAAe,CAAC,CAAC,GAAGN,YAAY,EAAEhB,OAAO,CAAC,CAAC;IAC7C;EACF,CAAC;EAED,MAAMuB,gBAAgB,GAAI7B,CAAC,IAAK;IAC9B;IACA,MAAMM,OAAO,GAAGwB,YAAY,CAACC,KAAK,CAAC;MAAEd,IAAI,EAAEjB,CAAC,CAACE,MAAM,CAAC8B;IAAM,CAAC,CAAC;IAC5D,MAAMC,mBAAmB,GAAGX,YAAY,CAACY,GAAG,CAAEC,OAAO,IAAK;MACxD,OAAOA,OAAO,CAACC,GAAG,KAAKN,YAAY,CAACM,GAAG,GAAG9B,OAAO,GAAG6B,OAAO;IAC7D,CAAC,CAAC;IACFP,eAAe,CAACK,mBAAmB,CAAC;EACtC,CAAC;EAED,oBAAOpC,OAAA,CAACL,KAAK;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACxB,CAAC;AAACU,EAAA,GAxCIvC,YAAY;AA0ClB,eAAeA,YAAY;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}