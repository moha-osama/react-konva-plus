{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\nvar util_1 = require(\"@aws-crypto/util\");\nvar constants_1 = require(\"./constants\");\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\nvar Sha256 = /** @class */function () {\n  function Sha256(secret) {\n    this.toHash = new Uint8Array(0);\n    this.secret = secret;\n    this.reset();\n  }\n  Sha256.prototype.update = function (data) {\n    if ((0, util_1.isEmptyData)(data)) {\n      return;\n    }\n    var update = (0, util_1.convertToBuffer)(data);\n    var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  };\n  Sha256.prototype.digest = function () {\n    var _this = this;\n    if (this.key) {\n      return this.key.then(function (key) {\n        return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function (data) {\n          return new Uint8Array(data);\n        });\n      });\n    }\n    if ((0, util_1.isEmptyData)(this.toHash)) {\n      return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);\n    }\n    return Promise.resolve().then(function () {\n      return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);\n    }).then(function (data) {\n      return Promise.resolve(new Uint8Array(data));\n    });\n  };\n  Sha256.prototype.reset = function () {\n    var _this = this;\n    this.toHash = new Uint8Array(0);\n    if (this.secret && this.secret !== void 0) {\n      this.key = new Promise(function (resolve, reject) {\n        (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey(\"raw\", (0, util_1.convertToBuffer)(_this.secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]).then(resolve, reject);\n      });\n      this.key.catch(function () {});\n    }\n  };\n  return Sha256;\n}();\nexports.Sha256 = Sha256;","map":{"version":3,"names":["util_1","require","constants_1","util_locate_window_1","Sha256","secret","toHash","Uint8Array","reset","prototype","update","data","isEmptyData","convertToBuffer","typedArray","byteLength","set","digest","_this","key","then","locateWindow","crypto","subtle","sign","SHA_256_HMAC_ALGO","Promise","resolve","EMPTY_DATA_SHA_256","SHA_256_HASH","reject","importKey","catch","exports"],"sources":["D:\\Work\\00-Mogul\\konva v2\\node_modules\\@aws-sdk\\client-s3\\node_modules\\@aws-crypto\\sha256-browser\\src\\webCryptoSha256.ts"],"sourcesContent":["import { Checksum, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\nimport {\n  EMPTY_DATA_SHA_256,\n  SHA_256_HASH,\n  SHA_256_HMAC_ALGO,\n} from \"./constants\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Checksum {\n  private readonly secret?: SourceData;\n  private key: Promise<CryptoKey> | undefined;\n  private toHash: Uint8Array = new Uint8Array(0);\n\n  constructor(secret?: SourceData) {\n    this.secret = secret;\n    this.reset();\n  }\n\n  update(data: SourceData): void {\n    if (isEmptyData(data)) {\n      return;\n    }\n\n    const update = convertToBuffer(data);\n    const typedArray = new Uint8Array(\n      this.toHash.byteLength + update.byteLength\n    );\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  }\n\n  digest(): Promise<Uint8Array> {\n    if (this.key) {\n      return this.key.then((key) =>\n        locateWindow()\n          .crypto.subtle.sign(SHA_256_HMAC_ALGO, key, this.toHash)\n          .then((data) => new Uint8Array(data))\n      );\n    }\n\n    if (isEmptyData(this.toHash)) {\n      return Promise.resolve(EMPTY_DATA_SHA_256);\n    }\n\n    return Promise.resolve()\n      .then(() =>\n        locateWindow().crypto.subtle.digest(SHA_256_HASH, this.toHash)\n      )\n      .then((data) => Promise.resolve(new Uint8Array(data)));\n  }\n\n  reset(): void {\n    this.toHash = new Uint8Array(0);\n    if (this.secret && this.secret !== void 0) {\n      this.key = new Promise((resolve, reject) => {\n        locateWindow()\n            .crypto.subtle.importKey(\n            \"raw\",\n            convertToBuffer(this.secret as SourceData),\n            SHA_256_HMAC_ALGO,\n            false,\n            [\"sign\"]\n        )\n            .then(resolve, reject);\n      });\n      this.key.catch(() => {});\n    }\n  }\n}\n"],"mappings":";;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AAKA,IAAAE,oBAAA,GAAAF,OAAA;AAEA,IAAAG,MAAA;EAKE,SAAAA,OAAYC,MAAmB;IAFvB,KAAAC,MAAM,GAAe,IAAIC,UAAU,CAAC,CAAC,CAAC;IAG5C,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACG,KAAK,EAAE;EACd;EAEAJ,MAAA,CAAAK,SAAA,CAAAC,MAAM,GAAN,UAAOC,IAAgB;IACrB,IAAI,IAAAX,MAAA,CAAAY,WAAW,EAACD,IAAI,CAAC,EAAE;MACrB;;IAGF,IAAMD,MAAM,GAAG,IAAAV,MAAA,CAAAa,eAAe,EAACF,IAAI,CAAC;IACpC,IAAMG,UAAU,GAAG,IAAIP,UAAU,CAC/B,IAAI,CAACD,MAAM,CAACS,UAAU,GAAGL,MAAM,CAACK,UAAU,CAC3C;IACDD,UAAU,CAACE,GAAG,CAAC,IAAI,CAACV,MAAM,EAAE,CAAC,CAAC;IAC9BQ,UAAU,CAACE,GAAG,CAACN,MAAM,EAAE,IAAI,CAACJ,MAAM,CAACS,UAAU,CAAC;IAC9C,IAAI,CAACT,MAAM,GAAGQ,UAAU;EAC1B,CAAC;EAEDV,MAAA,CAAAK,SAAA,CAAAQ,MAAM,GAAN;IAAA,IAAAC,KAAA;IACE,IAAI,IAAI,CAACC,GAAG,EAAE;MACZ,OAAO,IAAI,CAACA,GAAG,CAACC,IAAI,CAAC,UAACD,GAAG;QACvB,WAAAhB,oBAAA,CAAAkB,YAAY,GAAE,CACXC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACtB,WAAA,CAAAuB,iBAAiB,EAAEN,GAAG,EAAED,KAAI,CAACZ,MAAM,CAAC,CACvDc,IAAI,CAAC,UAACT,IAAI;UAAK,WAAIJ,UAAU,CAACI,IAAI,CAAC;QAApB,CAAoB,CAAC;MAFvC,CAEuC,CACxC;;IAGH,IAAI,IAAAX,MAAA,CAAAY,WAAW,EAAC,IAAI,CAACN,MAAM,CAAC,EAAE;MAC5B,OAAOoB,OAAO,CAACC,OAAO,CAACzB,WAAA,CAAA0B,kBAAkB,CAAC;;IAG5C,OAAOF,OAAO,CAACC,OAAO,EAAE,CACrBP,IAAI,CAAC;MACJ,WAAAjB,oBAAA,CAAAkB,YAAY,GAAE,CAACC,MAAM,CAACC,MAAM,CAACN,MAAM,CAACf,WAAA,CAAA2B,YAAY,EAAEX,KAAI,CAACZ,MAAM,CAAC;IAA9D,CAA8D,CAC/D,CACAc,IAAI,CAAC,UAACT,IAAI;MAAK,OAAAe,OAAO,CAACC,OAAO,CAAC,IAAIpB,UAAU,CAACI,IAAI,CAAC,CAAC;IAArC,CAAqC,CAAC;EAC1D,CAAC;EAEDP,MAAA,CAAAK,SAAA,CAAAD,KAAK,GAAL;IAAA,IAAAU,KAAA;IACE,IAAI,CAACZ,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC,CAAC;IAC/B,IAAI,IAAI,CAACF,MAAM,IAAI,IAAI,CAACA,MAAM,KAAK,KAAK,CAAC,EAAE;MACzC,IAAI,CAACc,GAAG,GAAG,IAAIO,OAAO,CAAC,UAACC,OAAO,EAAEG,MAAM;QACrC,IAAA3B,oBAAA,CAAAkB,YAAY,GAAE,CACTC,MAAM,CAACC,MAAM,CAACQ,SAAS,CACxB,KAAK,EACL,IAAA/B,MAAA,CAAAa,eAAe,EAACK,KAAI,CAACb,MAAoB,CAAC,EAC1CH,WAAA,CAAAuB,iBAAiB,EACjB,KAAK,EACL,CAAC,MAAM,CAAC,CACX,CACIL,IAAI,CAACO,OAAO,EAAEG,MAAM,CAAC;MAC5B,CAAC,CAAC;MACF,IAAI,CAACX,GAAG,CAACa,KAAK,CAAC,aAAO,CAAC,CAAC;;EAE5B,CAAC;EACH,OAAA5B,MAAC;AAAD,CAAC,CA7DD;AAAa6B,OAAA,CAAA7B,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}