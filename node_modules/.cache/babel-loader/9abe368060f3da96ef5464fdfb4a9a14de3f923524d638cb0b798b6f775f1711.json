{"ast":null,"code":"import { XmlNode as __XmlNode, XmlText as __XmlText } from \"@aws-sdk/xml-builder\";\nimport { HttpRequest as __HttpRequest, isValidHostname as __isValidHostname } from \"@smithy/protocol-http\";\nimport { collectBody, dateToUtcString as __dateToUtcString, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, expectUnion as __expectUnion, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, map, parseBoolean as __parseBoolean, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, parseRfc7231DateTime as __parseRfc7231DateTime, resolvedPath as __resolvedPath, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, withBaseException } from \"@smithy/smithy-client\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { AnalyticsFilter, BucketAlreadyExists, BucketAlreadyOwnedByYou, InvalidObjectState, LifecycleRuleFilter, MetricsFilter, NoSuchBucket, NoSuchKey, NoSuchUpload, NotFound, ObjectNotInActiveTierError, ReplicationRuleFilter } from \"../models/models_0\";\nimport { ObjectAlreadyInActiveTierError } from \"../models/models_1\";\nimport { S3ServiceException as __BaseException } from \"../models/S3ServiceException\";\nexport const se_AbortMultipartUploadCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"AbortMultipartUpload\"],\n    uploadId: [, __expectNonNull(input.UploadId, `UploadId`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_CompleteMultipartUploadCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n    \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n    \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n    \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"CompleteMultipartUpload\"],\n    uploadId: [, __expectNonNull(input.UploadId, `UploadId`)]\n  });\n  let body;\n  if (input.MultipartUpload !== undefined) {\n    body = se_CompletedMultipartUpload(input.MultipartUpload, context);\n  }\n  let contents;\n  if (input.MultipartUpload !== undefined) {\n    contents = se_CompletedMultipartUpload(input.MultipartUpload, context);\n    contents = contents.withName(\"CompleteMultipartUpload\");\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_CopyObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-acl\": input.ACL,\n    \"cache-control\": input.CacheControl,\n    \"x-amz-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"content-disposition\": input.ContentDisposition,\n    \"content-encoding\": input.ContentEncoding,\n    \"content-language\": input.ContentLanguage,\n    \"content-type\": input.ContentType,\n    \"x-amz-copy-source\": input.CopySource,\n    \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n    \"x-amz-copy-source-if-modified-since\": [() => isSerializableHeaderValue(input.CopySourceIfModifiedSince), () => __dateToUtcString(input.CopySourceIfModifiedSince).toString()],\n    \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n    \"x-amz-copy-source-if-unmodified-since\": [() => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince), () => __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()],\n    expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-metadata-directive\": input.MetadataDirective,\n    \"x-amz-tagging-directive\": input.TaggingDirective,\n    \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n    \"x-amz-storage-class\": input.StorageClass,\n    \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n    \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n    \"x-amz-server-side-encryption-bucket-key-enabled\": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],\n    \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n    \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n    \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-tagging\": input.Tagging,\n    \"x-amz-object-lock-mode\": input.ObjectLockMode,\n    \"x-amz-object-lock-retain-until-date\": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()],\n    \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner,\n    ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {\n      acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n      return acc;\n    }, {}))\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"CopyObject\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_CreateBucketCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-acl\": input.ACL,\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write\": input.GrantWrite,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-bucket-object-lock-enabled\": [() => isSerializableHeaderValue(input.ObjectLockEnabledForBucket), () => input.ObjectLockEnabledForBucket.toString()],\n    \"x-amz-object-ownership\": input.ObjectOwnership\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  let body;\n  if (input.CreateBucketConfiguration !== undefined) {\n    body = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);\n  }\n  let contents;\n  if (input.CreateBucketConfiguration !== undefined) {\n    contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    body\n  });\n};\nexport const se_CreateMultipartUploadCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-acl\": input.ACL,\n    \"cache-control\": input.CacheControl,\n    \"content-disposition\": input.ContentDisposition,\n    \"content-encoding\": input.ContentEncoding,\n    \"content-language\": input.ContentLanguage,\n    \"content-type\": input.ContentType,\n    expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n    \"x-amz-storage-class\": input.StorageClass,\n    \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n    \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n    \"x-amz-server-side-encryption-bucket-key-enabled\": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-tagging\": input.Tagging,\n    \"x-amz-object-lock-mode\": input.ObjectLockMode,\n    \"x-amz-object-lock-retain-until-date\": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()],\n    \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-checksum-algorithm\": input.ChecksumAlgorithm,\n    ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {\n      acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n      return acc;\n    }, {}))\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    uploads: [, \"\"],\n    \"x-id\": [, \"CreateMultipartUpload\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body\n  });\n};\nexport const se_DeleteBucketAnalyticsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    analytics: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketCorsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    cors: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketEncryptionCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    encryption: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = {};\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"intelligent-tiering\": [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketInventoryConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    inventory: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketLifecycleCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    lifecycle: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketMetricsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    metrics: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketOwnershipControlsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    ownershipControls: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketPolicyCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    policy: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketReplicationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    replication: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    tagging: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteBucketWebsiteCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    website: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-mfa\": input.MFA,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-bypass-governance-retention\": [() => isSerializableHeaderValue(input.BypassGovernanceRetention), () => input.BypassGovernanceRetention.toString()],\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"DeleteObject\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteObjectsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-mfa\": input.MFA,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-bypass-governance-retention\": [() => isSerializableHeaderValue(input.BypassGovernanceRetention), () => input.BypassGovernanceRetention.toString()],\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    delete: [, \"\"],\n    \"x-id\": [, \"DeleteObjects\"]\n  });\n  let body;\n  if (input.Delete !== undefined) {\n    body = se_Delete(input.Delete, context);\n  }\n  let contents;\n  if (input.Delete !== undefined) {\n    contents = se_Delete(input.Delete, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeleteObjectTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    tagging: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_DeletePublicAccessBlockCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    publicAccessBlock: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketAccelerateConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-request-payer\": input.RequestPayer\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    accelerate: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketAclCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    acl: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketAnalyticsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    analytics: [, \"\"],\n    \"x-id\": [, \"GetBucketAnalyticsConfiguration\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketCorsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    cors: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketEncryptionCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    encryption: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = {};\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"intelligent-tiering\": [, \"\"],\n    \"x-id\": [, \"GetBucketIntelligentTieringConfiguration\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketInventoryConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    inventory: [, \"\"],\n    \"x-id\": [, \"GetBucketInventoryConfiguration\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketLifecycleConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    lifecycle: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketLocationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    location: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketLoggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    logging: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketMetricsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    metrics: [, \"\"],\n    \"x-id\": [, \"GetBucketMetricsConfiguration\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketNotificationConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    notification: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketOwnershipControlsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    ownershipControls: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketPolicyCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    policy: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketPolicyStatusCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    policyStatus: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketReplicationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    replication: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketRequestPaymentCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    requestPayment: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    tagging: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketVersioningCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    versioning: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetBucketWebsiteCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    website: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"if-match\": input.IfMatch,\n    \"if-modified-since\": [() => isSerializableHeaderValue(input.IfModifiedSince), () => __dateToUtcString(input.IfModifiedSince).toString()],\n    \"if-none-match\": input.IfNoneMatch,\n    \"if-unmodified-since\": [() => isSerializableHeaderValue(input.IfUnmodifiedSince), () => __dateToUtcString(input.IfUnmodifiedSince).toString()],\n    range: input.Range,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-checksum-mode\": input.ChecksumMode\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"GetObject\"],\n    \"response-cache-control\": [, input.ResponseCacheControl],\n    \"response-content-disposition\": [, input.ResponseContentDisposition],\n    \"response-content-encoding\": [, input.ResponseContentEncoding],\n    \"response-content-language\": [, input.ResponseContentLanguage],\n    \"response-content-type\": [, input.ResponseContentType],\n    \"response-expires\": [() => input.ResponseExpires !== void 0, () => __dateToUtcString(input.ResponseExpires).toString()],\n    versionId: [, input.VersionId],\n    partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetObjectAclCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    acl: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetObjectAttributesCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-max-parts\": [() => isSerializableHeaderValue(input.MaxParts), () => input.MaxParts.toString()],\n    \"x-amz-part-number-marker\": input.PartNumberMarker,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-object-attributes\": [() => isSerializableHeaderValue(input.ObjectAttributes), () => (input.ObjectAttributes || []).map(_entry => _entry).join(\", \")]\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    attributes: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetObjectLegalHoldCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"legal-hold\": [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetObjectLockConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"object-lock\": [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetObjectRetentionCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    retention: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetObjectTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-request-payer\": input.RequestPayer\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    tagging: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetObjectTorrentCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    torrent: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_GetPublicAccessBlockCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    publicAccessBlock: [, \"\"]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_HeadBucketCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"HEAD\",\n    headers,\n    path: resolvedPath,\n    body\n  });\n};\nexport const se_HeadObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"if-match\": input.IfMatch,\n    \"if-modified-since\": [() => isSerializableHeaderValue(input.IfModifiedSince), () => __dateToUtcString(input.IfModifiedSince).toString()],\n    \"if-none-match\": input.IfNoneMatch,\n    \"if-unmodified-since\": [() => isSerializableHeaderValue(input.IfUnmodifiedSince), () => __dateToUtcString(input.IfUnmodifiedSince).toString()],\n    range: input.Range,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-checksum-mode\": input.ChecksumMode\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    versionId: [, input.VersionId],\n    partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"HEAD\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_ListBucketAnalyticsConfigurationsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    analytics: [, \"\"],\n    \"x-id\": [, \"ListBucketAnalyticsConfigurations\"],\n    \"continuation-token\": [, input.ContinuationToken]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_ListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = {};\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"intelligent-tiering\": [, \"\"],\n    \"x-id\": [, \"ListBucketIntelligentTieringConfigurations\"],\n    \"continuation-token\": [, input.ContinuationToken]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_ListBucketInventoryConfigurationsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    inventory: [, \"\"],\n    \"x-id\": [, \"ListBucketInventoryConfigurations\"],\n    \"continuation-token\": [, input.ContinuationToken]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_ListBucketMetricsConfigurationsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    metrics: [, \"\"],\n    \"x-id\": [, \"ListBucketMetricsConfigurations\"],\n    \"continuation-token\": [, input.ContinuationToken]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_ListBucketsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = {\n    \"content-type\": \"application/xml\"\n  };\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  let body;\n  body = \"\";\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body\n  });\n};\nexport const se_ListMultipartUploadsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-request-payer\": input.RequestPayer\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    uploads: [, \"\"],\n    delimiter: [, input.Delimiter],\n    \"encoding-type\": [, input.EncodingType],\n    \"key-marker\": [, input.KeyMarker],\n    \"max-uploads\": [() => input.MaxUploads !== void 0, () => input.MaxUploads.toString()],\n    prefix: [, input.Prefix],\n    \"upload-id-marker\": [, input.UploadIdMarker]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_ListObjectsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-optional-object-attributes\": [() => isSerializableHeaderValue(input.OptionalObjectAttributes), () => (input.OptionalObjectAttributes || []).map(_entry => _entry).join(\", \")]\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    delimiter: [, input.Delimiter],\n    \"encoding-type\": [, input.EncodingType],\n    marker: [, input.Marker],\n    \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n    prefix: [, input.Prefix]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_ListObjectsV2Command = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-optional-object-attributes\": [() => isSerializableHeaderValue(input.OptionalObjectAttributes), () => (input.OptionalObjectAttributes || []).map(_entry => _entry).join(\", \")]\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"list-type\": [, \"2\"],\n    delimiter: [, input.Delimiter],\n    \"encoding-type\": [, input.EncodingType],\n    \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n    prefix: [, input.Prefix],\n    \"continuation-token\": [, input.ContinuationToken],\n    \"fetch-owner\": [() => input.FetchOwner !== void 0, () => input.FetchOwner.toString()],\n    \"start-after\": [, input.StartAfter]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_ListObjectVersionsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-optional-object-attributes\": [() => isSerializableHeaderValue(input.OptionalObjectAttributes), () => (input.OptionalObjectAttributes || []).map(_entry => _entry).join(\", \")]\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    versions: [, \"\"],\n    delimiter: [, input.Delimiter],\n    \"encoding-type\": [, input.EncodingType],\n    \"key-marker\": [, input.KeyMarker],\n    \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n    prefix: [, input.Prefix],\n    \"version-id-marker\": [, input.VersionIdMarker]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_ListPartsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"ListParts\"],\n    \"max-parts\": [() => input.MaxParts !== void 0, () => input.MaxParts.toString()],\n    \"part-number-marker\": [, input.PartNumberMarker],\n    uploadId: [, __expectNonNull(input.UploadId, `UploadId`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketAccelerateConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    accelerate: [, \"\"]\n  });\n  let body;\n  if (input.AccelerateConfiguration !== undefined) {\n    body = se_AccelerateConfiguration(input.AccelerateConfiguration, context);\n  }\n  let contents;\n  if (input.AccelerateConfiguration !== undefined) {\n    contents = se_AccelerateConfiguration(input.AccelerateConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketAclCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-acl\": input.ACL,\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write\": input.GrantWrite,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    acl: [, \"\"]\n  });\n  let body;\n  if (input.AccessControlPolicy !== undefined) {\n    body = se_AccessControlPolicy(input.AccessControlPolicy, context);\n  }\n  let contents;\n  if (input.AccessControlPolicy !== undefined) {\n    contents = se_AccessControlPolicy(input.AccessControlPolicy, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketAnalyticsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    analytics: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  if (input.AnalyticsConfiguration !== undefined) {\n    body = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);\n  }\n  let contents;\n  if (input.AnalyticsConfiguration !== undefined) {\n    contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketCorsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    cors: [, \"\"]\n  });\n  let body;\n  if (input.CORSConfiguration !== undefined) {\n    body = se_CORSConfiguration(input.CORSConfiguration, context);\n  }\n  let contents;\n  if (input.CORSConfiguration !== undefined) {\n    contents = se_CORSConfiguration(input.CORSConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketEncryptionCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    encryption: [, \"\"]\n  });\n  let body;\n  if (input.ServerSideEncryptionConfiguration !== undefined) {\n    body = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n  }\n  let contents;\n  if (input.ServerSideEncryptionConfiguration !== undefined) {\n    contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = {\n    \"content-type\": \"application/xml\"\n  };\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"intelligent-tiering\": [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  if (input.IntelligentTieringConfiguration !== undefined) {\n    body = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n  }\n  let contents;\n  if (input.IntelligentTieringConfiguration !== undefined) {\n    contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketInventoryConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    inventory: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  if (input.InventoryConfiguration !== undefined) {\n    body = se_InventoryConfiguration(input.InventoryConfiguration, context);\n  }\n  let contents;\n  if (input.InventoryConfiguration !== undefined) {\n    contents = se_InventoryConfiguration(input.InventoryConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketLifecycleConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    lifecycle: [, \"\"]\n  });\n  let body;\n  if (input.LifecycleConfiguration !== undefined) {\n    body = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n  }\n  let contents;\n  if (input.LifecycleConfiguration !== undefined) {\n    contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n    contents = contents.withName(\"LifecycleConfiguration\");\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketLoggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    logging: [, \"\"]\n  });\n  let body;\n  if (input.BucketLoggingStatus !== undefined) {\n    body = se_BucketLoggingStatus(input.BucketLoggingStatus, context);\n  }\n  let contents;\n  if (input.BucketLoggingStatus !== undefined) {\n    contents = se_BucketLoggingStatus(input.BucketLoggingStatus, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketMetricsConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    metrics: [, \"\"],\n    id: [, __expectNonNull(input.Id, `Id`)]\n  });\n  let body;\n  if (input.MetricsConfiguration !== undefined) {\n    body = se_MetricsConfiguration(input.MetricsConfiguration, context);\n  }\n  let contents;\n  if (input.MetricsConfiguration !== undefined) {\n    contents = se_MetricsConfiguration(input.MetricsConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketNotificationConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-skip-destination-validation\": [() => isSerializableHeaderValue(input.SkipDestinationValidation), () => input.SkipDestinationValidation.toString()]\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    notification: [, \"\"]\n  });\n  let body;\n  if (input.NotificationConfiguration !== undefined) {\n    body = se_NotificationConfiguration(input.NotificationConfiguration, context);\n  }\n  let contents;\n  if (input.NotificationConfiguration !== undefined) {\n    contents = se_NotificationConfiguration(input.NotificationConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketOwnershipControlsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    ownershipControls: [, \"\"]\n  });\n  let body;\n  if (input.OwnershipControls !== undefined) {\n    body = se_OwnershipControls(input.OwnershipControls, context);\n  }\n  let contents;\n  if (input.OwnershipControls !== undefined) {\n    contents = se_OwnershipControls(input.OwnershipControls, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketPolicyCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"text/plain\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-confirm-remove-self-bucket-access\": [() => isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess), () => input.ConfirmRemoveSelfBucketAccess.toString()],\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    policy: [, \"\"]\n  });\n  let body;\n  if (input.Policy !== undefined) {\n    body = input.Policy;\n  }\n  let contents;\n  if (input.Policy !== undefined) {\n    contents = input.Policy;\n    body = contents;\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketReplicationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-bucket-object-lock-token\": input.Token,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    replication: [, \"\"]\n  });\n  let body;\n  if (input.ReplicationConfiguration !== undefined) {\n    body = se_ReplicationConfiguration(input.ReplicationConfiguration, context);\n  }\n  let contents;\n  if (input.ReplicationConfiguration !== undefined) {\n    contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketRequestPaymentCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    requestPayment: [, \"\"]\n  });\n  let body;\n  if (input.RequestPaymentConfiguration !== undefined) {\n    body = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n  }\n  let contents;\n  if (input.RequestPaymentConfiguration !== undefined) {\n    contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    tagging: [, \"\"]\n  });\n  let body;\n  if (input.Tagging !== undefined) {\n    body = se_Tagging(input.Tagging, context);\n  }\n  let contents;\n  if (input.Tagging !== undefined) {\n    contents = se_Tagging(input.Tagging, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketVersioningCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-mfa\": input.MFA,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    versioning: [, \"\"]\n  });\n  let body;\n  if (input.VersioningConfiguration !== undefined) {\n    body = se_VersioningConfiguration(input.VersioningConfiguration, context);\n  }\n  let contents;\n  if (input.VersioningConfiguration !== undefined) {\n    contents = se_VersioningConfiguration(input.VersioningConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutBucketWebsiteCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    website: [, \"\"]\n  });\n  let body;\n  if (input.WebsiteConfiguration !== undefined) {\n    body = se_WebsiteConfiguration(input.WebsiteConfiguration, context);\n  }\n  let contents;\n  if (input.WebsiteConfiguration !== undefined) {\n    contents = se_WebsiteConfiguration(input.WebsiteConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": input.ContentType || \"application/octet-stream\",\n    \"x-amz-acl\": input.ACL,\n    \"cache-control\": input.CacheControl,\n    \"content-disposition\": input.ContentDisposition,\n    \"content-encoding\": input.ContentEncoding,\n    \"content-language\": input.ContentLanguage,\n    \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n    \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n    \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n    \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n    expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n    \"x-amz-storage-class\": input.StorageClass,\n    \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n    \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n    \"x-amz-server-side-encryption-bucket-key-enabled\": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-tagging\": input.Tagging,\n    \"x-amz-object-lock-mode\": input.ObjectLockMode,\n    \"x-amz-object-lock-retain-until-date\": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()],\n    \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {\n      acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n      return acc;\n    }, {}))\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"PutObject\"]\n  });\n  let body;\n  if (input.Body !== undefined) {\n    body = input.Body;\n  }\n  let contents;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutObjectAclCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-acl\": input.ACL,\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-grant-full-control\": input.GrantFullControl,\n    \"x-amz-grant-read\": input.GrantRead,\n    \"x-amz-grant-read-acp\": input.GrantReadACP,\n    \"x-amz-grant-write\": input.GrantWrite,\n    \"x-amz-grant-write-acp\": input.GrantWriteACP,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    acl: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  if (input.AccessControlPolicy !== undefined) {\n    body = se_AccessControlPolicy(input.AccessControlPolicy, context);\n  }\n  let contents;\n  if (input.AccessControlPolicy !== undefined) {\n    contents = se_AccessControlPolicy(input.AccessControlPolicy, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutObjectLegalHoldCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"legal-hold\": [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  if (input.LegalHold !== undefined) {\n    body = se_ObjectLockLegalHold(input.LegalHold, context);\n  }\n  let contents;\n  if (input.LegalHold !== undefined) {\n    contents = se_ObjectLockLegalHold(input.LegalHold, context);\n    contents = contents.withName(\"LegalHold\");\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutObjectLockConfigurationCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-bucket-object-lock-token\": input.Token,\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    \"object-lock\": [, \"\"]\n  });\n  let body;\n  if (input.ObjectLockConfiguration !== undefined) {\n    body = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);\n  }\n  let contents;\n  if (input.ObjectLockConfiguration !== undefined) {\n    contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutObjectRetentionCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-bypass-governance-retention\": [() => isSerializableHeaderValue(input.BypassGovernanceRetention), () => input.BypassGovernanceRetention.toString()],\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    retention: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  if (input.Retention !== undefined) {\n    body = se_ObjectLockRetention(input.Retention, context);\n  }\n  let contents;\n  if (input.Retention !== undefined) {\n    contents = se_ObjectLockRetention(input.Retention, context);\n    contents = contents.withName(\"Retention\");\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutObjectTaggingCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-request-payer\": input.RequestPayer\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    tagging: [, \"\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  if (input.Tagging !== undefined) {\n    body = se_Tagging(input.Tagging, context);\n  }\n  let contents;\n  if (input.Tagging !== undefined) {\n    contents = se_Tagging(input.Tagging, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_PutPublicAccessBlockCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  const query = map({\n    publicAccessBlock: [, \"\"]\n  });\n  let body;\n  if (input.PublicAccessBlockConfiguration !== undefined) {\n    body = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n  }\n  let contents;\n  if (input.PublicAccessBlockConfiguration !== undefined) {\n    contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_RestoreObjectCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    restore: [, \"\"],\n    \"x-id\": [, \"RestoreObject\"],\n    versionId: [, input.VersionId]\n  });\n  let body;\n  if (input.RestoreRequest !== undefined) {\n    body = se_RestoreRequest(input.RestoreRequest, context);\n  }\n  let contents;\n  if (input.RestoreRequest !== undefined) {\n    contents = se_RestoreRequest(input.RestoreRequest, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_SelectObjectContentCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/xml\",\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    select: [, \"\"],\n    \"select-type\": [, \"2\"],\n    \"x-id\": [, \"SelectObjectContent\"]\n  });\n  let body;\n  body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n  const bodyNode = new __XmlNode(\"SelectObjectContentRequest\");\n  bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n  if (input.Expression !== undefined) {\n    const node = __XmlNode.of(\"Expression\", input.Expression).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType !== undefined) {\n    const node = __XmlNode.of(\"ExpressionType\", input.ExpressionType).withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.InputSerialization !== undefined) {\n    const node = se_InputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization !== undefined) {\n    const node = se_OutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RequestProgress !== undefined) {\n    const node = se_RequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ScanRange !== undefined) {\n    const node = se_ScanRange(input.ScanRange, context).withName(\"ScanRange\");\n    bodyNode.addChildNode(node);\n  }\n  body += bodyNode.toString();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_UploadPartCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"content-type\": \"application/octet-stream\",\n    \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n    \"content-md5\": input.ContentMD5,\n    \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n    \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n    \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n    \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"UploadPart\"],\n    partNumber: [__expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],\n    uploadId: [, __expectNonNull(input.UploadId, `UploadId`)]\n  });\n  let body;\n  if (input.Body !== undefined) {\n    body = input.Body;\n  }\n  let contents;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_UploadPartCopyCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-copy-source\": input.CopySource,\n    \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n    \"x-amz-copy-source-if-modified-since\": [() => isSerializableHeaderValue(input.CopySourceIfModifiedSince), () => __dateToUtcString(input.CopySourceIfModifiedSince).toString()],\n    \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n    \"x-amz-copy-source-if-unmodified-since\": [() => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince), () => __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()],\n    \"x-amz-copy-source-range\": input.CopySourceRange,\n    \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n    \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n    \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n    \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n    \"x-amz-request-payer\": input.RequestPayer,\n    \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner\n  });\n  let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n  resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n  const query = map({\n    \"x-id\": [, \"UploadPartCopy\"],\n    partNumber: [__expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],\n    uploadId: [, __expectNonNull(input.UploadId, `UploadId`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const se_WriteGetObjectResponseCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\",\n    \"content-type\": \"application/octet-stream\",\n    \"x-amz-request-route\": input.RequestRoute,\n    \"x-amz-request-token\": input.RequestToken,\n    \"x-amz-fwd-status\": [() => isSerializableHeaderValue(input.StatusCode), () => input.StatusCode.toString()],\n    \"x-amz-fwd-error-code\": input.ErrorCode,\n    \"x-amz-fwd-error-message\": input.ErrorMessage,\n    \"x-amz-fwd-header-accept-ranges\": input.AcceptRanges,\n    \"x-amz-fwd-header-cache-control\": input.CacheControl,\n    \"x-amz-fwd-header-content-disposition\": input.ContentDisposition,\n    \"x-amz-fwd-header-content-encoding\": input.ContentEncoding,\n    \"x-amz-fwd-header-content-language\": input.ContentLanguage,\n    \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n    \"x-amz-fwd-header-content-range\": input.ContentRange,\n    \"x-amz-fwd-header-content-type\": input.ContentType,\n    \"x-amz-fwd-header-x-amz-checksum-crc32\": input.ChecksumCRC32,\n    \"x-amz-fwd-header-x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n    \"x-amz-fwd-header-x-amz-checksum-sha1\": input.ChecksumSHA1,\n    \"x-amz-fwd-header-x-amz-checksum-sha256\": input.ChecksumSHA256,\n    \"x-amz-fwd-header-x-amz-delete-marker\": [() => isSerializableHeaderValue(input.DeleteMarker), () => input.DeleteMarker.toString()],\n    \"x-amz-fwd-header-etag\": input.ETag,\n    \"x-amz-fwd-header-expires\": [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n    \"x-amz-fwd-header-x-amz-expiration\": input.Expiration,\n    \"x-amz-fwd-header-last-modified\": [() => isSerializableHeaderValue(input.LastModified), () => __dateToUtcString(input.LastModified).toString()],\n    \"x-amz-fwd-header-x-amz-missing-meta\": [() => isSerializableHeaderValue(input.MissingMeta), () => input.MissingMeta.toString()],\n    \"x-amz-fwd-header-x-amz-object-lock-mode\": input.ObjectLockMode,\n    \"x-amz-fwd-header-x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n    \"x-amz-fwd-header-x-amz-object-lock-retain-until-date\": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()],\n    \"x-amz-fwd-header-x-amz-mp-parts-count\": [() => isSerializableHeaderValue(input.PartsCount), () => input.PartsCount.toString()],\n    \"x-amz-fwd-header-x-amz-replication-status\": input.ReplicationStatus,\n    \"x-amz-fwd-header-x-amz-request-charged\": input.RequestCharged,\n    \"x-amz-fwd-header-x-amz-restore\": input.Restore,\n    \"x-amz-fwd-header-x-amz-server-side-encryption\": input.ServerSideEncryption,\n    \"x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n    \"x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n    \"x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    \"x-amz-fwd-header-x-amz-storage-class\": input.StorageClass,\n    \"x-amz-fwd-header-x-amz-tagging-count\": [() => isSerializableHeaderValue(input.TagCount), () => input.TagCount.toString()],\n    \"x-amz-fwd-header-x-amz-version-id\": input.VersionId,\n    \"x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled\": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],\n    ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {\n      acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n      return acc;\n    }, {}))\n  });\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/WriteGetObjectResponse\";\n  const query = map({\n    \"x-id\": [, \"WriteGetObjectResponse\"]\n  });\n  let body;\n  if (input.Body !== undefined) {\n    body = input.Body;\n  }\n  let contents;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  let {\n    hostname: resolvedHostname\n  } = await context.endpoint();\n  if (context.disableHostPrefix !== true) {\n    resolvedHostname = \"{RequestRoute}.\" + resolvedHostname;\n    if (input.RequestRoute === undefined) {\n      throw new Error(\"Empty value provided for input host prefix: RequestRoute.\");\n    }\n    resolvedHostname = resolvedHostname.replace(\"{RequestRoute}\", input.RequestRoute);\n    if (!__isValidHostname(resolvedHostname)) {\n      throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n    }\n  }\n  return new __HttpRequest({\n    protocol,\n    hostname: resolvedHostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const de_AbortMultipartUploadCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_AbortMultipartUploadCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_AbortMultipartUploadCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchUpload\":\n    case \"com.amazonaws.s3#NoSuchUpload\":\n      throw await de_NoSuchUploadRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_CompleteMultipartUploadCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_CompleteMultipartUploadCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    Expiration: [, output.headers[\"x-amz-expiration\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(data[\"Bucket\"]);\n  }\n  if (data[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(data[\"ChecksumCRC32\"]);\n  }\n  if (data[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(data[\"ChecksumCRC32C\"]);\n  }\n  if (data[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(data[\"ChecksumSHA1\"]);\n  }\n  if (data[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(data[\"ChecksumSHA256\"]);\n  }\n  if (data[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(data[\"ETag\"]);\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = __expectString(data[\"Key\"]);\n  }\n  if (data[\"Location\"] !== undefined) {\n    contents.Location = __expectString(data[\"Location\"]);\n  }\n  return contents;\n};\nconst de_CompleteMultipartUploadCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_CopyObjectCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_CopyObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    Expiration: [, output.headers[\"x-amz-expiration\"]],\n    CopySourceVersionId: [, output.headers[\"x-amz-copy-source-version-id\"]],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.CopyObjectResult = de_CopyObjectResult(data, context);\n  return contents;\n};\nconst de_CopyObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ObjectNotInActiveTierError\":\n    case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n      throw await de_ObjectNotInActiveTierErrorRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_CreateBucketCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_CreateBucketCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    Location: [, output.headers[\"location\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_CreateBucketCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BucketAlreadyExists\":\n    case \"com.amazonaws.s3#BucketAlreadyExists\":\n      throw await de_BucketAlreadyExistsRes(parsedOutput, context);\n    case \"BucketAlreadyOwnedByYou\":\n    case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n      throw await de_BucketAlreadyOwnedByYouRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_CreateMultipartUploadCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_CreateMultipartUploadCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    AbortDate: [() => void 0 !== output.headers[\"x-amz-abort-date\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"x-amz-abort-date\"]))],\n    AbortRuleId: [, output.headers[\"x-amz-abort-rule-id\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    ChecksumAlgorithm: [, output.headers[\"x-amz-checksum-algorithm\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(data[\"Bucket\"]);\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = __expectString(data[\"Key\"]);\n  }\n  if (data[\"UploadId\"] !== undefined) {\n    contents.UploadId = __expectString(data[\"UploadId\"]);\n  }\n  return contents;\n};\nconst de_CreateMultipartUploadCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketAnalyticsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketCorsCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketCorsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketCorsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketEncryptionCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketEncryptionCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketEncryptionCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketInventoryConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketInventoryConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketLifecycleCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketLifecycleCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketLifecycleCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketMetricsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketMetricsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketOwnershipControlsCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketOwnershipControlsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketPolicyCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketPolicyCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketPolicyCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketReplicationCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketReplicationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketReplicationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteBucketWebsiteCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteBucketWebsiteCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteBucketWebsiteCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteObjectCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: [() => void 0 !== output.headers[\"x-amz-delete-marker\"], () => __parseBoolean(output.headers[\"x-amz-delete-marker\"])],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteObjectsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_DeleteObjectsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.Deleted === \"\") {\n    contents.Deleted = [];\n  } else if (data[\"Deleted\"] !== undefined) {\n    contents.Deleted = de_DeletedObjects(__getArrayIfSingleItem(data[\"Deleted\"]), context);\n  }\n  if (data.Error === \"\") {\n    contents.Errors = [];\n  } else if (data[\"Error\"] !== undefined) {\n    contents.Errors = de_Errors(__getArrayIfSingleItem(data[\"Error\"]), context);\n  }\n  return contents;\n};\nconst de_DeleteObjectsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeleteObjectTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeleteObjectTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    VersionId: [, output.headers[\"x-amz-version-id\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeleteObjectTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_DeletePublicAccessBlockCommand = async (output, context) => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return de_DeletePublicAccessBlockCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_DeletePublicAccessBlockCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketAccelerateConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketAccelerateConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Status\"] !== undefined) {\n    contents.Status = __expectString(data[\"Status\"]);\n  }\n  return contents;\n};\nconst de_GetBucketAccelerateConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketAclCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketAclCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.AccessControlList === \"\") {\n    contents.Grants = [];\n  } else if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n    contents.Grants = de_Grants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = de_Owner(data[\"Owner\"], context);\n  }\n  return contents;\n};\nconst de_GetBucketAclCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketAnalyticsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data, context);\n  return contents;\n};\nconst de_GetBucketAnalyticsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketCorsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketCorsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.CORSRule === \"\") {\n    contents.CORSRules = [];\n  } else if (data[\"CORSRule\"] !== undefined) {\n    contents.CORSRules = de_CORSRules(__getArrayIfSingleItem(data[\"CORSRule\"]), context);\n  }\n  return contents;\n};\nconst de_GetBucketCorsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketEncryptionCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketEncryptionCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data, context);\n  return contents;\n};\nconst de_GetBucketEncryptionCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data, context);\n  return contents;\n};\nconst de_GetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketInventoryConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.InventoryConfiguration = de_InventoryConfiguration(data, context);\n  return contents;\n};\nconst de_GetBucketInventoryConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketLifecycleConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketLifecycleConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.Rule === \"\") {\n    contents.Rules = [];\n  } else if (data[\"Rule\"] !== undefined) {\n    contents.Rules = de_LifecycleRules(__getArrayIfSingleItem(data[\"Rule\"]), context);\n  }\n  return contents;\n};\nconst de_GetBucketLifecycleConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketLocationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketLocationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"LocationConstraint\"] !== undefined) {\n    contents.LocationConstraint = __expectString(data[\"LocationConstraint\"]);\n  }\n  return contents;\n};\nconst de_GetBucketLocationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketLoggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketLoggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"LoggingEnabled\"] !== undefined) {\n    contents.LoggingEnabled = de_LoggingEnabled(data[\"LoggingEnabled\"], context);\n  }\n  return contents;\n};\nconst de_GetBucketLoggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketMetricsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.MetricsConfiguration = de_MetricsConfiguration(data, context);\n  return contents;\n};\nconst de_GetBucketMetricsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketNotificationConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketNotificationConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"EventBridgeConfiguration\"] !== undefined) {\n    contents.EventBridgeConfiguration = de_EventBridgeConfiguration(data[\"EventBridgeConfiguration\"], context);\n  }\n  if (data.CloudFunctionConfiguration === \"\") {\n    contents.LambdaFunctionConfigurations = [];\n  } else if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n    contents.LambdaFunctionConfigurations = de_LambdaFunctionConfigurationList(__getArrayIfSingleItem(data[\"CloudFunctionConfiguration\"]), context);\n  }\n  if (data.QueueConfiguration === \"\") {\n    contents.QueueConfigurations = [];\n  } else if (data[\"QueueConfiguration\"] !== undefined) {\n    contents.QueueConfigurations = de_QueueConfigurationList(__getArrayIfSingleItem(data[\"QueueConfiguration\"]), context);\n  }\n  if (data.TopicConfiguration === \"\") {\n    contents.TopicConfigurations = [];\n  } else if (data[\"TopicConfiguration\"] !== undefined) {\n    contents.TopicConfigurations = de_TopicConfigurationList(__getArrayIfSingleItem(data[\"TopicConfiguration\"]), context);\n  }\n  return contents;\n};\nconst de_GetBucketNotificationConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketOwnershipControlsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.OwnershipControls = de_OwnershipControls(data, context);\n  return contents;\n};\nconst de_GetBucketOwnershipControlsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketPolicyCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketPolicyCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = await collectBodyString(output.body, context);\n  contents.Policy = __expectString(data);\n  return contents;\n};\nconst de_GetBucketPolicyCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketPolicyStatusCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketPolicyStatusCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.PolicyStatus = de_PolicyStatus(data, context);\n  return contents;\n};\nconst de_GetBucketPolicyStatusCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketReplicationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketReplicationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.ReplicationConfiguration = de_ReplicationConfiguration(data, context);\n  return contents;\n};\nconst de_GetBucketReplicationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketRequestPaymentCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketRequestPaymentCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Payer\"] !== undefined) {\n    contents.Payer = __expectString(data[\"Payer\"]);\n  }\n  return contents;\n};\nconst de_GetBucketRequestPaymentCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.TagSet === \"\") {\n    contents.TagSet = [];\n  } else if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n    contents.TagSet = de_TagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n  }\n  return contents;\n};\nconst de_GetBucketTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketVersioningCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketVersioningCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"MfaDelete\"] !== undefined) {\n    contents.MFADelete = __expectString(data[\"MfaDelete\"]);\n  }\n  if (data[\"Status\"] !== undefined) {\n    contents.Status = __expectString(data[\"Status\"]);\n  }\n  return contents;\n};\nconst de_GetBucketVersioningCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetBucketWebsiteCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetBucketWebsiteCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"ErrorDocument\"] !== undefined) {\n    contents.ErrorDocument = de_ErrorDocument(data[\"ErrorDocument\"], context);\n  }\n  if (data[\"IndexDocument\"] !== undefined) {\n    contents.IndexDocument = de_IndexDocument(data[\"IndexDocument\"], context);\n  }\n  if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n    contents.RedirectAllRequestsTo = de_RedirectAllRequestsTo(data[\"RedirectAllRequestsTo\"], context);\n  }\n  if (data.RoutingRules === \"\") {\n    contents.RoutingRules = [];\n  } else if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n    contents.RoutingRules = de_RoutingRules(__getArrayIfSingleItem(data[\"RoutingRules\"][\"RoutingRule\"]), context);\n  }\n  return contents;\n};\nconst de_GetBucketWebsiteCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetObjectCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: [() => void 0 !== output.headers[\"x-amz-delete-marker\"], () => __parseBoolean(output.headers[\"x-amz-delete-marker\"])],\n    AcceptRanges: [, output.headers[\"accept-ranges\"]],\n    Expiration: [, output.headers[\"x-amz-expiration\"]],\n    Restore: [, output.headers[\"x-amz-restore\"]],\n    LastModified: [() => void 0 !== output.headers[\"last-modified\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"]))],\n    ContentLength: [() => void 0 !== output.headers[\"content-length\"], () => __strictParseLong(output.headers[\"content-length\"])],\n    ETag: [, output.headers[\"etag\"]],\n    ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n    ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n    ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n    ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n    MissingMeta: [() => void 0 !== output.headers[\"x-amz-missing-meta\"], () => __strictParseInt32(output.headers[\"x-amz-missing-meta\"])],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    CacheControl: [, output.headers[\"cache-control\"]],\n    ContentDisposition: [, output.headers[\"content-disposition\"]],\n    ContentEncoding: [, output.headers[\"content-encoding\"]],\n    ContentLanguage: [, output.headers[\"content-language\"]],\n    ContentRange: [, output.headers[\"content-range\"]],\n    ContentType: [, output.headers[\"content-type\"]],\n    Expires: [() => void 0 !== output.headers[\"expires\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"expires\"]))],\n    WebsiteRedirectLocation: [, output.headers[\"x-amz-website-redirect-location\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    StorageClass: [, output.headers[\"x-amz-storage-class\"]],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    ReplicationStatus: [, output.headers[\"x-amz-replication-status\"]],\n    PartsCount: [() => void 0 !== output.headers[\"x-amz-mp-parts-count\"], () => __strictParseInt32(output.headers[\"x-amz-mp-parts-count\"])],\n    TagCount: [() => void 0 !== output.headers[\"x-amz-tagging-count\"], () => __strictParseInt32(output.headers[\"x-amz-tagging-count\"])],\n    ObjectLockMode: [, output.headers[\"x-amz-object-lock-mode\"]],\n    ObjectLockRetainUntilDate: [() => void 0 !== output.headers[\"x-amz-object-lock-retain-until-date\"], () => __expectNonNull(__parseRfc3339DateTimeWithOffset(output.headers[\"x-amz-object-lock-retain-until-date\"]))],\n    ObjectLockLegalHoldStatus: [, output.headers[\"x-amz-object-lock-legal-hold\"]],\n    Metadata: [, Object.keys(output.headers).filter(header => header.startsWith(\"x-amz-meta-\")).reduce((acc, header) => {\n      acc[header.substring(11)] = output.headers[header];\n      return acc;\n    }, {})]\n  });\n  const data = output.body;\n  context.sdkStreamMixin(data);\n  contents.Body = data;\n  return contents;\n};\nconst de_GetObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidObjectState\":\n    case \"com.amazonaws.s3#InvalidObjectState\":\n      throw await de_InvalidObjectStateRes(parsedOutput, context);\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      throw await de_NoSuchKeyRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_GetObjectAclCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetObjectAclCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.AccessControlList === \"\") {\n    contents.Grants = [];\n  } else if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n    contents.Grants = de_Grants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = de_Owner(data[\"Owner\"], context);\n  }\n  return contents;\n};\nconst de_GetObjectAclCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      throw await de_NoSuchKeyRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_GetObjectAttributesCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetObjectAttributesCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: [() => void 0 !== output.headers[\"x-amz-delete-marker\"], () => __parseBoolean(output.headers[\"x-amz-delete-marker\"])],\n    LastModified: [() => void 0 !== output.headers[\"last-modified\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"]))],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Checksum\"] !== undefined) {\n    contents.Checksum = de_Checksum(data[\"Checksum\"], context);\n  }\n  if (data[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(data[\"ETag\"]);\n  }\n  if (data[\"ObjectParts\"] !== undefined) {\n    contents.ObjectParts = de_GetObjectAttributesParts(data[\"ObjectParts\"], context);\n  }\n  if (data[\"ObjectSize\"] !== undefined) {\n    contents.ObjectSize = __strictParseLong(data[\"ObjectSize\"]);\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(data[\"StorageClass\"]);\n  }\n  return contents;\n};\nconst de_GetObjectAttributesCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      throw await de_NoSuchKeyRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_GetObjectLegalHoldCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetObjectLegalHoldCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.LegalHold = de_ObjectLockLegalHold(data, context);\n  return contents;\n};\nconst de_GetObjectLegalHoldCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetObjectLockConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetObjectLockConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data, context);\n  return contents;\n};\nconst de_GetObjectLockConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetObjectRetentionCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetObjectRetentionCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.Retention = de_ObjectLockRetention(data, context);\n  return contents;\n};\nconst de_GetObjectRetentionCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetObjectTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetObjectTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    VersionId: [, output.headers[\"x-amz-version-id\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.TagSet === \"\") {\n    contents.TagSet = [];\n  } else if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n    contents.TagSet = de_TagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n  }\n  return contents;\n};\nconst de_GetObjectTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetObjectTorrentCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetObjectTorrentCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = output.body;\n  context.sdkStreamMixin(data);\n  contents.Body = data;\n  return contents;\n};\nconst de_GetObjectTorrentCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_GetPublicAccessBlockCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_GetPublicAccessBlockCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);\n  return contents;\n};\nconst de_GetPublicAccessBlockCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_HeadBucketCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_HeadBucketCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_HeadBucketCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NotFound\":\n    case \"com.amazonaws.s3#NotFound\":\n      throw await de_NotFoundRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_HeadObjectCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_HeadObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: [() => void 0 !== output.headers[\"x-amz-delete-marker\"], () => __parseBoolean(output.headers[\"x-amz-delete-marker\"])],\n    AcceptRanges: [, output.headers[\"accept-ranges\"]],\n    Expiration: [, output.headers[\"x-amz-expiration\"]],\n    Restore: [, output.headers[\"x-amz-restore\"]],\n    ArchiveStatus: [, output.headers[\"x-amz-archive-status\"]],\n    LastModified: [() => void 0 !== output.headers[\"last-modified\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"]))],\n    ContentLength: [() => void 0 !== output.headers[\"content-length\"], () => __strictParseLong(output.headers[\"content-length\"])],\n    ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n    ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n    ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n    ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n    ETag: [, output.headers[\"etag\"]],\n    MissingMeta: [() => void 0 !== output.headers[\"x-amz-missing-meta\"], () => __strictParseInt32(output.headers[\"x-amz-missing-meta\"])],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    CacheControl: [, output.headers[\"cache-control\"]],\n    ContentDisposition: [, output.headers[\"content-disposition\"]],\n    ContentEncoding: [, output.headers[\"content-encoding\"]],\n    ContentLanguage: [, output.headers[\"content-language\"]],\n    ContentType: [, output.headers[\"content-type\"]],\n    Expires: [() => void 0 !== output.headers[\"expires\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"expires\"]))],\n    WebsiteRedirectLocation: [, output.headers[\"x-amz-website-redirect-location\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    StorageClass: [, output.headers[\"x-amz-storage-class\"]],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    ReplicationStatus: [, output.headers[\"x-amz-replication-status\"]],\n    PartsCount: [() => void 0 !== output.headers[\"x-amz-mp-parts-count\"], () => __strictParseInt32(output.headers[\"x-amz-mp-parts-count\"])],\n    ObjectLockMode: [, output.headers[\"x-amz-object-lock-mode\"]],\n    ObjectLockRetainUntilDate: [() => void 0 !== output.headers[\"x-amz-object-lock-retain-until-date\"], () => __expectNonNull(__parseRfc3339DateTimeWithOffset(output.headers[\"x-amz-object-lock-retain-until-date\"]))],\n    ObjectLockLegalHoldStatus: [, output.headers[\"x-amz-object-lock-legal-hold\"]],\n    Metadata: [, Object.keys(output.headers).filter(header => header.startsWith(\"x-amz-meta-\")).reduce((acc, header) => {\n      acc[header.substring(11)] = output.headers[header];\n      return acc;\n    }, {})]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_HeadObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NotFound\":\n    case \"com.amazonaws.s3#NotFound\":\n      throw await de_NotFoundRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_ListBucketAnalyticsConfigurationsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_ListBucketAnalyticsConfigurationsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.AnalyticsConfiguration === \"\") {\n    contents.AnalyticsConfigurationList = [];\n  } else if (data[\"AnalyticsConfiguration\"] !== undefined) {\n    contents.AnalyticsConfigurationList = de_AnalyticsConfigurationList(__getArrayIfSingleItem(data[\"AnalyticsConfiguration\"]), context);\n  }\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n  }\n  return contents;\n};\nconst de_ListBucketAnalyticsConfigurationsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_ListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_ListBucketIntelligentTieringConfigurationsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n  }\n  if (data.IntelligentTieringConfiguration === \"\") {\n    contents.IntelligentTieringConfigurationList = [];\n  } else if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n    contents.IntelligentTieringConfigurationList = de_IntelligentTieringConfigurationList(__getArrayIfSingleItem(data[\"IntelligentTieringConfiguration\"]), context);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n  }\n  return contents;\n};\nconst de_ListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_ListBucketInventoryConfigurationsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_ListBucketInventoryConfigurationsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n  }\n  if (data.InventoryConfiguration === \"\") {\n    contents.InventoryConfigurationList = [];\n  } else if (data[\"InventoryConfiguration\"] !== undefined) {\n    contents.InventoryConfigurationList = de_InventoryConfigurationList(__getArrayIfSingleItem(data[\"InventoryConfiguration\"]), context);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n  }\n  return contents;\n};\nconst de_ListBucketInventoryConfigurationsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_ListBucketMetricsConfigurationsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_ListBucketMetricsConfigurationsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data.MetricsConfiguration === \"\") {\n    contents.MetricsConfigurationList = [];\n  } else if (data[\"MetricsConfiguration\"] !== undefined) {\n    contents.MetricsConfigurationList = de_MetricsConfigurationList(__getArrayIfSingleItem(data[\"MetricsConfiguration\"]), context);\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n  }\n  return contents;\n};\nconst de_ListBucketMetricsConfigurationsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_ListBucketsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_ListBucketsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.Buckets === \"\") {\n    contents.Buckets = [];\n  } else if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n    contents.Buckets = de_Buckets(__getArrayIfSingleItem(data[\"Buckets\"][\"Bucket\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = de_Owner(data[\"Owner\"], context);\n  }\n  return contents;\n};\nconst de_ListBucketsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_ListMultipartUploadsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_ListMultipartUploadsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(data[\"Bucket\"]);\n  }\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  } else if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = de_CommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = __expectString(data[\"Delimiter\"]);\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = __expectString(data[\"EncodingType\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"KeyMarker\"] !== undefined) {\n    contents.KeyMarker = __expectString(data[\"KeyMarker\"]);\n  }\n  if (data[\"MaxUploads\"] !== undefined) {\n    contents.MaxUploads = __strictParseInt32(data[\"MaxUploads\"]);\n  }\n  if (data[\"NextKeyMarker\"] !== undefined) {\n    contents.NextKeyMarker = __expectString(data[\"NextKeyMarker\"]);\n  }\n  if (data[\"NextUploadIdMarker\"] !== undefined) {\n    contents.NextUploadIdMarker = __expectString(data[\"NextUploadIdMarker\"]);\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(data[\"Prefix\"]);\n  }\n  if (data[\"UploadIdMarker\"] !== undefined) {\n    contents.UploadIdMarker = __expectString(data[\"UploadIdMarker\"]);\n  }\n  if (data.Upload === \"\") {\n    contents.Uploads = [];\n  } else if (data[\"Upload\"] !== undefined) {\n    contents.Uploads = de_MultipartUploadList(__getArrayIfSingleItem(data[\"Upload\"]), context);\n  }\n  return contents;\n};\nconst de_ListMultipartUploadsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_ListObjectsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_ListObjectsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  } else if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = de_CommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n  }\n  if (data.Contents === \"\") {\n    contents.Contents = [];\n  } else if (data[\"Contents\"] !== undefined) {\n    contents.Contents = de_ObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = __expectString(data[\"Delimiter\"]);\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = __expectString(data[\"EncodingType\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"Marker\"] !== undefined) {\n    contents.Marker = __expectString(data[\"Marker\"]);\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = __expectString(data[\"Name\"]);\n  }\n  if (data[\"NextMarker\"] !== undefined) {\n    contents.NextMarker = __expectString(data[\"NextMarker\"]);\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(data[\"Prefix\"]);\n  }\n  return contents;\n};\nconst de_ListObjectsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      throw await de_NoSuchBucketRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_ListObjectsV2Command = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_ListObjectsV2CommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  } else if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = de_CommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n  }\n  if (data.Contents === \"\") {\n    contents.Contents = [];\n  } else if (data[\"Contents\"] !== undefined) {\n    contents.Contents = de_ObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n  }\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = __expectString(data[\"Delimiter\"]);\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = __expectString(data[\"EncodingType\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"KeyCount\"] !== undefined) {\n    contents.KeyCount = __strictParseInt32(data[\"KeyCount\"]);\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = __expectString(data[\"Name\"]);\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(data[\"Prefix\"]);\n  }\n  if (data[\"StartAfter\"] !== undefined) {\n    contents.StartAfter = __expectString(data[\"StartAfter\"]);\n  }\n  return contents;\n};\nconst de_ListObjectsV2CommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      throw await de_NoSuchBucketRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_ListObjectVersionsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_ListObjectVersionsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  } else if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = de_CommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n  }\n  if (data.DeleteMarker === \"\") {\n    contents.DeleteMarkers = [];\n  } else if (data[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarkers = de_DeleteMarkers(__getArrayIfSingleItem(data[\"DeleteMarker\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = __expectString(data[\"Delimiter\"]);\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = __expectString(data[\"EncodingType\"]);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"KeyMarker\"] !== undefined) {\n    contents.KeyMarker = __expectString(data[\"KeyMarker\"]);\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = __expectString(data[\"Name\"]);\n  }\n  if (data[\"NextKeyMarker\"] !== undefined) {\n    contents.NextKeyMarker = __expectString(data[\"NextKeyMarker\"]);\n  }\n  if (data[\"NextVersionIdMarker\"] !== undefined) {\n    contents.NextVersionIdMarker = __expectString(data[\"NextVersionIdMarker\"]);\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(data[\"Prefix\"]);\n  }\n  if (data[\"VersionIdMarker\"] !== undefined) {\n    contents.VersionIdMarker = __expectString(data[\"VersionIdMarker\"]);\n  }\n  if (data.Version === \"\") {\n    contents.Versions = [];\n  } else if (data[\"Version\"] !== undefined) {\n    contents.Versions = de_ObjectVersionList(__getArrayIfSingleItem(data[\"Version\"]), context);\n  }\n  return contents;\n};\nconst de_ListObjectVersionsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_ListPartsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_ListPartsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    AbortDate: [() => void 0 !== output.headers[\"x-amz-abort-date\"], () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"x-amz-abort-date\"]))],\n    AbortRuleId: [, output.headers[\"x-amz-abort-rule-id\"]],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(data[\"Bucket\"]);\n  }\n  if (data[\"ChecksumAlgorithm\"] !== undefined) {\n    contents.ChecksumAlgorithm = __expectString(data[\"ChecksumAlgorithm\"]);\n  }\n  if (data[\"Initiator\"] !== undefined) {\n    contents.Initiator = de_Initiator(data[\"Initiator\"], context);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = __expectString(data[\"Key\"]);\n  }\n  if (data[\"MaxParts\"] !== undefined) {\n    contents.MaxParts = __strictParseInt32(data[\"MaxParts\"]);\n  }\n  if (data[\"NextPartNumberMarker\"] !== undefined) {\n    contents.NextPartNumberMarker = __expectString(data[\"NextPartNumberMarker\"]);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = de_Owner(data[\"Owner\"], context);\n  }\n  if (data[\"PartNumberMarker\"] !== undefined) {\n    contents.PartNumberMarker = __expectString(data[\"PartNumberMarker\"]);\n  }\n  if (data.Part === \"\") {\n    contents.Parts = [];\n  } else if (data[\"Part\"] !== undefined) {\n    contents.Parts = de_Parts(__getArrayIfSingleItem(data[\"Part\"]), context);\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(data[\"StorageClass\"]);\n  }\n  if (data[\"UploadId\"] !== undefined) {\n    contents.UploadId = __expectString(data[\"UploadId\"]);\n  }\n  return contents;\n};\nconst de_ListPartsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketAccelerateConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketAccelerateConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketAccelerateConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketAclCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketAclCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketAclCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketAnalyticsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketAnalyticsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketCorsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketCorsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketCorsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketEncryptionCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketEncryptionCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketEncryptionCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketInventoryConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketInventoryConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketLifecycleConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketLifecycleConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketLifecycleConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketLoggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketLoggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketLoggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketMetricsConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketMetricsConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketNotificationConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketNotificationConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketNotificationConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketOwnershipControlsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketOwnershipControlsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketPolicyCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketPolicyCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketPolicyCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketReplicationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketReplicationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketReplicationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketRequestPaymentCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketRequestPaymentCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketRequestPaymentCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketVersioningCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketVersioningCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketVersioningCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutBucketWebsiteCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutBucketWebsiteCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutBucketWebsiteCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutObjectCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    Expiration: [, output.headers[\"x-amz-expiration\"]],\n    ETag: [, output.headers[\"etag\"]],\n    ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n    ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n    ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n    ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    VersionId: [, output.headers[\"x-amz-version-id\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutObjectAclCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutObjectAclCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutObjectAclCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      throw await de_NoSuchKeyRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_PutObjectLegalHoldCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutObjectLegalHoldCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutObjectLegalHoldCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutObjectLockConfigurationCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutObjectLockConfigurationCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutObjectLockConfigurationCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutObjectRetentionCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutObjectRetentionCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutObjectRetentionCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutObjectTaggingCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutObjectTaggingCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    VersionId: [, output.headers[\"x-amz-version-id\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutObjectTaggingCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_PutPublicAccessBlockCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_PutPublicAccessBlockCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_PutPublicAccessBlockCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_RestoreObjectCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_RestoreObjectCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    RestoreOutputPath: [, output.headers[\"x-amz-restore-output-path\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_RestoreObjectCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ObjectAlreadyInActiveTierError\":\n    case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n      throw await de_ObjectAlreadyInActiveTierErrorRes(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode\n      });\n  }\n};\nexport const de_SelectObjectContentCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_SelectObjectContentCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = output.body;\n  contents.Payload = de_SelectObjectContentEventStream(data, context);\n  return contents;\n};\nconst de_SelectObjectContentCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_UploadPartCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_UploadPartCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    ETag: [, output.headers[\"etag\"]],\n    ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n    ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n    ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n    ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_UploadPartCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_UploadPartCopyCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_UploadPartCopyCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output),\n    CopySourceVersionId: [, output.headers[\"x-amz-copy-source-version-id\"]],\n    ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n    SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n    SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n    SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n    BucketKeyEnabled: [() => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"], () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"])],\n    RequestCharged: [, output.headers[\"x-amz-request-charged\"]]\n  });\n  const data = __expectObject(await parseBody(output.body, context));\n  contents.CopyPartResult = de_CopyPartResult(data, context);\n  return contents;\n};\nconst de_UploadPartCopyCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nexport const de_WriteGetObjectResponseCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return de_WriteGetObjectResponseCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst de_WriteGetObjectResponseCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  return throwDefaultError({\n    output,\n    parsedBody,\n    errorCode\n  });\n};\nconst throwDefaultError = withBaseException(__BaseException);\nconst de_BucketAlreadyExistsRes = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new BucketAlreadyExists({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_BucketAlreadyOwnedByYouRes = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new BucketAlreadyOwnedByYou({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidObjectStateRes = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  if (data[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = __expectString(data[\"AccessTier\"]);\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(data[\"StorageClass\"]);\n  }\n  const exception = new InvalidObjectState({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_NoSuchBucketRes = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new NoSuchBucket({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_NoSuchKeyRes = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new NoSuchKey({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_NoSuchUploadRes = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new NoSuchUpload({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_NotFoundRes = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new NotFound({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ObjectAlreadyInActiveTierErrorRes = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new ObjectAlreadyInActiveTierError({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ObjectNotInActiveTierErrorRes = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  const exception = new ObjectNotInActiveTierError({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_SelectObjectContentEventStream = (output, context) => {\n  return context.eventStreamMarshaller.deserialize(output, async event => {\n    if (event[\"Records\"] != null) {\n      return {\n        Records: await de_RecordsEvent_event(event[\"Records\"], context)\n      };\n    }\n    if (event[\"Stats\"] != null) {\n      return {\n        Stats: await de_StatsEvent_event(event[\"Stats\"], context)\n      };\n    }\n    if (event[\"Progress\"] != null) {\n      return {\n        Progress: await de_ProgressEvent_event(event[\"Progress\"], context)\n      };\n    }\n    if (event[\"Cont\"] != null) {\n      return {\n        Cont: await de_ContinuationEvent_event(event[\"Cont\"], context)\n      };\n    }\n    if (event[\"End\"] != null) {\n      return {\n        End: await de_EndEvent_event(event[\"End\"], context)\n      };\n    }\n    return {\n      $unknown: output\n    };\n  });\n};\nconst de_ContinuationEvent_event = async (output, context) => {\n  const contents = {};\n  const data = await parseBody(output.body, context);\n  Object.assign(contents, de_ContinuationEvent(data, context));\n  return contents;\n};\nconst de_EndEvent_event = async (output, context) => {\n  const contents = {};\n  const data = await parseBody(output.body, context);\n  Object.assign(contents, de_EndEvent(data, context));\n  return contents;\n};\nconst de_ProgressEvent_event = async (output, context) => {\n  const contents = {};\n  const data = await parseBody(output.body, context);\n  contents.Details = de_Progress(data, context);\n  return contents;\n};\nconst de_RecordsEvent_event = async (output, context) => {\n  const contents = {};\n  contents.Payload = output.body;\n  return contents;\n};\nconst de_StatsEvent_event = async (output, context) => {\n  const contents = {};\n  const data = await parseBody(output.body, context);\n  contents.Details = de_Stats(data, context);\n  return contents;\n};\nconst se_AbortIncompleteMultipartUpload = (input, context) => {\n  const bodyNode = new __XmlNode(\"AbortIncompleteMultipartUpload\");\n  if (input.DaysAfterInitiation != null) {\n    const node = __XmlNode.of(\"DaysAfterInitiation\", String(input.DaysAfterInitiation)).withName(\"DaysAfterInitiation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_AccelerateConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"AccelerateConfiguration\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"BucketAccelerateStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_AccessControlPolicy = (input, context) => {\n  const bodyNode = new __XmlNode(\"AccessControlPolicy\");\n  if (input.Grants != null) {\n    const nodes = se_Grants(input.Grants, context);\n    const containerNode = new __XmlNode(\"AccessControlList\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Owner != null) {\n    const node = se_Owner(input.Owner, context).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_AccessControlTranslation = (input, context) => {\n  const bodyNode = new __XmlNode(\"AccessControlTranslation\");\n  if (input.Owner != null) {\n    const node = __XmlNode.of(\"OwnerOverride\", input.Owner).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_AllowedHeaders = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"AllowedHeader\", entry);\n    return node.withName(\"member\");\n  });\n};\nconst se_AllowedMethods = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"AllowedMethod\", entry);\n    return node.withName(\"member\");\n  });\n};\nconst se_AllowedOrigins = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"AllowedOrigin\", entry);\n    return node.withName(\"member\");\n  });\n};\nconst se_AnalyticsAndOperator = (input, context) => {\n  const bodyNode = new __XmlNode(\"AnalyticsAndOperator\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags != null) {\n    const nodes = se_TagSet(input.Tags, context);\n    nodes.map(node => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_AnalyticsConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"AnalyticsConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"AnalyticsId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = se_AnalyticsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClassAnalysis != null) {\n    const node = se_StorageClassAnalysis(input.StorageClassAnalysis, context).withName(\"StorageClassAnalysis\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_AnalyticsExportDestination = (input, context) => {\n  const bodyNode = new __XmlNode(\"AnalyticsExportDestination\");\n  if (input.S3BucketDestination != null) {\n    const node = se_AnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_AnalyticsFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"AnalyticsFilter\");\n  AnalyticsFilter.visit(input, {\n    Prefix: value => {\n      const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: value => {\n      const node = se_Tag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: value => {\n      const node = se_AnalyticsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name, value) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nconst se_AnalyticsS3BucketDestination = (input, context) => {\n  const bodyNode = new __XmlNode(\"AnalyticsS3BucketDestination\");\n  if (input.Format != null) {\n    const node = __XmlNode.of(\"AnalyticsS3ExportFileFormat\", input.Format).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketAccountId != null) {\n    const node = __XmlNode.of(\"AccountId\", input.BucketAccountId).withName(\"BucketAccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket != null) {\n    const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_BucketLifecycleConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"BucketLifecycleConfiguration\");\n  if (input.Rules != null) {\n    const nodes = se_LifecycleRules(input.Rules, context);\n    nodes.map(node => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_BucketLoggingStatus = (input, context) => {\n  const bodyNode = new __XmlNode(\"BucketLoggingStatus\");\n  if (input.LoggingEnabled != null) {\n    const node = se_LoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_CompletedMultipartUpload = (input, context) => {\n  const bodyNode = new __XmlNode(\"CompletedMultipartUpload\");\n  if (input.Parts != null) {\n    const nodes = se_CompletedPartList(input.Parts, context);\n    nodes.map(node => {\n      node = node.withName(\"Part\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_CompletedPart = (input, context) => {\n  const bodyNode = new __XmlNode(\"CompletedPart\");\n  if (input.ETag != null) {\n    const node = __XmlNode.of(\"ETag\", input.ETag).withName(\"ETag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ChecksumCRC32 != null) {\n    const node = __XmlNode.of(\"ChecksumCRC32\", input.ChecksumCRC32).withName(\"ChecksumCRC32\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ChecksumCRC32C != null) {\n    const node = __XmlNode.of(\"ChecksumCRC32C\", input.ChecksumCRC32C).withName(\"ChecksumCRC32C\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ChecksumSHA1 != null) {\n    const node = __XmlNode.of(\"ChecksumSHA1\", input.ChecksumSHA1).withName(\"ChecksumSHA1\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ChecksumSHA256 != null) {\n    const node = __XmlNode.of(\"ChecksumSHA256\", input.ChecksumSHA256).withName(\"ChecksumSHA256\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.PartNumber != null) {\n    const node = __XmlNode.of(\"PartNumber\", String(input.PartNumber)).withName(\"PartNumber\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_CompletedPartList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_CompletedPart(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_Condition = (input, context) => {\n  const bodyNode = new __XmlNode(\"Condition\");\n  if (input.HttpErrorCodeReturnedEquals != null) {\n    const node = __XmlNode.of(\"HttpErrorCodeReturnedEquals\", input.HttpErrorCodeReturnedEquals).withName(\"HttpErrorCodeReturnedEquals\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KeyPrefixEquals != null) {\n    const node = __XmlNode.of(\"KeyPrefixEquals\", input.KeyPrefixEquals).withName(\"KeyPrefixEquals\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_CORSConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"CORSConfiguration\");\n  if (input.CORSRules != null) {\n    const nodes = se_CORSRules(input.CORSRules, context);\n    nodes.map(node => {\n      node = node.withName(\"CORSRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_CORSRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"CORSRule\");\n  if (input.ID != null) {\n    const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AllowedHeaders != null) {\n    const nodes = se_AllowedHeaders(input.AllowedHeaders, context);\n    nodes.map(node => {\n      node = node.withName(\"AllowedHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedMethods != null) {\n    const nodes = se_AllowedMethods(input.AllowedMethods, context);\n    nodes.map(node => {\n      node = node.withName(\"AllowedMethod\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedOrigins != null) {\n    const nodes = se_AllowedOrigins(input.AllowedOrigins, context);\n    nodes.map(node => {\n      node = node.withName(\"AllowedOrigin\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.ExposeHeaders != null) {\n    const nodes = se_ExposeHeaders(input.ExposeHeaders, context);\n    nodes.map(node => {\n      node = node.withName(\"ExposeHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.MaxAgeSeconds != null) {\n    const node = __XmlNode.of(\"MaxAgeSeconds\", String(input.MaxAgeSeconds)).withName(\"MaxAgeSeconds\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_CORSRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_CORSRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_CreateBucketConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"CreateBucketConfiguration\");\n  if (input.LocationConstraint != null) {\n    const node = __XmlNode.of(\"BucketLocationConstraint\", input.LocationConstraint).withName(\"LocationConstraint\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_CSVInput = (input, context) => {\n  const bodyNode = new __XmlNode(\"CSVInput\");\n  if (input.FileHeaderInfo != null) {\n    const node = __XmlNode.of(\"FileHeaderInfo\", input.FileHeaderInfo).withName(\"FileHeaderInfo\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Comments != null) {\n    const node = __XmlNode.of(\"Comments\", input.Comments).withName(\"Comments\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter != null) {\n    const node = __XmlNode.of(\"QuoteEscapeCharacter\", input.QuoteEscapeCharacter).withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter != null) {\n    const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter != null) {\n    const node = __XmlNode.of(\"FieldDelimiter\", input.FieldDelimiter).withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter != null) {\n    const node = __XmlNode.of(\"QuoteCharacter\", input.QuoteCharacter).withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AllowQuotedRecordDelimiter != null) {\n    const node = __XmlNode.of(\"AllowQuotedRecordDelimiter\", String(input.AllowQuotedRecordDelimiter)).withName(\"AllowQuotedRecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_CSVOutput = (input, context) => {\n  const bodyNode = new __XmlNode(\"CSVOutput\");\n  if (input.QuoteFields != null) {\n    const node = __XmlNode.of(\"QuoteFields\", input.QuoteFields).withName(\"QuoteFields\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter != null) {\n    const node = __XmlNode.of(\"QuoteEscapeCharacter\", input.QuoteEscapeCharacter).withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter != null) {\n    const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter != null) {\n    const node = __XmlNode.of(\"FieldDelimiter\", input.FieldDelimiter).withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter != null) {\n    const node = __XmlNode.of(\"QuoteCharacter\", input.QuoteCharacter).withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_DefaultRetention = (input, context) => {\n  const bodyNode = new __XmlNode(\"DefaultRetention\");\n  if (input.Mode != null) {\n    const node = __XmlNode.of(\"ObjectLockRetentionMode\", input.Mode).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days != null) {\n    const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Years != null) {\n    const node = __XmlNode.of(\"Years\", String(input.Years)).withName(\"Years\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_Delete = (input, context) => {\n  const bodyNode = new __XmlNode(\"Delete\");\n  if (input.Objects != null) {\n    const nodes = se_ObjectIdentifierList(input.Objects, context);\n    nodes.map(node => {\n      node = node.withName(\"Object\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Quiet != null) {\n    const node = __XmlNode.of(\"Quiet\", String(input.Quiet)).withName(\"Quiet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_DeleteMarkerReplication = (input, context) => {\n  const bodyNode = new __XmlNode(\"DeleteMarkerReplication\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"DeleteMarkerReplicationStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_Destination = (input, context) => {\n  const bodyNode = new __XmlNode(\"Destination\");\n  if (input.Bucket != null) {\n    const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Account != null) {\n    const node = __XmlNode.of(\"AccountId\", input.Account).withName(\"Account\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass != null) {\n    const node = __XmlNode.of(\"StorageClass\", input.StorageClass).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlTranslation != null) {\n    const node = se_AccessControlTranslation(input.AccessControlTranslation, context).withName(\"AccessControlTranslation\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EncryptionConfiguration != null) {\n    const node = se_EncryptionConfiguration(input.EncryptionConfiguration, context).withName(\"EncryptionConfiguration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicationTime != null) {\n    const node = se_ReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Metrics != null) {\n    const node = se_Metrics(input.Metrics, context).withName(\"Metrics\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_Encryption = (input, context) => {\n  const bodyNode = new __XmlNode(\"Encryption\");\n  if (input.EncryptionType != null) {\n    const node = __XmlNode.of(\"ServerSideEncryption\", input.EncryptionType).withName(\"EncryptionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSKeyId != null) {\n    const node = __XmlNode.of(\"SSEKMSKeyId\", input.KMSKeyId).withName(\"KMSKeyId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSContext != null) {\n    const node = __XmlNode.of(\"KMSContext\", input.KMSContext).withName(\"KMSContext\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_EncryptionConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"EncryptionConfiguration\");\n  if (input.ReplicaKmsKeyID != null) {\n    const node = __XmlNode.of(\"ReplicaKmsKeyID\", input.ReplicaKmsKeyID).withName(\"ReplicaKmsKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ErrorDocument = (input, context) => {\n  const bodyNode = new __XmlNode(\"ErrorDocument\");\n  if (input.Key != null) {\n    const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_EventBridgeConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"EventBridgeConfiguration\");\n  return bodyNode;\n};\nconst se_EventList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"Event\", entry);\n    return node.withName(\"member\");\n  });\n};\nconst se_ExistingObjectReplication = (input, context) => {\n  const bodyNode = new __XmlNode(\"ExistingObjectReplication\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ExistingObjectReplicationStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ExposeHeaders = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"ExposeHeader\", entry);\n    return node.withName(\"member\");\n  });\n};\nconst se_FilterRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"FilterRule\");\n  if (input.Name != null) {\n    const node = __XmlNode.of(\"FilterRuleName\", input.Name).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value != null) {\n    const node = __XmlNode.of(\"FilterRuleValue\", input.Value).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_FilterRuleList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_FilterRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_GlacierJobParameters = (input, context) => {\n  const bodyNode = new __XmlNode(\"GlacierJobParameters\");\n  if (input.Tier != null) {\n    const node = __XmlNode.of(\"Tier\", input.Tier).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_Grant = (input, context) => {\n  const bodyNode = new __XmlNode(\"Grant\");\n  if (input.Grantee != null) {\n    const node = se_Grantee(input.Grantee, context).withName(\"Grantee\");\n    node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission != null) {\n    const node = __XmlNode.of(\"Permission\", input.Permission).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_Grantee = (input, context) => {\n  const bodyNode = new __XmlNode(\"Grantee\");\n  if (input.DisplayName != null) {\n    const node = __XmlNode.of(\"DisplayName\", input.DisplayName).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EmailAddress != null) {\n    const node = __XmlNode.of(\"EmailAddress\", input.EmailAddress).withName(\"EmailAddress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID != null) {\n    const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.URI != null) {\n    const node = __XmlNode.of(\"URI\", input.URI).withName(\"URI\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type != null) {\n    bodyNode.addAttribute(\"xsi:type\", input.Type);\n  }\n  return bodyNode;\n};\nconst se_Grants = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_Grant(entry, context);\n    return node.withName(\"Grant\");\n  });\n};\nconst se_IndexDocument = (input, context) => {\n  const bodyNode = new __XmlNode(\"IndexDocument\");\n  if (input.Suffix != null) {\n    const node = __XmlNode.of(\"Suffix\", input.Suffix).withName(\"Suffix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_InputSerialization = (input, context) => {\n  const bodyNode = new __XmlNode(\"InputSerialization\");\n  if (input.CSV != null) {\n    const node = se_CSVInput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CompressionType != null) {\n    const node = __XmlNode.of(\"CompressionType\", input.CompressionType).withName(\"CompressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON != null) {\n    const node = se_JSONInput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Parquet != null) {\n    const node = se_ParquetInput(input.Parquet, context).withName(\"Parquet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_IntelligentTieringAndOperator = (input, context) => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringAndOperator\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags != null) {\n    const nodes = se_TagSet(input.Tags, context);\n    nodes.map(node => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_IntelligentTieringConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"IntelligentTieringId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = se_IntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"IntelligentTieringStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tierings != null) {\n    const nodes = se_TieringList(input.Tierings, context);\n    nodes.map(node => {\n      node = node.withName(\"Tiering\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_IntelligentTieringFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringFilter\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tag != null) {\n    const node = se_Tag(input.Tag, context).withName(\"Tag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.And != null) {\n    const node = se_IntelligentTieringAndOperator(input.And, context).withName(\"And\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_InventoryConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventoryConfiguration\");\n  if (input.Destination != null) {\n    const node = se_InventoryDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IsEnabled != null) {\n    const node = __XmlNode.of(\"IsEnabled\", String(input.IsEnabled)).withName(\"IsEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = se_InventoryFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"InventoryId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IncludedObjectVersions != null) {\n    const node = __XmlNode.of(\"InventoryIncludedObjectVersions\", input.IncludedObjectVersions).withName(\"IncludedObjectVersions\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OptionalFields != null) {\n    const nodes = se_InventoryOptionalFields(input.OptionalFields, context);\n    const containerNode = new __XmlNode(\"OptionalFields\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Schedule != null) {\n    const node = se_InventorySchedule(input.Schedule, context).withName(\"Schedule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_InventoryDestination = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventoryDestination\");\n  if (input.S3BucketDestination != null) {\n    const node = se_InventoryS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_InventoryEncryption = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventoryEncryption\");\n  if (input.SSES3 != null) {\n    const node = se_SSES3(input.SSES3, context).withName(\"SSE-S3\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SSEKMS != null) {\n    const node = se_SSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_InventoryFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventoryFilter\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_InventoryOptionalFields = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = __XmlNode.of(\"InventoryOptionalField\", entry);\n    return node.withName(\"Field\");\n  });\n};\nconst se_InventoryS3BucketDestination = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventoryS3BucketDestination\");\n  if (input.AccountId != null) {\n    const node = __XmlNode.of(\"AccountId\", input.AccountId).withName(\"AccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket != null) {\n    const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Format != null) {\n    const node = __XmlNode.of(\"InventoryFormat\", input.Format).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption != null) {\n    const node = se_InventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_InventorySchedule = (input, context) => {\n  const bodyNode = new __XmlNode(\"InventorySchedule\");\n  if (input.Frequency != null) {\n    const node = __XmlNode.of(\"InventoryFrequency\", input.Frequency).withName(\"Frequency\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_JSONInput = (input, context) => {\n  const bodyNode = new __XmlNode(\"JSONInput\");\n  if (input.Type != null) {\n    const node = __XmlNode.of(\"JSONType\", input.Type).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_JSONOutput = (input, context) => {\n  const bodyNode = new __XmlNode(\"JSONOutput\");\n  if (input.RecordDelimiter != null) {\n    const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_LambdaFunctionConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"LambdaFunctionConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.LambdaFunctionArn != null) {\n    const node = __XmlNode.of(\"LambdaFunctionArn\", input.LambdaFunctionArn).withName(\"CloudFunction\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events != null) {\n    const nodes = se_EventList(input.Events, context);\n    nodes.map(node => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter != null) {\n    const node = se_NotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_LambdaFunctionConfigurationList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_LambdaFunctionConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_LifecycleExpiration = (input, context) => {\n  const bodyNode = new __XmlNode(\"LifecycleExpiration\");\n  if (input.Date != null) {\n    const node = __XmlNode.of(\"Date\", (input.Date.toISOString().split(\".\")[0] + \"Z\").toString()).withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days != null) {\n    const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpiredObjectDeleteMarker != null) {\n    const node = __XmlNode.of(\"ExpiredObjectDeleteMarker\", String(input.ExpiredObjectDeleteMarker)).withName(\"ExpiredObjectDeleteMarker\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_LifecycleRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"LifecycleRule\");\n  if (input.Expiration != null) {\n    const node = se_LifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID != null) {\n    const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = se_LifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ExpirationStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Transitions != null) {\n    const nodes = se_TransitionList(input.Transitions, context);\n    nodes.map(node => {\n      node = node.withName(\"Transition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionTransitions != null) {\n    const nodes = se_NoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n    nodes.map(node => {\n      node = node.withName(\"NoncurrentVersionTransition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionExpiration != null) {\n    const node = se_NoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\"NoncurrentVersionExpiration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AbortIncompleteMultipartUpload != null) {\n    const node = se_AbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName(\"AbortIncompleteMultipartUpload\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_LifecycleRuleAndOperator = (input, context) => {\n  const bodyNode = new __XmlNode(\"LifecycleRuleAndOperator\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags != null) {\n    const nodes = se_TagSet(input.Tags, context);\n    nodes.map(node => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.ObjectSizeGreaterThan != null) {\n    const node = __XmlNode.of(\"ObjectSizeGreaterThanBytes\", String(input.ObjectSizeGreaterThan)).withName(\"ObjectSizeGreaterThan\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ObjectSizeLessThan != null) {\n    const node = __XmlNode.of(\"ObjectSizeLessThanBytes\", String(input.ObjectSizeLessThan)).withName(\"ObjectSizeLessThan\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_LifecycleRuleFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"LifecycleRuleFilter\");\n  LifecycleRuleFilter.visit(input, {\n    Prefix: value => {\n      const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: value => {\n      const node = se_Tag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    ObjectSizeGreaterThan: value => {\n      const node = __XmlNode.of(\"ObjectSizeGreaterThanBytes\", String(value)).withName(\"ObjectSizeGreaterThan\");\n      bodyNode.addChildNode(node);\n    },\n    ObjectSizeLessThan: value => {\n      const node = __XmlNode.of(\"ObjectSizeLessThanBytes\", String(value)).withName(\"ObjectSizeLessThan\");\n      bodyNode.addChildNode(node);\n    },\n    And: value => {\n      const node = se_LifecycleRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name, value) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nconst se_LifecycleRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_LifecycleRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_LoggingEnabled = (input, context) => {\n  const bodyNode = new __XmlNode(\"LoggingEnabled\");\n  if (input.TargetBucket != null) {\n    const node = __XmlNode.of(\"TargetBucket\", input.TargetBucket).withName(\"TargetBucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TargetGrants != null) {\n    const nodes = se_TargetGrants(input.TargetGrants, context);\n    const containerNode = new __XmlNode(\"TargetGrants\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.TargetPrefix != null) {\n    const node = __XmlNode.of(\"TargetPrefix\", input.TargetPrefix).withName(\"TargetPrefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_MetadataEntry = (input, context) => {\n  const bodyNode = new __XmlNode(\"MetadataEntry\");\n  if (input.Name != null) {\n    const node = __XmlNode.of(\"MetadataKey\", input.Name).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value != null) {\n    const node = __XmlNode.of(\"MetadataValue\", input.Value).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_Metrics = (input, context) => {\n  const bodyNode = new __XmlNode(\"Metrics\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"MetricsStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EventThreshold != null) {\n    const node = se_ReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_MetricsAndOperator = (input, context) => {\n  const bodyNode = new __XmlNode(\"MetricsAndOperator\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags != null) {\n    const nodes = se_TagSet(input.Tags, context);\n    nodes.map(node => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AccessPointArn != null) {\n    const node = __XmlNode.of(\"AccessPointArn\", input.AccessPointArn).withName(\"AccessPointArn\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_MetricsConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"MetricsConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"MetricsId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = se_MetricsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_MetricsFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"MetricsFilter\");\n  MetricsFilter.visit(input, {\n    Prefix: value => {\n      const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: value => {\n      const node = se_Tag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    AccessPointArn: value => {\n      const node = __XmlNode.of(\"AccessPointArn\", value).withName(\"AccessPointArn\");\n      bodyNode.addChildNode(node);\n    },\n    And: value => {\n      const node = se_MetricsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name, value) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nconst se_NoncurrentVersionExpiration = (input, context) => {\n  const bodyNode = new __XmlNode(\"NoncurrentVersionExpiration\");\n  if (input.NoncurrentDays != null) {\n    const node = __XmlNode.of(\"Days\", String(input.NoncurrentDays)).withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.NewerNoncurrentVersions != null) {\n    const node = __XmlNode.of(\"VersionCount\", String(input.NewerNoncurrentVersions)).withName(\"NewerNoncurrentVersions\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_NoncurrentVersionTransition = (input, context) => {\n  const bodyNode = new __XmlNode(\"NoncurrentVersionTransition\");\n  if (input.NoncurrentDays != null) {\n    const node = __XmlNode.of(\"Days\", String(input.NoncurrentDays)).withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass != null) {\n    const node = __XmlNode.of(\"TransitionStorageClass\", input.StorageClass).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.NewerNoncurrentVersions != null) {\n    const node = __XmlNode.of(\"VersionCount\", String(input.NewerNoncurrentVersions)).withName(\"NewerNoncurrentVersions\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_NoncurrentVersionTransitionList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_NoncurrentVersionTransition(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_NotificationConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"NotificationConfiguration\");\n  if (input.TopicConfigurations != null) {\n    const nodes = se_TopicConfigurationList(input.TopicConfigurations, context);\n    nodes.map(node => {\n      node = node.withName(\"TopicConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.QueueConfigurations != null) {\n    const nodes = se_QueueConfigurationList(input.QueueConfigurations, context);\n    nodes.map(node => {\n      node = node.withName(\"QueueConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.LambdaFunctionConfigurations != null) {\n    const nodes = se_LambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n    nodes.map(node => {\n      node = node.withName(\"CloudFunctionConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.EventBridgeConfiguration != null) {\n    const node = se_EventBridgeConfiguration(input.EventBridgeConfiguration, context).withName(\"EventBridgeConfiguration\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_NotificationConfigurationFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"NotificationConfigurationFilter\");\n  if (input.Key != null) {\n    const node = se_S3KeyFilter(input.Key, context).withName(\"S3Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ObjectIdentifier = (input, context) => {\n  const bodyNode = new __XmlNode(\"ObjectIdentifier\");\n  if (input.Key != null) {\n    const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.VersionId != null) {\n    const node = __XmlNode.of(\"ObjectVersionId\", input.VersionId).withName(\"VersionId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ObjectIdentifierList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_ObjectIdentifier(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_ObjectLockConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"ObjectLockConfiguration\");\n  if (input.ObjectLockEnabled != null) {\n    const node = __XmlNode.of(\"ObjectLockEnabled\", input.ObjectLockEnabled).withName(\"ObjectLockEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rule != null) {\n    const node = se_ObjectLockRule(input.Rule, context).withName(\"Rule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ObjectLockLegalHold = (input, context) => {\n  const bodyNode = new __XmlNode(\"ObjectLockLegalHold\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ObjectLockLegalHoldStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ObjectLockRetention = (input, context) => {\n  const bodyNode = new __XmlNode(\"ObjectLockRetention\");\n  if (input.Mode != null) {\n    const node = __XmlNode.of(\"ObjectLockRetentionMode\", input.Mode).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RetainUntilDate != null) {\n    const node = __XmlNode.of(\"Date\", (input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()).withName(\"RetainUntilDate\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ObjectLockRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"ObjectLockRule\");\n  if (input.DefaultRetention != null) {\n    const node = se_DefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_OutputLocation = (input, context) => {\n  const bodyNode = new __XmlNode(\"OutputLocation\");\n  if (input.S3 != null) {\n    const node = se_S3Location(input.S3, context).withName(\"S3\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_OutputSerialization = (input, context) => {\n  const bodyNode = new __XmlNode(\"OutputSerialization\");\n  if (input.CSV != null) {\n    const node = se_CSVOutput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON != null) {\n    const node = se_JSONOutput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_Owner = (input, context) => {\n  const bodyNode = new __XmlNode(\"Owner\");\n  if (input.DisplayName != null) {\n    const node = __XmlNode.of(\"DisplayName\", input.DisplayName).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID != null) {\n    const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_OwnershipControls = (input, context) => {\n  const bodyNode = new __XmlNode(\"OwnershipControls\");\n  if (input.Rules != null) {\n    const nodes = se_OwnershipControlsRules(input.Rules, context);\n    nodes.map(node => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_OwnershipControlsRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"OwnershipControlsRule\");\n  if (input.ObjectOwnership != null) {\n    const node = __XmlNode.of(\"ObjectOwnership\", input.ObjectOwnership).withName(\"ObjectOwnership\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_OwnershipControlsRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_OwnershipControlsRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_ParquetInput = (input, context) => {\n  const bodyNode = new __XmlNode(\"ParquetInput\");\n  return bodyNode;\n};\nconst se_PublicAccessBlockConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"PublicAccessBlockConfiguration\");\n  if (input.BlockPublicAcls != null) {\n    const node = __XmlNode.of(\"Setting\", String(input.BlockPublicAcls)).withName(\"BlockPublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IgnorePublicAcls != null) {\n    const node = __XmlNode.of(\"Setting\", String(input.IgnorePublicAcls)).withName(\"IgnorePublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BlockPublicPolicy != null) {\n    const node = __XmlNode.of(\"Setting\", String(input.BlockPublicPolicy)).withName(\"BlockPublicPolicy\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RestrictPublicBuckets != null) {\n    const node = __XmlNode.of(\"Setting\", String(input.RestrictPublicBuckets)).withName(\"RestrictPublicBuckets\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_QueueConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"QueueConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QueueArn != null) {\n    const node = __XmlNode.of(\"QueueArn\", input.QueueArn).withName(\"Queue\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events != null) {\n    const nodes = se_EventList(input.Events, context);\n    nodes.map(node => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter != null) {\n    const node = se_NotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_QueueConfigurationList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_QueueConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_Redirect = (input, context) => {\n  const bodyNode = new __XmlNode(\"Redirect\");\n  if (input.HostName != null) {\n    const node = __XmlNode.of(\"HostName\", input.HostName).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.HttpRedirectCode != null) {\n    const node = __XmlNode.of(\"HttpRedirectCode\", input.HttpRedirectCode).withName(\"HttpRedirectCode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol != null) {\n    const node = __XmlNode.of(\"Protocol\", input.Protocol).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyPrefixWith != null) {\n    const node = __XmlNode.of(\"ReplaceKeyPrefixWith\", input.ReplaceKeyPrefixWith).withName(\"ReplaceKeyPrefixWith\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyWith != null) {\n    const node = __XmlNode.of(\"ReplaceKeyWith\", input.ReplaceKeyWith).withName(\"ReplaceKeyWith\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_RedirectAllRequestsTo = (input, context) => {\n  const bodyNode = new __XmlNode(\"RedirectAllRequestsTo\");\n  if (input.HostName != null) {\n    const node = __XmlNode.of(\"HostName\", input.HostName).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol != null) {\n    const node = __XmlNode.of(\"Protocol\", input.Protocol).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ReplicaModifications = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicaModifications\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ReplicaModificationsStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ReplicationConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationConfiguration\");\n  if (input.Role != null) {\n    const node = __XmlNode.of(\"Role\", input.Role).withName(\"Role\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rules != null) {\n    const nodes = se_ReplicationRules(input.Rules, context);\n    nodes.map(node => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_ReplicationRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationRule\");\n  if (input.ID != null) {\n    const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Priority != null) {\n    const node = __XmlNode.of(\"Priority\", String(input.Priority)).withName(\"Priority\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter != null) {\n    const node = se_ReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ReplicationRuleStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SourceSelectionCriteria != null) {\n    const node = se_SourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\"SourceSelectionCriteria\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExistingObjectReplication != null) {\n    const node = se_ExistingObjectReplication(input.ExistingObjectReplication, context).withName(\"ExistingObjectReplication\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination != null) {\n    const node = se_Destination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.DeleteMarkerReplication != null) {\n    const node = se_DeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\"DeleteMarkerReplication\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ReplicationRuleAndOperator = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationRuleAndOperator\");\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags != null) {\n    const nodes = se_TagSet(input.Tags, context);\n    nodes.map(node => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_ReplicationRuleFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationRuleFilter\");\n  ReplicationRuleFilter.visit(input, {\n    Prefix: value => {\n      const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: value => {\n      const node = se_Tag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: value => {\n      const node = se_ReplicationRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name, value) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\nconst se_ReplicationRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_ReplicationRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_ReplicationTime = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationTime\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"ReplicationTimeStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Time != null) {\n    const node = se_ReplicationTimeValue(input.Time, context).withName(\"Time\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ReplicationTimeValue = (input, context) => {\n  const bodyNode = new __XmlNode(\"ReplicationTimeValue\");\n  if (input.Minutes != null) {\n    const node = __XmlNode.of(\"Minutes\", String(input.Minutes)).withName(\"Minutes\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_RequestPaymentConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"RequestPaymentConfiguration\");\n  if (input.Payer != null) {\n    const node = __XmlNode.of(\"Payer\", input.Payer).withName(\"Payer\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_RequestProgress = (input, context) => {\n  const bodyNode = new __XmlNode(\"RequestProgress\");\n  if (input.Enabled != null) {\n    const node = __XmlNode.of(\"EnableRequestProgress\", String(input.Enabled)).withName(\"Enabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_RestoreRequest = (input, context) => {\n  const bodyNode = new __XmlNode(\"RestoreRequest\");\n  if (input.Days != null) {\n    const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.GlacierJobParameters != null) {\n    const node = se_GlacierJobParameters(input.GlacierJobParameters, context).withName(\"GlacierJobParameters\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type != null) {\n    const node = __XmlNode.of(\"RestoreRequestType\", input.Type).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tier != null) {\n    const node = __XmlNode.of(\"Tier\", input.Tier).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Description != null) {\n    const node = __XmlNode.of(\"Description\", input.Description).withName(\"Description\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SelectParameters != null) {\n    const node = se_SelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputLocation != null) {\n    const node = se_OutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_RoutingRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"RoutingRule\");\n  if (input.Condition != null) {\n    const node = se_Condition(input.Condition, context).withName(\"Condition\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Redirect != null) {\n    const node = se_Redirect(input.Redirect, context).withName(\"Redirect\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_RoutingRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_RoutingRule(entry, context);\n    return node.withName(\"RoutingRule\");\n  });\n};\nconst se_S3KeyFilter = (input, context) => {\n  const bodyNode = new __XmlNode(\"S3KeyFilter\");\n  if (input.FilterRules != null) {\n    const nodes = se_FilterRuleList(input.FilterRules, context);\n    nodes.map(node => {\n      node = node.withName(\"FilterRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_S3Location = (input, context) => {\n  const bodyNode = new __XmlNode(\"S3Location\");\n  if (input.BucketName != null) {\n    const node = __XmlNode.of(\"BucketName\", input.BucketName).withName(\"BucketName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix != null) {\n    const node = __XmlNode.of(\"LocationPrefix\", input.Prefix).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption != null) {\n    const node = se_Encryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CannedACL != null) {\n    const node = __XmlNode.of(\"ObjectCannedACL\", input.CannedACL).withName(\"CannedACL\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlList != null) {\n    const nodes = se_Grants(input.AccessControlList, context);\n    const containerNode = new __XmlNode(\"AccessControlList\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Tagging != null) {\n    const node = se_Tagging(input.Tagging, context).withName(\"Tagging\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.UserMetadata != null) {\n    const nodes = se_UserMetadata(input.UserMetadata, context);\n    const containerNode = new __XmlNode(\"UserMetadata\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.StorageClass != null) {\n    const node = __XmlNode.of(\"StorageClass\", input.StorageClass).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ScanRange = (input, context) => {\n  const bodyNode = new __XmlNode(\"ScanRange\");\n  if (input.Start != null) {\n    const node = __XmlNode.of(\"Start\", String(input.Start)).withName(\"Start\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.End != null) {\n    const node = __XmlNode.of(\"End\", String(input.End)).withName(\"End\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_SelectParameters = (input, context) => {\n  const bodyNode = new __XmlNode(\"SelectParameters\");\n  if (input.InputSerialization != null) {\n    const node = se_InputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType != null) {\n    const node = __XmlNode.of(\"ExpressionType\", input.ExpressionType).withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Expression != null) {\n    const node = __XmlNode.of(\"Expression\", input.Expression).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization != null) {\n    const node = se_OutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ServerSideEncryptionByDefault = (input, context) => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionByDefault\");\n  if (input.SSEAlgorithm != null) {\n    const node = __XmlNode.of(\"ServerSideEncryption\", input.SSEAlgorithm).withName(\"SSEAlgorithm\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSMasterKeyID != null) {\n    const node = __XmlNode.of(\"SSEKMSKeyId\", input.KMSMasterKeyID).withName(\"KMSMasterKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ServerSideEncryptionConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionConfiguration\");\n  if (input.Rules != null) {\n    const nodes = se_ServerSideEncryptionRules(input.Rules, context);\n    nodes.map(node => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\nconst se_ServerSideEncryptionRule = (input, context) => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionRule\");\n  if (input.ApplyServerSideEncryptionByDefault != null) {\n    const node = se_ServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName(\"ApplyServerSideEncryptionByDefault\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketKeyEnabled != null) {\n    const node = __XmlNode.of(\"BucketKeyEnabled\", String(input.BucketKeyEnabled)).withName(\"BucketKeyEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_ServerSideEncryptionRules = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_ServerSideEncryptionRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_SourceSelectionCriteria = (input, context) => {\n  const bodyNode = new __XmlNode(\"SourceSelectionCriteria\");\n  if (input.SseKmsEncryptedObjects != null) {\n    const node = se_SseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\"SseKmsEncryptedObjects\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicaModifications != null) {\n    const node = se_ReplicaModifications(input.ReplicaModifications, context).withName(\"ReplicaModifications\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_SSEKMS = (input, context) => {\n  const bodyNode = new __XmlNode(\"SSE-KMS\");\n  if (input.KeyId != null) {\n    const node = __XmlNode.of(\"SSEKMSKeyId\", input.KeyId).withName(\"KeyId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_SseKmsEncryptedObjects = (input, context) => {\n  const bodyNode = new __XmlNode(\"SseKmsEncryptedObjects\");\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"SseKmsEncryptedObjectsStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_SSES3 = (input, context) => {\n  const bodyNode = new __XmlNode(\"SSE-S3\");\n  return bodyNode;\n};\nconst se_StorageClassAnalysis = (input, context) => {\n  const bodyNode = new __XmlNode(\"StorageClassAnalysis\");\n  if (input.DataExport != null) {\n    const node = se_StorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_StorageClassAnalysisDataExport = (input, context) => {\n  const bodyNode = new __XmlNode(\"StorageClassAnalysisDataExport\");\n  if (input.OutputSchemaVersion != null) {\n    const node = __XmlNode.of(\"StorageClassAnalysisSchemaVersion\", input.OutputSchemaVersion).withName(\"OutputSchemaVersion\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination != null) {\n    const node = se_AnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_Tag = (input, context) => {\n  const bodyNode = new __XmlNode(\"Tag\");\n  if (input.Key != null) {\n    const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value != null) {\n    const node = __XmlNode.of(\"Value\", input.Value).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_Tagging = (input, context) => {\n  const bodyNode = new __XmlNode(\"Tagging\");\n  if (input.TagSet != null) {\n    const nodes = se_TagSet(input.TagSet, context);\n    const containerNode = new __XmlNode(\"TagSet\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  return bodyNode;\n};\nconst se_TagSet = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_Tag(entry, context);\n    return node.withName(\"Tag\");\n  });\n};\nconst se_TargetGrant = (input, context) => {\n  const bodyNode = new __XmlNode(\"TargetGrant\");\n  if (input.Grantee != null) {\n    const node = se_Grantee(input.Grantee, context).withName(\"Grantee\");\n    node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission != null) {\n    const node = __XmlNode.of(\"BucketLogsPermission\", input.Permission).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_TargetGrants = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_TargetGrant(entry, context);\n    return node.withName(\"Grant\");\n  });\n};\nconst se_Tiering = (input, context) => {\n  const bodyNode = new __XmlNode(\"Tiering\");\n  if (input.Days != null) {\n    const node = __XmlNode.of(\"IntelligentTieringDays\", String(input.Days)).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessTier != null) {\n    const node = __XmlNode.of(\"IntelligentTieringAccessTier\", input.AccessTier).withName(\"AccessTier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_TieringList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_Tiering(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_TopicConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"TopicConfiguration\");\n  if (input.Id != null) {\n    const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TopicArn != null) {\n    const node = __XmlNode.of(\"TopicArn\", input.TopicArn).withName(\"Topic\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events != null) {\n    const nodes = se_EventList(input.Events, context);\n    nodes.map(node => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter != null) {\n    const node = se_NotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_TopicConfigurationList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_TopicConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_Transition = (input, context) => {\n  const bodyNode = new __XmlNode(\"Transition\");\n  if (input.Date != null) {\n    const node = __XmlNode.of(\"Date\", (input.Date.toISOString().split(\".\")[0] + \"Z\").toString()).withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days != null) {\n    const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass != null) {\n    const node = __XmlNode.of(\"TransitionStorageClass\", input.StorageClass).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_TransitionList = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_Transition(entry, context);\n    return node.withName(\"member\");\n  });\n};\nconst se_UserMetadata = (input, context) => {\n  return input.filter(e => e != null).map(entry => {\n    const node = se_MetadataEntry(entry, context);\n    return node.withName(\"MetadataEntry\");\n  });\n};\nconst se_VersioningConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"VersioningConfiguration\");\n  if (input.MFADelete != null) {\n    const node = __XmlNode.of(\"MFADelete\", input.MFADelete).withName(\"MfaDelete\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status != null) {\n    const node = __XmlNode.of(\"BucketVersioningStatus\", input.Status).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\nconst se_WebsiteConfiguration = (input, context) => {\n  const bodyNode = new __XmlNode(\"WebsiteConfiguration\");\n  if (input.ErrorDocument != null) {\n    const node = se_ErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IndexDocument != null) {\n    const node = se_IndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RedirectAllRequestsTo != null) {\n    const node = se_RedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\"RedirectAllRequestsTo\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RoutingRules != null) {\n    const nodes = se_RoutingRules(input.RoutingRules, context);\n    const containerNode = new __XmlNode(\"RoutingRules\");\n    nodes.map(node => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  return bodyNode;\n};\nconst de_AbortIncompleteMultipartUpload = (output, context) => {\n  const contents = {};\n  if (output[\"DaysAfterInitiation\"] !== undefined) {\n    contents.DaysAfterInitiation = __strictParseInt32(output[\"DaysAfterInitiation\"]);\n  }\n  return contents;\n};\nconst de_AccessControlTranslation = (output, context) => {\n  const contents = {};\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = __expectString(output[\"Owner\"]);\n  }\n  return contents;\n};\nconst de_AllowedHeaders = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst de_AllowedMethods = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst de_AllowedOrigins = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst de_AnalyticsAndOperator = (output, context) => {\n  const contents = {};\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  } else if (output[\"Tag\"] !== undefined) {\n    contents.Tags = de_TagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nconst de_AnalyticsConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output.Filter === \"\") {} else if (output[\"Filter\"] !== undefined) {\n    contents.Filter = de_AnalyticsFilter(__expectUnion(output[\"Filter\"]), context);\n  }\n  if (output[\"StorageClassAnalysis\"] !== undefined) {\n    contents.StorageClassAnalysis = de_StorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n  }\n  return contents;\n};\nconst de_AnalyticsConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_AnalyticsConfiguration(entry, context);\n  });\n};\nconst de_AnalyticsExportDestination = (output, context) => {\n  const contents = {};\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = de_AnalyticsS3BucketDestination(output[\"S3BucketDestination\"], context);\n  }\n  return contents;\n};\nconst de_AnalyticsFilter = (output, context) => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: __expectString(output[\"Prefix\"])\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: de_Tag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: de_AnalyticsAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nconst de_AnalyticsS3BucketDestination = (output, context) => {\n  const contents = {};\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = __expectString(output[\"Format\"]);\n  }\n  if (output[\"BucketAccountId\"] !== undefined) {\n    contents.BucketAccountId = __expectString(output[\"BucketAccountId\"]);\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(output[\"Bucket\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  return contents;\n};\nconst de_Bucket = (output, context) => {\n  const contents = {};\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = __expectString(output[\"Name\"]);\n  }\n  if (output[\"CreationDate\"] !== undefined) {\n    contents.CreationDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"CreationDate\"]));\n  }\n  return contents;\n};\nconst de_Buckets = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_Bucket(entry, context);\n  });\n};\nconst de_Checksum = (output, context) => {\n  const contents = {};\n  if (output[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n  }\n  if (output[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n  }\n  if (output[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n  }\n  if (output[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n  }\n  return contents;\n};\nconst de_ChecksumAlgorithmList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst de_CommonPrefix = (output, context) => {\n  const contents = {};\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  return contents;\n};\nconst de_CommonPrefixList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_CommonPrefix(entry, context);\n  });\n};\nconst de_Condition = (output, context) => {\n  const contents = {};\n  if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n    contents.HttpErrorCodeReturnedEquals = __expectString(output[\"HttpErrorCodeReturnedEquals\"]);\n  }\n  if (output[\"KeyPrefixEquals\"] !== undefined) {\n    contents.KeyPrefixEquals = __expectString(output[\"KeyPrefixEquals\"]);\n  }\n  return contents;\n};\nconst de_ContinuationEvent = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst de_CopyObjectResult = (output, context) => {\n  const contents = {};\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(output[\"ETag\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  if (output[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n  }\n  if (output[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n  }\n  if (output[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n  }\n  if (output[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n  }\n  return contents;\n};\nconst de_CopyPartResult = (output, context) => {\n  const contents = {};\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(output[\"ETag\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  if (output[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n  }\n  if (output[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n  }\n  if (output[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n  }\n  if (output[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n  }\n  return contents;\n};\nconst de_CORSRule = (output, context) => {\n  const contents = {};\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  if (output.AllowedHeader === \"\") {\n    contents.AllowedHeaders = [];\n  } else if (output[\"AllowedHeader\"] !== undefined) {\n    contents.AllowedHeaders = de_AllowedHeaders(__getArrayIfSingleItem(output[\"AllowedHeader\"]), context);\n  }\n  if (output.AllowedMethod === \"\") {\n    contents.AllowedMethods = [];\n  } else if (output[\"AllowedMethod\"] !== undefined) {\n    contents.AllowedMethods = de_AllowedMethods(__getArrayIfSingleItem(output[\"AllowedMethod\"]), context);\n  }\n  if (output.AllowedOrigin === \"\") {\n    contents.AllowedOrigins = [];\n  } else if (output[\"AllowedOrigin\"] !== undefined) {\n    contents.AllowedOrigins = de_AllowedOrigins(__getArrayIfSingleItem(output[\"AllowedOrigin\"]), context);\n  }\n  if (output.ExposeHeader === \"\") {\n    contents.ExposeHeaders = [];\n  } else if (output[\"ExposeHeader\"] !== undefined) {\n    contents.ExposeHeaders = de_ExposeHeaders(__getArrayIfSingleItem(output[\"ExposeHeader\"]), context);\n  }\n  if (output[\"MaxAgeSeconds\"] !== undefined) {\n    contents.MaxAgeSeconds = __strictParseInt32(output[\"MaxAgeSeconds\"]);\n  }\n  return contents;\n};\nconst de_CORSRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_CORSRule(entry, context);\n  });\n};\nconst de_DefaultRetention = (output, context) => {\n  const contents = {};\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = __expectString(output[\"Mode\"]);\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = __strictParseInt32(output[\"Days\"]);\n  }\n  if (output[\"Years\"] !== undefined) {\n    contents.Years = __strictParseInt32(output[\"Years\"]);\n  }\n  return contents;\n};\nconst de_DeletedObject = (output, context) => {\n  const contents = {};\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = __expectString(output[\"VersionId\"]);\n  }\n  if (output[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarker = __parseBoolean(output[\"DeleteMarker\"]);\n  }\n  if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n    contents.DeleteMarkerVersionId = __expectString(output[\"DeleteMarkerVersionId\"]);\n  }\n  return contents;\n};\nconst de_DeletedObjects = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_DeletedObject(entry, context);\n  });\n};\nconst de_DeleteMarkerEntry = (output, context) => {\n  const contents = {};\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = de_Owner(output[\"Owner\"], context);\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = __expectString(output[\"VersionId\"]);\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = __parseBoolean(output[\"IsLatest\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  return contents;\n};\nconst de_DeleteMarkerReplication = (output, context) => {\n  const contents = {};\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  return contents;\n};\nconst de_DeleteMarkers = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_DeleteMarkerEntry(entry, context);\n  });\n};\nconst de_Destination = (output, context) => {\n  const contents = {};\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(output[\"Bucket\"]);\n  }\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = __expectString(output[\"Account\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  if (output[\"AccessControlTranslation\"] !== undefined) {\n    contents.AccessControlTranslation = de_AccessControlTranslation(output[\"AccessControlTranslation\"], context);\n  }\n  if (output[\"EncryptionConfiguration\"] !== undefined) {\n    contents.EncryptionConfiguration = de_EncryptionConfiguration(output[\"EncryptionConfiguration\"], context);\n  }\n  if (output[\"ReplicationTime\"] !== undefined) {\n    contents.ReplicationTime = de_ReplicationTime(output[\"ReplicationTime\"], context);\n  }\n  if (output[\"Metrics\"] !== undefined) {\n    contents.Metrics = de_Metrics(output[\"Metrics\"], context);\n  }\n  return contents;\n};\nconst de_EncryptionConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n    contents.ReplicaKmsKeyID = __expectString(output[\"ReplicaKmsKeyID\"]);\n  }\n  return contents;\n};\nconst de_EndEvent = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst de__Error = (output, context) => {\n  const contents = {};\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = __expectString(output[\"VersionId\"]);\n  }\n  if (output[\"Code\"] !== undefined) {\n    contents.Code = __expectString(output[\"Code\"]);\n  }\n  if (output[\"Message\"] !== undefined) {\n    contents.Message = __expectString(output[\"Message\"]);\n  }\n  return contents;\n};\nconst de_ErrorDocument = (output, context) => {\n  const contents = {};\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  return contents;\n};\nconst de_Errors = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de__Error(entry, context);\n  });\n};\nconst de_EventBridgeConfiguration = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst de_EventList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst de_ExistingObjectReplication = (output, context) => {\n  const contents = {};\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  return contents;\n};\nconst de_ExposeHeaders = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst de_FilterRule = (output, context) => {\n  const contents = {};\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = __expectString(output[\"Name\"]);\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = __expectString(output[\"Value\"]);\n  }\n  return contents;\n};\nconst de_FilterRuleList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_FilterRule(entry, context);\n  });\n};\nconst de_GetObjectAttributesParts = (output, context) => {\n  const contents = {};\n  if (output[\"PartsCount\"] !== undefined) {\n    contents.TotalPartsCount = __strictParseInt32(output[\"PartsCount\"]);\n  }\n  if (output[\"PartNumberMarker\"] !== undefined) {\n    contents.PartNumberMarker = __expectString(output[\"PartNumberMarker\"]);\n  }\n  if (output[\"NextPartNumberMarker\"] !== undefined) {\n    contents.NextPartNumberMarker = __expectString(output[\"NextPartNumberMarker\"]);\n  }\n  if (output[\"MaxParts\"] !== undefined) {\n    contents.MaxParts = __strictParseInt32(output[\"MaxParts\"]);\n  }\n  if (output[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = __parseBoolean(output[\"IsTruncated\"]);\n  }\n  if (output.Part === \"\") {\n    contents.Parts = [];\n  } else if (output[\"Part\"] !== undefined) {\n    contents.Parts = de_PartsList(__getArrayIfSingleItem(output[\"Part\"]), context);\n  }\n  return contents;\n};\nconst de_Grant = (output, context) => {\n  const contents = {};\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = de_Grantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = __expectString(output[\"Permission\"]);\n  }\n  return contents;\n};\nconst de_Grantee = (output, context) => {\n  const contents = {};\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = __expectString(output[\"DisplayName\"]);\n  }\n  if (output[\"EmailAddress\"] !== undefined) {\n    contents.EmailAddress = __expectString(output[\"EmailAddress\"]);\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  if (output[\"URI\"] !== undefined) {\n    contents.URI = __expectString(output[\"URI\"]);\n  }\n  if (output[\"xsi:type\"] !== undefined) {\n    contents.Type = __expectString(output[\"xsi:type\"]);\n  }\n  return contents;\n};\nconst de_Grants = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_Grant(entry, context);\n  });\n};\nconst de_IndexDocument = (output, context) => {\n  const contents = {};\n  if (output[\"Suffix\"] !== undefined) {\n    contents.Suffix = __expectString(output[\"Suffix\"]);\n  }\n  return contents;\n};\nconst de_Initiator = (output, context) => {\n  const contents = {};\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = __expectString(output[\"DisplayName\"]);\n  }\n  return contents;\n};\nconst de_IntelligentTieringAndOperator = (output, context) => {\n  const contents = {};\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  } else if (output[\"Tag\"] !== undefined) {\n    contents.Tags = de_TagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nconst de_IntelligentTieringConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = de_IntelligentTieringFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  if (output.Tiering === \"\") {\n    contents.Tierings = [];\n  } else if (output[\"Tiering\"] !== undefined) {\n    contents.Tierings = de_TieringList(__getArrayIfSingleItem(output[\"Tiering\"]), context);\n  }\n  return contents;\n};\nconst de_IntelligentTieringConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_IntelligentTieringConfiguration(entry, context);\n  });\n};\nconst de_IntelligentTieringFilter = (output, context) => {\n  const contents = {};\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tag = de_Tag(output[\"Tag\"], context);\n  }\n  if (output[\"And\"] !== undefined) {\n    contents.And = de_IntelligentTieringAndOperator(output[\"And\"], context);\n  }\n  return contents;\n};\nconst de_InventoryConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = de_InventoryDestination(output[\"Destination\"], context);\n  }\n  if (output[\"IsEnabled\"] !== undefined) {\n    contents.IsEnabled = __parseBoolean(output[\"IsEnabled\"]);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = de_InventoryFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output[\"IncludedObjectVersions\"] !== undefined) {\n    contents.IncludedObjectVersions = __expectString(output[\"IncludedObjectVersions\"]);\n  }\n  if (output.OptionalFields === \"\") {\n    contents.OptionalFields = [];\n  } else if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n    contents.OptionalFields = de_InventoryOptionalFields(__getArrayIfSingleItem(output[\"OptionalFields\"][\"Field\"]), context);\n  }\n  if (output[\"Schedule\"] !== undefined) {\n    contents.Schedule = de_InventorySchedule(output[\"Schedule\"], context);\n  }\n  return contents;\n};\nconst de_InventoryConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_InventoryConfiguration(entry, context);\n  });\n};\nconst de_InventoryDestination = (output, context) => {\n  const contents = {};\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = de_InventoryS3BucketDestination(output[\"S3BucketDestination\"], context);\n  }\n  return contents;\n};\nconst de_InventoryEncryption = (output, context) => {\n  const contents = {};\n  if (output[\"SSE-S3\"] !== undefined) {\n    contents.SSES3 = de_SSES3(output[\"SSE-S3\"], context);\n  }\n  if (output[\"SSE-KMS\"] !== undefined) {\n    contents.SSEKMS = de_SSEKMS(output[\"SSE-KMS\"], context);\n  }\n  return contents;\n};\nconst de_InventoryFilter = (output, context) => {\n  const contents = {};\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  return contents;\n};\nconst de_InventoryOptionalFields = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return __expectString(entry);\n  });\n};\nconst de_InventoryS3BucketDestination = (output, context) => {\n  const contents = {};\n  if (output[\"AccountId\"] !== undefined) {\n    contents.AccountId = __expectString(output[\"AccountId\"]);\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = __expectString(output[\"Bucket\"]);\n  }\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = __expectString(output[\"Format\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output[\"Encryption\"] !== undefined) {\n    contents.Encryption = de_InventoryEncryption(output[\"Encryption\"], context);\n  }\n  return contents;\n};\nconst de_InventorySchedule = (output, context) => {\n  const contents = {};\n  if (output[\"Frequency\"] !== undefined) {\n    contents.Frequency = __expectString(output[\"Frequency\"]);\n  }\n  return contents;\n};\nconst de_LambdaFunctionConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output[\"CloudFunction\"] !== undefined) {\n    contents.LambdaFunctionArn = __expectString(output[\"CloudFunction\"]);\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  } else if (output[\"Event\"] !== undefined) {\n    contents.Events = de_EventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = de_NotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\nconst de_LambdaFunctionConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_LambdaFunctionConfiguration(entry, context);\n  });\n};\nconst de_LifecycleExpiration = (output, context) => {\n  const contents = {};\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Date\"]));\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = __strictParseInt32(output[\"Days\"]);\n  }\n  if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n    contents.ExpiredObjectDeleteMarker = __parseBoolean(output[\"ExpiredObjectDeleteMarker\"]);\n  }\n  return contents;\n};\nconst de_LifecycleRule = (output, context) => {\n  const contents = {};\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = de_LifecycleExpiration(output[\"Expiration\"], context);\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Filter === \"\") {} else if (output[\"Filter\"] !== undefined) {\n    contents.Filter = de_LifecycleRuleFilter(__expectUnion(output[\"Filter\"]), context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  if (output.Transition === \"\") {\n    contents.Transitions = [];\n  } else if (output[\"Transition\"] !== undefined) {\n    contents.Transitions = de_TransitionList(__getArrayIfSingleItem(output[\"Transition\"]), context);\n  }\n  if (output.NoncurrentVersionTransition === \"\") {\n    contents.NoncurrentVersionTransitions = [];\n  } else if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n    contents.NoncurrentVersionTransitions = de_NoncurrentVersionTransitionList(__getArrayIfSingleItem(output[\"NoncurrentVersionTransition\"]), context);\n  }\n  if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n    contents.NoncurrentVersionExpiration = de_NoncurrentVersionExpiration(output[\"NoncurrentVersionExpiration\"], context);\n  }\n  if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n    contents.AbortIncompleteMultipartUpload = de_AbortIncompleteMultipartUpload(output[\"AbortIncompleteMultipartUpload\"], context);\n  }\n  return contents;\n};\nconst de_LifecycleRuleAndOperator = (output, context) => {\n  const contents = {};\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  } else if (output[\"Tag\"] !== undefined) {\n    contents.Tags = de_TagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  if (output[\"ObjectSizeGreaterThan\"] !== undefined) {\n    contents.ObjectSizeGreaterThan = __strictParseLong(output[\"ObjectSizeGreaterThan\"]);\n  }\n  if (output[\"ObjectSizeLessThan\"] !== undefined) {\n    contents.ObjectSizeLessThan = __strictParseLong(output[\"ObjectSizeLessThan\"]);\n  }\n  return contents;\n};\nconst de_LifecycleRuleFilter = (output, context) => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: __expectString(output[\"Prefix\"])\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: de_Tag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"ObjectSizeGreaterThan\"] !== undefined) {\n    return {\n      ObjectSizeGreaterThan: __strictParseLong(output[\"ObjectSizeGreaterThan\"])\n    };\n  }\n  if (output[\"ObjectSizeLessThan\"] !== undefined) {\n    return {\n      ObjectSizeLessThan: __strictParseLong(output[\"ObjectSizeLessThan\"])\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: de_LifecycleRuleAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nconst de_LifecycleRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_LifecycleRule(entry, context);\n  });\n};\nconst de_LoggingEnabled = (output, context) => {\n  const contents = {};\n  if (output[\"TargetBucket\"] !== undefined) {\n    contents.TargetBucket = __expectString(output[\"TargetBucket\"]);\n  }\n  if (output.TargetGrants === \"\") {\n    contents.TargetGrants = [];\n  } else if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n    contents.TargetGrants = de_TargetGrants(__getArrayIfSingleItem(output[\"TargetGrants\"][\"Grant\"]), context);\n  }\n  if (output[\"TargetPrefix\"] !== undefined) {\n    contents.TargetPrefix = __expectString(output[\"TargetPrefix\"]);\n  }\n  return contents;\n};\nconst de_Metrics = (output, context) => {\n  const contents = {};\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  if (output[\"EventThreshold\"] !== undefined) {\n    contents.EventThreshold = de_ReplicationTimeValue(output[\"EventThreshold\"], context);\n  }\n  return contents;\n};\nconst de_MetricsAndOperator = (output, context) => {\n  const contents = {};\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  } else if (output[\"Tag\"] !== undefined) {\n    contents.Tags = de_TagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  if (output[\"AccessPointArn\"] !== undefined) {\n    contents.AccessPointArn = __expectString(output[\"AccessPointArn\"]);\n  }\n  return contents;\n};\nconst de_MetricsConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output.Filter === \"\") {} else if (output[\"Filter\"] !== undefined) {\n    contents.Filter = de_MetricsFilter(__expectUnion(output[\"Filter\"]), context);\n  }\n  return contents;\n};\nconst de_MetricsConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_MetricsConfiguration(entry, context);\n  });\n};\nconst de_MetricsFilter = (output, context) => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: __expectString(output[\"Prefix\"])\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: de_Tag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"AccessPointArn\"] !== undefined) {\n    return {\n      AccessPointArn: __expectString(output[\"AccessPointArn\"])\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: de_MetricsAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nconst de_MultipartUpload = (output, context) => {\n  const contents = {};\n  if (output[\"UploadId\"] !== undefined) {\n    contents.UploadId = __expectString(output[\"UploadId\"]);\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"Initiated\"] !== undefined) {\n    contents.Initiated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Initiated\"]));\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = de_Owner(output[\"Owner\"], context);\n  }\n  if (output[\"Initiator\"] !== undefined) {\n    contents.Initiator = de_Initiator(output[\"Initiator\"], context);\n  }\n  if (output[\"ChecksumAlgorithm\"] !== undefined) {\n    contents.ChecksumAlgorithm = __expectString(output[\"ChecksumAlgorithm\"]);\n  }\n  return contents;\n};\nconst de_MultipartUploadList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_MultipartUpload(entry, context);\n  });\n};\nconst de_NoncurrentVersionExpiration = (output, context) => {\n  const contents = {};\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = __strictParseInt32(output[\"NoncurrentDays\"]);\n  }\n  if (output[\"NewerNoncurrentVersions\"] !== undefined) {\n    contents.NewerNoncurrentVersions = __strictParseInt32(output[\"NewerNoncurrentVersions\"]);\n  }\n  return contents;\n};\nconst de_NoncurrentVersionTransition = (output, context) => {\n  const contents = {};\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = __strictParseInt32(output[\"NoncurrentDays\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  if (output[\"NewerNoncurrentVersions\"] !== undefined) {\n    contents.NewerNoncurrentVersions = __strictParseInt32(output[\"NewerNoncurrentVersions\"]);\n  }\n  return contents;\n};\nconst de_NoncurrentVersionTransitionList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_NoncurrentVersionTransition(entry, context);\n  });\n};\nconst de_NotificationConfigurationFilter = (output, context) => {\n  const contents = {};\n  if (output[\"S3Key\"] !== undefined) {\n    contents.Key = de_S3KeyFilter(output[\"S3Key\"], context);\n  }\n  return contents;\n};\nconst de__Object = (output, context) => {\n  const contents = {};\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(output[\"ETag\"]);\n  }\n  if (output.ChecksumAlgorithm === \"\") {\n    contents.ChecksumAlgorithm = [];\n  } else if (output[\"ChecksumAlgorithm\"] !== undefined) {\n    contents.ChecksumAlgorithm = de_ChecksumAlgorithmList(__getArrayIfSingleItem(output[\"ChecksumAlgorithm\"]), context);\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = __strictParseLong(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = de_Owner(output[\"Owner\"], context);\n  }\n  if (output[\"RestoreStatus\"] !== undefined) {\n    contents.RestoreStatus = de_RestoreStatus(output[\"RestoreStatus\"], context);\n  }\n  return contents;\n};\nconst de_ObjectList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de__Object(entry, context);\n  });\n};\nconst de_ObjectLockConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"ObjectLockEnabled\"] !== undefined) {\n    contents.ObjectLockEnabled = __expectString(output[\"ObjectLockEnabled\"]);\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rule = de_ObjectLockRule(output[\"Rule\"], context);\n  }\n  return contents;\n};\nconst de_ObjectLockLegalHold = (output, context) => {\n  const contents = {};\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  return contents;\n};\nconst de_ObjectLockRetention = (output, context) => {\n  const contents = {};\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = __expectString(output[\"Mode\"]);\n  }\n  if (output[\"RetainUntilDate\"] !== undefined) {\n    contents.RetainUntilDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"RetainUntilDate\"]));\n  }\n  return contents;\n};\nconst de_ObjectLockRule = (output, context) => {\n  const contents = {};\n  if (output[\"DefaultRetention\"] !== undefined) {\n    contents.DefaultRetention = de_DefaultRetention(output[\"DefaultRetention\"], context);\n  }\n  return contents;\n};\nconst de_ObjectPart = (output, context) => {\n  const contents = {};\n  if (output[\"PartNumber\"] !== undefined) {\n    contents.PartNumber = __strictParseInt32(output[\"PartNumber\"]);\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = __strictParseLong(output[\"Size\"]);\n  }\n  if (output[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n  }\n  if (output[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n  }\n  if (output[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n  }\n  if (output[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n  }\n  return contents;\n};\nconst de_ObjectVersion = (output, context) => {\n  const contents = {};\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(output[\"ETag\"]);\n  }\n  if (output.ChecksumAlgorithm === \"\") {\n    contents.ChecksumAlgorithm = [];\n  } else if (output[\"ChecksumAlgorithm\"] !== undefined) {\n    contents.ChecksumAlgorithm = de_ChecksumAlgorithmList(__getArrayIfSingleItem(output[\"ChecksumAlgorithm\"]), context);\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = __strictParseLong(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = __expectString(output[\"VersionId\"]);\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = __parseBoolean(output[\"IsLatest\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = de_Owner(output[\"Owner\"], context);\n  }\n  if (output[\"RestoreStatus\"] !== undefined) {\n    contents.RestoreStatus = de_RestoreStatus(output[\"RestoreStatus\"], context);\n  }\n  return contents;\n};\nconst de_ObjectVersionList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_ObjectVersion(entry, context);\n  });\n};\nconst de_Owner = (output, context) => {\n  const contents = {};\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = __expectString(output[\"DisplayName\"]);\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  return contents;\n};\nconst de_OwnershipControls = (output, context) => {\n  const contents = {};\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  } else if (output[\"Rule\"] !== undefined) {\n    contents.Rules = de_OwnershipControlsRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\nconst de_OwnershipControlsRule = (output, context) => {\n  const contents = {};\n  if (output[\"ObjectOwnership\"] !== undefined) {\n    contents.ObjectOwnership = __expectString(output[\"ObjectOwnership\"]);\n  }\n  return contents;\n};\nconst de_OwnershipControlsRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_OwnershipControlsRule(entry, context);\n  });\n};\nconst de_Part = (output, context) => {\n  const contents = {};\n  if (output[\"PartNumber\"] !== undefined) {\n    contents.PartNumber = __strictParseInt32(output[\"PartNumber\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = __expectString(output[\"ETag\"]);\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = __strictParseLong(output[\"Size\"]);\n  }\n  if (output[\"ChecksumCRC32\"] !== undefined) {\n    contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n  }\n  if (output[\"ChecksumCRC32C\"] !== undefined) {\n    contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n  }\n  if (output[\"ChecksumSHA1\"] !== undefined) {\n    contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n  }\n  if (output[\"ChecksumSHA256\"] !== undefined) {\n    contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n  }\n  return contents;\n};\nconst de_Parts = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_Part(entry, context);\n  });\n};\nconst de_PartsList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_ObjectPart(entry, context);\n  });\n};\nconst de_PolicyStatus = (output, context) => {\n  const contents = {};\n  if (output[\"IsPublic\"] !== undefined) {\n    contents.IsPublic = __parseBoolean(output[\"IsPublic\"]);\n  }\n  return contents;\n};\nconst de_Progress = (output, context) => {\n  const contents = {};\n  if (output[\"BytesScanned\"] !== undefined) {\n    contents.BytesScanned = __strictParseLong(output[\"BytesScanned\"]);\n  }\n  if (output[\"BytesProcessed\"] !== undefined) {\n    contents.BytesProcessed = __strictParseLong(output[\"BytesProcessed\"]);\n  }\n  if (output[\"BytesReturned\"] !== undefined) {\n    contents.BytesReturned = __strictParseLong(output[\"BytesReturned\"]);\n  }\n  return contents;\n};\nconst de_PublicAccessBlockConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"BlockPublicAcls\"] !== undefined) {\n    contents.BlockPublicAcls = __parseBoolean(output[\"BlockPublicAcls\"]);\n  }\n  if (output[\"IgnorePublicAcls\"] !== undefined) {\n    contents.IgnorePublicAcls = __parseBoolean(output[\"IgnorePublicAcls\"]);\n  }\n  if (output[\"BlockPublicPolicy\"] !== undefined) {\n    contents.BlockPublicPolicy = __parseBoolean(output[\"BlockPublicPolicy\"]);\n  }\n  if (output[\"RestrictPublicBuckets\"] !== undefined) {\n    contents.RestrictPublicBuckets = __parseBoolean(output[\"RestrictPublicBuckets\"]);\n  }\n  return contents;\n};\nconst de_QueueConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output[\"Queue\"] !== undefined) {\n    contents.QueueArn = __expectString(output[\"Queue\"]);\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  } else if (output[\"Event\"] !== undefined) {\n    contents.Events = de_EventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = de_NotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\nconst de_QueueConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_QueueConfiguration(entry, context);\n  });\n};\nconst de_Redirect = (output, context) => {\n  const contents = {};\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = __expectString(output[\"HostName\"]);\n  }\n  if (output[\"HttpRedirectCode\"] !== undefined) {\n    contents.HttpRedirectCode = __expectString(output[\"HttpRedirectCode\"]);\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = __expectString(output[\"Protocol\"]);\n  }\n  if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n    contents.ReplaceKeyPrefixWith = __expectString(output[\"ReplaceKeyPrefixWith\"]);\n  }\n  if (output[\"ReplaceKeyWith\"] !== undefined) {\n    contents.ReplaceKeyWith = __expectString(output[\"ReplaceKeyWith\"]);\n  }\n  return contents;\n};\nconst de_RedirectAllRequestsTo = (output, context) => {\n  const contents = {};\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = __expectString(output[\"HostName\"]);\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = __expectString(output[\"Protocol\"]);\n  }\n  return contents;\n};\nconst de_ReplicaModifications = (output, context) => {\n  const contents = {};\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  return contents;\n};\nconst de_ReplicationConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"Role\"] !== undefined) {\n    contents.Role = __expectString(output[\"Role\"]);\n  }\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  } else if (output[\"Rule\"] !== undefined) {\n    contents.Rules = de_ReplicationRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\nconst de_ReplicationRule = (output, context) => {\n  const contents = {};\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = __expectString(output[\"ID\"]);\n  }\n  if (output[\"Priority\"] !== undefined) {\n    contents.Priority = __strictParseInt32(output[\"Priority\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Filter === \"\") {} else if (output[\"Filter\"] !== undefined) {\n    contents.Filter = de_ReplicationRuleFilter(__expectUnion(output[\"Filter\"]), context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  if (output[\"SourceSelectionCriteria\"] !== undefined) {\n    contents.SourceSelectionCriteria = de_SourceSelectionCriteria(output[\"SourceSelectionCriteria\"], context);\n  }\n  if (output[\"ExistingObjectReplication\"] !== undefined) {\n    contents.ExistingObjectReplication = de_ExistingObjectReplication(output[\"ExistingObjectReplication\"], context);\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = de_Destination(output[\"Destination\"], context);\n  }\n  if (output[\"DeleteMarkerReplication\"] !== undefined) {\n    contents.DeleteMarkerReplication = de_DeleteMarkerReplication(output[\"DeleteMarkerReplication\"], context);\n  }\n  return contents;\n};\nconst de_ReplicationRuleAndOperator = (output, context) => {\n  const contents = {};\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = __expectString(output[\"Prefix\"]);\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  } else if (output[\"Tag\"] !== undefined) {\n    contents.Tags = de_TagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\nconst de_ReplicationRuleFilter = (output, context) => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: __expectString(output[\"Prefix\"])\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: de_Tag(output[\"Tag\"], context)\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: de_ReplicationRuleAndOperator(output[\"And\"], context)\n    };\n  }\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\nconst de_ReplicationRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_ReplicationRule(entry, context);\n  });\n};\nconst de_ReplicationTime = (output, context) => {\n  const contents = {};\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  if (output[\"Time\"] !== undefined) {\n    contents.Time = de_ReplicationTimeValue(output[\"Time\"], context);\n  }\n  return contents;\n};\nconst de_ReplicationTimeValue = (output, context) => {\n  const contents = {};\n  if (output[\"Minutes\"] !== undefined) {\n    contents.Minutes = __strictParseInt32(output[\"Minutes\"]);\n  }\n  return contents;\n};\nconst de_RestoreStatus = (output, context) => {\n  const contents = {};\n  if (output[\"IsRestoreInProgress\"] !== undefined) {\n    contents.IsRestoreInProgress = __parseBoolean(output[\"IsRestoreInProgress\"]);\n  }\n  if (output[\"RestoreExpiryDate\"] !== undefined) {\n    contents.RestoreExpiryDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"RestoreExpiryDate\"]));\n  }\n  return contents;\n};\nconst de_RoutingRule = (output, context) => {\n  const contents = {};\n  if (output[\"Condition\"] !== undefined) {\n    contents.Condition = de_Condition(output[\"Condition\"], context);\n  }\n  if (output[\"Redirect\"] !== undefined) {\n    contents.Redirect = de_Redirect(output[\"Redirect\"], context);\n  }\n  return contents;\n};\nconst de_RoutingRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_RoutingRule(entry, context);\n  });\n};\nconst de_S3KeyFilter = (output, context) => {\n  const contents = {};\n  if (output.FilterRule === \"\") {\n    contents.FilterRules = [];\n  } else if (output[\"FilterRule\"] !== undefined) {\n    contents.FilterRules = de_FilterRuleList(__getArrayIfSingleItem(output[\"FilterRule\"]), context);\n  }\n  return contents;\n};\nconst de_ServerSideEncryptionByDefault = (output, context) => {\n  const contents = {};\n  if (output[\"SSEAlgorithm\"] !== undefined) {\n    contents.SSEAlgorithm = __expectString(output[\"SSEAlgorithm\"]);\n  }\n  if (output[\"KMSMasterKeyID\"] !== undefined) {\n    contents.KMSMasterKeyID = __expectString(output[\"KMSMasterKeyID\"]);\n  }\n  return contents;\n};\nconst de_ServerSideEncryptionConfiguration = (output, context) => {\n  const contents = {};\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  } else if (output[\"Rule\"] !== undefined) {\n    contents.Rules = de_ServerSideEncryptionRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\nconst de_ServerSideEncryptionRule = (output, context) => {\n  const contents = {};\n  if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n    contents.ApplyServerSideEncryptionByDefault = de_ServerSideEncryptionByDefault(output[\"ApplyServerSideEncryptionByDefault\"], context);\n  }\n  if (output[\"BucketKeyEnabled\"] !== undefined) {\n    contents.BucketKeyEnabled = __parseBoolean(output[\"BucketKeyEnabled\"]);\n  }\n  return contents;\n};\nconst de_ServerSideEncryptionRules = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_ServerSideEncryptionRule(entry, context);\n  });\n};\nconst de_SourceSelectionCriteria = (output, context) => {\n  const contents = {};\n  if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n    contents.SseKmsEncryptedObjects = de_SseKmsEncryptedObjects(output[\"SseKmsEncryptedObjects\"], context);\n  }\n  if (output[\"ReplicaModifications\"] !== undefined) {\n    contents.ReplicaModifications = de_ReplicaModifications(output[\"ReplicaModifications\"], context);\n  }\n  return contents;\n};\nconst de_SSEKMS = (output, context) => {\n  const contents = {};\n  if (output[\"KeyId\"] !== undefined) {\n    contents.KeyId = __expectString(output[\"KeyId\"]);\n  }\n  return contents;\n};\nconst de_SseKmsEncryptedObjects = (output, context) => {\n  const contents = {};\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = __expectString(output[\"Status\"]);\n  }\n  return contents;\n};\nconst de_SSES3 = (output, context) => {\n  const contents = {};\n  return contents;\n};\nconst de_Stats = (output, context) => {\n  const contents = {};\n  if (output[\"BytesScanned\"] !== undefined) {\n    contents.BytesScanned = __strictParseLong(output[\"BytesScanned\"]);\n  }\n  if (output[\"BytesProcessed\"] !== undefined) {\n    contents.BytesProcessed = __strictParseLong(output[\"BytesProcessed\"]);\n  }\n  if (output[\"BytesReturned\"] !== undefined) {\n    contents.BytesReturned = __strictParseLong(output[\"BytesReturned\"]);\n  }\n  return contents;\n};\nconst de_StorageClassAnalysis = (output, context) => {\n  const contents = {};\n  if (output[\"DataExport\"] !== undefined) {\n    contents.DataExport = de_StorageClassAnalysisDataExport(output[\"DataExport\"], context);\n  }\n  return contents;\n};\nconst de_StorageClassAnalysisDataExport = (output, context) => {\n  const contents = {};\n  if (output[\"OutputSchemaVersion\"] !== undefined) {\n    contents.OutputSchemaVersion = __expectString(output[\"OutputSchemaVersion\"]);\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = de_AnalyticsExportDestination(output[\"Destination\"], context);\n  }\n  return contents;\n};\nconst de_Tag = (output, context) => {\n  const contents = {};\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = __expectString(output[\"Key\"]);\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = __expectString(output[\"Value\"]);\n  }\n  return contents;\n};\nconst de_TagSet = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_Tag(entry, context);\n  });\n};\nconst de_TargetGrant = (output, context) => {\n  const contents = {};\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = de_Grantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = __expectString(output[\"Permission\"]);\n  }\n  return contents;\n};\nconst de_TargetGrants = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_TargetGrant(entry, context);\n  });\n};\nconst de_Tiering = (output, context) => {\n  const contents = {};\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = __strictParseInt32(output[\"Days\"]);\n  }\n  if (output[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = __expectString(output[\"AccessTier\"]);\n  }\n  return contents;\n};\nconst de_TieringList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_Tiering(entry, context);\n  });\n};\nconst de_TopicConfiguration = (output, context) => {\n  const contents = {};\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = __expectString(output[\"Id\"]);\n  }\n  if (output[\"Topic\"] !== undefined) {\n    contents.TopicArn = __expectString(output[\"Topic\"]);\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  } else if (output[\"Event\"] !== undefined) {\n    contents.Events = de_EventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = de_NotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\nconst de_TopicConfigurationList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_TopicConfiguration(entry, context);\n  });\n};\nconst de_Transition = (output, context) => {\n  const contents = {};\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Date\"]));\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = __strictParseInt32(output[\"Days\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = __expectString(output[\"StorageClass\"]);\n  }\n  return contents;\n};\nconst de_TransitionList = (output, context) => {\n  return (output || []).filter(e => e != null).map(entry => {\n    return de_Transition(entry, context);\n  });\n};\nconst deserializeMetadata = output => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"]\n});\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));\nconst isSerializableHeaderValue = value => value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {\n  if (encoded.length) {\n    const parser = new XMLParser({\n      attributeNamePrefix: \"\",\n      htmlEntities: true,\n      ignoreAttributes: false,\n      ignoreDeclaration: true,\n      parseTagValue: false,\n      trimValues: false,\n      tagValueProcessor: (_, val) => val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined\n    });\n    parser.addEntity(\"#xD\", \"\\r\");\n    parser.addEntity(\"#10\", \"\\n\");\n    const parsedObj = parser.parse(encoded);\n    const textNodeName = \"#text\";\n    const key = Object.keys(parsedObj)[0];\n    const parsedObjToReturn = parsedObj[key];\n    if (parsedObjToReturn[textNodeName]) {\n      parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n      delete parsedObjToReturn[textNodeName];\n    }\n    return __getValueFromTextNode(parsedObjToReturn);\n  }\n  return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n  const value = await parseBody(errorBody, context);\n  if (value.Error) {\n    value.Error.message = value.Error.message ?? value.Error.Message;\n  }\n  return value;\n};\nconst loadRestXmlErrorCode = (output, data) => {\n  if (data?.Code !== undefined) {\n    return data.Code;\n  }\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n};","map":{"version":3,"names":["XmlNode","__XmlNode","XmlText","__XmlText","HttpRequest","__HttpRequest","isValidHostname","__isValidHostname","collectBody","dateToUtcString","__dateToUtcString","decorateServiceException","__decorateServiceException","expectNonNull","__expectNonNull","expectObject","__expectObject","expectString","__expectString","expectUnion","__expectUnion","getArrayIfSingleItem","__getArrayIfSingleItem","getValueFromTextNode","__getValueFromTextNode","map","parseBoolean","__parseBoolean","parseRfc3339DateTimeWithOffset","__parseRfc3339DateTimeWithOffset","parseRfc7231DateTime","__parseRfc7231DateTime","resolvedPath","__resolvedPath","strictParseInt32","__strictParseInt32","strictParseLong","__strictParseLong","withBaseException","XMLParser","AnalyticsFilter","BucketAlreadyExists","BucketAlreadyOwnedByYou","InvalidObjectState","LifecycleRuleFilter","MetricsFilter","NoSuchBucket","NoSuchKey","NoSuchUpload","NotFound","ObjectNotInActiveTierError","ReplicationRuleFilter","ObjectAlreadyInActiveTierError","S3ServiceException","__BaseException","se_AbortMultipartUploadCommand","input","context","hostname","protocol","port","path","basePath","endpoint","headers","isSerializableHeaderValue","RequestPayer","ExpectedBucketOwner","endsWith","slice","Bucket","Key","query","uploadId","UploadId","body","method","se_CompleteMultipartUploadCommand","ChecksumCRC32","ChecksumCRC32C","ChecksumSHA1","ChecksumSHA256","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","MultipartUpload","undefined","se_CompletedMultipartUpload","contents","withName","addAttribute","toString","se_CopyObjectCommand","ACL","CacheControl","ChecksumAlgorithm","ContentDisposition","ContentEncoding","ContentLanguage","ContentType","CopySource","CopySourceIfMatch","CopySourceIfModifiedSince","CopySourceIfNoneMatch","CopySourceIfUnmodifiedSince","expires","Expires","GrantFullControl","GrantRead","GrantReadACP","GrantWriteACP","MetadataDirective","TaggingDirective","ServerSideEncryption","StorageClass","WebsiteRedirectLocation","SSEKMSKeyId","SSEKMSEncryptionContext","BucketKeyEnabled","CopySourceSSECustomerAlgorithm","CopySourceSSECustomerKey","CopySourceSSECustomerKeyMD5","Tagging","ObjectLockMode","ObjectLockRetainUntilDate","toISOString","split","ObjectLockLegalHoldStatus","ExpectedSourceBucketOwner","Metadata","Object","keys","reduce","acc","suffix","toLowerCase","se_CreateBucketCommand","GrantWrite","ObjectLockEnabledForBucket","ObjectOwnership","CreateBucketConfiguration","se_CreateBucketConfiguration","se_CreateMultipartUploadCommand","uploads","se_DeleteBucketCommand","se_DeleteBucketAnalyticsConfigurationCommand","analytics","id","Id","se_DeleteBucketCorsCommand","cors","se_DeleteBucketEncryptionCommand","encryption","se_DeleteBucketIntelligentTieringConfigurationCommand","se_DeleteBucketInventoryConfigurationCommand","inventory","se_DeleteBucketLifecycleCommand","lifecycle","se_DeleteBucketMetricsConfigurationCommand","metrics","se_DeleteBucketOwnershipControlsCommand","ownershipControls","se_DeleteBucketPolicyCommand","policy","se_DeleteBucketReplicationCommand","replication","se_DeleteBucketTaggingCommand","tagging","se_DeleteBucketWebsiteCommand","website","se_DeleteObjectCommand","MFA","BypassGovernanceRetention","versionId","VersionId","se_DeleteObjectsCommand","delete","Delete","se_Delete","se_DeleteObjectTaggingCommand","se_DeletePublicAccessBlockCommand","publicAccessBlock","se_GetBucketAccelerateConfigurationCommand","accelerate","se_GetBucketAclCommand","acl","se_GetBucketAnalyticsConfigurationCommand","se_GetBucketCorsCommand","se_GetBucketEncryptionCommand","se_GetBucketIntelligentTieringConfigurationCommand","se_GetBucketInventoryConfigurationCommand","se_GetBucketLifecycleConfigurationCommand","se_GetBucketLocationCommand","location","se_GetBucketLoggingCommand","logging","se_GetBucketMetricsConfigurationCommand","se_GetBucketNotificationConfigurationCommand","notification","se_GetBucketOwnershipControlsCommand","se_GetBucketPolicyCommand","se_GetBucketPolicyStatusCommand","policyStatus","se_GetBucketReplicationCommand","se_GetBucketRequestPaymentCommand","requestPayment","se_GetBucketTaggingCommand","se_GetBucketVersioningCommand","versioning","se_GetBucketWebsiteCommand","se_GetObjectCommand","IfMatch","IfModifiedSince","IfNoneMatch","IfUnmodifiedSince","range","Range","ChecksumMode","ResponseCacheControl","ResponseContentDisposition","ResponseContentEncoding","ResponseContentLanguage","ResponseContentType","ResponseExpires","partNumber","PartNumber","se_GetObjectAclCommand","se_GetObjectAttributesCommand","MaxParts","PartNumberMarker","ObjectAttributes","_entry","join","attributes","se_GetObjectLegalHoldCommand","se_GetObjectLockConfigurationCommand","se_GetObjectRetentionCommand","retention","se_GetObjectTaggingCommand","se_GetObjectTorrentCommand","torrent","se_GetPublicAccessBlockCommand","se_HeadBucketCommand","se_HeadObjectCommand","se_ListBucketAnalyticsConfigurationsCommand","ContinuationToken","se_ListBucketIntelligentTieringConfigurationsCommand","se_ListBucketInventoryConfigurationsCommand","se_ListBucketMetricsConfigurationsCommand","se_ListBucketsCommand","se_ListMultipartUploadsCommand","delimiter","Delimiter","EncodingType","KeyMarker","MaxUploads","prefix","Prefix","UploadIdMarker","se_ListObjectsCommand","OptionalObjectAttributes","marker","Marker","MaxKeys","se_ListObjectsV2Command","FetchOwner","StartAfter","se_ListObjectVersionsCommand","versions","VersionIdMarker","se_ListPartsCommand","se_PutBucketAccelerateConfigurationCommand","AccelerateConfiguration","se_AccelerateConfiguration","se_PutBucketAclCommand","ContentMD5","AccessControlPolicy","se_AccessControlPolicy","se_PutBucketAnalyticsConfigurationCommand","AnalyticsConfiguration","se_AnalyticsConfiguration","se_PutBucketCorsCommand","CORSConfiguration","se_CORSConfiguration","se_PutBucketEncryptionCommand","ServerSideEncryptionConfiguration","se_ServerSideEncryptionConfiguration","se_PutBucketIntelligentTieringConfigurationCommand","IntelligentTieringConfiguration","se_IntelligentTieringConfiguration","se_PutBucketInventoryConfigurationCommand","InventoryConfiguration","se_InventoryConfiguration","se_PutBucketLifecycleConfigurationCommand","LifecycleConfiguration","se_BucketLifecycleConfiguration","se_PutBucketLoggingCommand","BucketLoggingStatus","se_BucketLoggingStatus","se_PutBucketMetricsConfigurationCommand","MetricsConfiguration","se_MetricsConfiguration","se_PutBucketNotificationConfigurationCommand","SkipDestinationValidation","NotificationConfiguration","se_NotificationConfiguration","se_PutBucketOwnershipControlsCommand","OwnershipControls","se_OwnershipControls","se_PutBucketPolicyCommand","ConfirmRemoveSelfBucketAccess","Policy","se_PutBucketReplicationCommand","Token","ReplicationConfiguration","se_ReplicationConfiguration","se_PutBucketRequestPaymentCommand","RequestPaymentConfiguration","se_RequestPaymentConfiguration","se_PutBucketTaggingCommand","se_Tagging","se_PutBucketVersioningCommand","VersioningConfiguration","se_VersioningConfiguration","se_PutBucketWebsiteCommand","WebsiteConfiguration","se_WebsiteConfiguration","se_PutObjectCommand","ContentLength","Body","se_PutObjectAclCommand","se_PutObjectLegalHoldCommand","LegalHold","se_ObjectLockLegalHold","se_PutObjectLockConfigurationCommand","ObjectLockConfiguration","se_ObjectLockConfiguration","se_PutObjectRetentionCommand","Retention","se_ObjectLockRetention","se_PutObjectTaggingCommand","se_PutPublicAccessBlockCommand","PublicAccessBlockConfiguration","se_PublicAccessBlockConfiguration","se_RestoreObjectCommand","restore","RestoreRequest","se_RestoreRequest","se_SelectObjectContentCommand","select","bodyNode","Expression","node","of","addChildNode","ExpressionType","InputSerialization","se_InputSerialization","OutputSerialization","se_OutputSerialization","RequestProgress","se_RequestProgress","ScanRange","se_ScanRange","se_UploadPartCommand","se_UploadPartCopyCommand","CopySourceRange","se_WriteGetObjectResponseCommand","RequestRoute","RequestToken","StatusCode","ErrorCode","ErrorMessage","AcceptRanges","ContentRange","DeleteMarker","ETag","Expiration","LastModified","MissingMeta","PartsCount","ReplicationStatus","RequestCharged","Restore","TagCount","resolvedHostname","disableHostPrefix","Error","replace","de_AbortMultipartUploadCommand","output","statusCode","de_AbortMultipartUploadCommandError","$metadata","deserializeMetadata","parsedOutput","parseErrorBody","errorCode","loadRestXmlErrorCode","de_NoSuchUploadRes","parsedBody","throwDefaultError","de_CompleteMultipartUploadCommand","de_CompleteMultipartUploadCommandError","data","parseBody","Location","de_CopyObjectCommand","de_CopyObjectCommandError","CopySourceVersionId","CopyObjectResult","de_CopyObjectResult","de_ObjectNotInActiveTierErrorRes","de_CreateBucketCommand","de_CreateBucketCommandError","de_BucketAlreadyExistsRes","de_BucketAlreadyOwnedByYouRes","de_CreateMultipartUploadCommand","de_CreateMultipartUploadCommandError","AbortDate","AbortRuleId","de_DeleteBucketCommand","de_DeleteBucketCommandError","de_DeleteBucketAnalyticsConfigurationCommand","de_DeleteBucketAnalyticsConfigurationCommandError","de_DeleteBucketCorsCommand","de_DeleteBucketCorsCommandError","de_DeleteBucketEncryptionCommand","de_DeleteBucketEncryptionCommandError","de_DeleteBucketIntelligentTieringConfigurationCommand","de_DeleteBucketIntelligentTieringConfigurationCommandError","de_DeleteBucketInventoryConfigurationCommand","de_DeleteBucketInventoryConfigurationCommandError","de_DeleteBucketLifecycleCommand","de_DeleteBucketLifecycleCommandError","de_DeleteBucketMetricsConfigurationCommand","de_DeleteBucketMetricsConfigurationCommandError","de_DeleteBucketOwnershipControlsCommand","de_DeleteBucketOwnershipControlsCommandError","de_DeleteBucketPolicyCommand","de_DeleteBucketPolicyCommandError","de_DeleteBucketReplicationCommand","de_DeleteBucketReplicationCommandError","de_DeleteBucketTaggingCommand","de_DeleteBucketTaggingCommandError","de_DeleteBucketWebsiteCommand","de_DeleteBucketWebsiteCommandError","de_DeleteObjectCommand","de_DeleteObjectCommandError","de_DeleteObjectsCommand","de_DeleteObjectsCommandError","Deleted","de_DeletedObjects","Errors","de_Errors","de_DeleteObjectTaggingCommand","de_DeleteObjectTaggingCommandError","de_DeletePublicAccessBlockCommand","de_DeletePublicAccessBlockCommandError","de_GetBucketAccelerateConfigurationCommand","de_GetBucketAccelerateConfigurationCommandError","Status","de_GetBucketAclCommand","de_GetBucketAclCommandError","AccessControlList","Grants","de_Grants","Owner","de_Owner","de_GetBucketAnalyticsConfigurationCommand","de_GetBucketAnalyticsConfigurationCommandError","de_AnalyticsConfiguration","de_GetBucketCorsCommand","de_GetBucketCorsCommandError","CORSRule","CORSRules","de_CORSRules","de_GetBucketEncryptionCommand","de_GetBucketEncryptionCommandError","de_ServerSideEncryptionConfiguration","de_GetBucketIntelligentTieringConfigurationCommand","de_GetBucketIntelligentTieringConfigurationCommandError","de_IntelligentTieringConfiguration","de_GetBucketInventoryConfigurationCommand","de_GetBucketInventoryConfigurationCommandError","de_InventoryConfiguration","de_GetBucketLifecycleConfigurationCommand","de_GetBucketLifecycleConfigurationCommandError","Rule","Rules","de_LifecycleRules","de_GetBucketLocationCommand","de_GetBucketLocationCommandError","LocationConstraint","de_GetBucketLoggingCommand","de_GetBucketLoggingCommandError","LoggingEnabled","de_LoggingEnabled","de_GetBucketMetricsConfigurationCommand","de_GetBucketMetricsConfigurationCommandError","de_MetricsConfiguration","de_GetBucketNotificationConfigurationCommand","de_GetBucketNotificationConfigurationCommandError","EventBridgeConfiguration","de_EventBridgeConfiguration","CloudFunctionConfiguration","LambdaFunctionConfigurations","de_LambdaFunctionConfigurationList","QueueConfiguration","QueueConfigurations","de_QueueConfigurationList","TopicConfiguration","TopicConfigurations","de_TopicConfigurationList","de_GetBucketOwnershipControlsCommand","de_GetBucketOwnershipControlsCommandError","de_OwnershipControls","de_GetBucketPolicyCommand","de_GetBucketPolicyCommandError","collectBodyString","de_GetBucketPolicyStatusCommand","de_GetBucketPolicyStatusCommandError","PolicyStatus","de_PolicyStatus","de_GetBucketReplicationCommand","de_GetBucketReplicationCommandError","de_ReplicationConfiguration","de_GetBucketRequestPaymentCommand","de_GetBucketRequestPaymentCommandError","Payer","de_GetBucketTaggingCommand","de_GetBucketTaggingCommandError","TagSet","de_TagSet","de_GetBucketVersioningCommand","de_GetBucketVersioningCommandError","MFADelete","de_GetBucketWebsiteCommand","de_GetBucketWebsiteCommandError","ErrorDocument","de_ErrorDocument","IndexDocument","de_IndexDocument","RedirectAllRequestsTo","de_RedirectAllRequestsTo","RoutingRules","de_RoutingRules","de_GetObjectCommand","de_GetObjectCommandError","filter","header","startsWith","substring","sdkStreamMixin","de_InvalidObjectStateRes","de_NoSuchKeyRes","de_GetObjectAclCommand","de_GetObjectAclCommandError","de_GetObjectAttributesCommand","de_GetObjectAttributesCommandError","Checksum","de_Checksum","ObjectParts","de_GetObjectAttributesParts","ObjectSize","de_GetObjectLegalHoldCommand","de_GetObjectLegalHoldCommandError","de_ObjectLockLegalHold","de_GetObjectLockConfigurationCommand","de_GetObjectLockConfigurationCommandError","de_ObjectLockConfiguration","de_GetObjectRetentionCommand","de_GetObjectRetentionCommandError","de_ObjectLockRetention","de_GetObjectTaggingCommand","de_GetObjectTaggingCommandError","de_GetObjectTorrentCommand","de_GetObjectTorrentCommandError","de_GetPublicAccessBlockCommand","de_GetPublicAccessBlockCommandError","de_PublicAccessBlockConfiguration","de_HeadBucketCommand","de_HeadBucketCommandError","de_NotFoundRes","de_HeadObjectCommand","de_HeadObjectCommandError","ArchiveStatus","de_ListBucketAnalyticsConfigurationsCommand","de_ListBucketAnalyticsConfigurationsCommandError","AnalyticsConfigurationList","de_AnalyticsConfigurationList","IsTruncated","NextContinuationToken","de_ListBucketIntelligentTieringConfigurationsCommand","de_ListBucketIntelligentTieringConfigurationsCommandError","IntelligentTieringConfigurationList","de_IntelligentTieringConfigurationList","de_ListBucketInventoryConfigurationsCommand","de_ListBucketInventoryConfigurationsCommandError","InventoryConfigurationList","de_InventoryConfigurationList","de_ListBucketMetricsConfigurationsCommand","de_ListBucketMetricsConfigurationsCommandError","MetricsConfigurationList","de_MetricsConfigurationList","de_ListBucketsCommand","de_ListBucketsCommandError","Buckets","de_Buckets","de_ListMultipartUploadsCommand","de_ListMultipartUploadsCommandError","CommonPrefixes","de_CommonPrefixList","NextKeyMarker","NextUploadIdMarker","Upload","Uploads","de_MultipartUploadList","de_ListObjectsCommand","de_ListObjectsCommandError","Contents","de_ObjectList","Name","NextMarker","de_NoSuchBucketRes","de_ListObjectsV2Command","de_ListObjectsV2CommandError","KeyCount","de_ListObjectVersionsCommand","de_ListObjectVersionsCommandError","DeleteMarkers","de_DeleteMarkers","NextVersionIdMarker","Version","Versions","de_ObjectVersionList","de_ListPartsCommand","de_ListPartsCommandError","Initiator","de_Initiator","NextPartNumberMarker","Part","Parts","de_Parts","de_PutBucketAccelerateConfigurationCommand","de_PutBucketAccelerateConfigurationCommandError","de_PutBucketAclCommand","de_PutBucketAclCommandError","de_PutBucketAnalyticsConfigurationCommand","de_PutBucketAnalyticsConfigurationCommandError","de_PutBucketCorsCommand","de_PutBucketCorsCommandError","de_PutBucketEncryptionCommand","de_PutBucketEncryptionCommandError","de_PutBucketIntelligentTieringConfigurationCommand","de_PutBucketIntelligentTieringConfigurationCommandError","de_PutBucketInventoryConfigurationCommand","de_PutBucketInventoryConfigurationCommandError","de_PutBucketLifecycleConfigurationCommand","de_PutBucketLifecycleConfigurationCommandError","de_PutBucketLoggingCommand","de_PutBucketLoggingCommandError","de_PutBucketMetricsConfigurationCommand","de_PutBucketMetricsConfigurationCommandError","de_PutBucketNotificationConfigurationCommand","de_PutBucketNotificationConfigurationCommandError","de_PutBucketOwnershipControlsCommand","de_PutBucketOwnershipControlsCommandError","de_PutBucketPolicyCommand","de_PutBucketPolicyCommandError","de_PutBucketReplicationCommand","de_PutBucketReplicationCommandError","de_PutBucketRequestPaymentCommand","de_PutBucketRequestPaymentCommandError","de_PutBucketTaggingCommand","de_PutBucketTaggingCommandError","de_PutBucketVersioningCommand","de_PutBucketVersioningCommandError","de_PutBucketWebsiteCommand","de_PutBucketWebsiteCommandError","de_PutObjectCommand","de_PutObjectCommandError","de_PutObjectAclCommand","de_PutObjectAclCommandError","de_PutObjectLegalHoldCommand","de_PutObjectLegalHoldCommandError","de_PutObjectLockConfigurationCommand","de_PutObjectLockConfigurationCommandError","de_PutObjectRetentionCommand","de_PutObjectRetentionCommandError","de_PutObjectTaggingCommand","de_PutObjectTaggingCommandError","de_PutPublicAccessBlockCommand","de_PutPublicAccessBlockCommandError","de_RestoreObjectCommand","de_RestoreObjectCommandError","RestoreOutputPath","de_ObjectAlreadyInActiveTierErrorRes","de_SelectObjectContentCommand","de_SelectObjectContentCommandError","Payload","de_SelectObjectContentEventStream","de_UploadPartCommand","de_UploadPartCommandError","de_UploadPartCopyCommand","de_UploadPartCopyCommandError","CopyPartResult","de_CopyPartResult","de_WriteGetObjectResponseCommand","de_WriteGetObjectResponseCommandError","exception","AccessTier","eventStreamMarshaller","deserialize","event","Records","de_RecordsEvent_event","Stats","de_StatsEvent_event","Progress","de_ProgressEvent_event","Cont","de_ContinuationEvent_event","End","de_EndEvent_event","$unknown","assign","de_ContinuationEvent","de_EndEvent","Details","de_Progress","de_Stats","se_AbortIncompleteMultipartUpload","DaysAfterInitiation","String","nodes","se_Grants","containerNode","se_Owner","se_AccessControlTranslation","se_AllowedHeaders","e","entry","se_AllowedMethods","se_AllowedOrigins","se_AnalyticsAndOperator","Tags","se_TagSet","Filter","se_AnalyticsFilter","StorageClassAnalysis","se_StorageClassAnalysis","se_AnalyticsExportDestination","S3BucketDestination","se_AnalyticsS3BucketDestination","visit","value","Tag","se_Tag","And","_","name","Format","BucketAccountId","se_LifecycleRules","se_LoggingEnabled","se_CompletedPartList","se_CompletedPart","se_Condition","HttpErrorCodeReturnedEquals","KeyPrefixEquals","se_CORSRules","se_CORSRule","ID","AllowedHeaders","AllowedMethods","AllowedOrigins","ExposeHeaders","se_ExposeHeaders","MaxAgeSeconds","se_CSVInput","FileHeaderInfo","Comments","QuoteEscapeCharacter","RecordDelimiter","FieldDelimiter","QuoteCharacter","AllowQuotedRecordDelimiter","se_CSVOutput","QuoteFields","se_DefaultRetention","Mode","Days","Years","Objects","se_ObjectIdentifierList","Quiet","se_DeleteMarkerReplication","se_Destination","Account","AccessControlTranslation","EncryptionConfiguration","se_EncryptionConfiguration","ReplicationTime","se_ReplicationTime","Metrics","se_Metrics","se_Encryption","EncryptionType","KMSKeyId","KMSContext","ReplicaKmsKeyID","se_ErrorDocument","se_EventBridgeConfiguration","se_EventList","se_ExistingObjectReplication","se_FilterRule","Value","se_FilterRuleList","se_GlacierJobParameters","Tier","se_Grant","Grantee","se_Grantee","Permission","DisplayName","EmailAddress","URI","Type","se_IndexDocument","Suffix","CSV","CompressionType","JSON","se_JSONInput","Parquet","se_ParquetInput","se_IntelligentTieringAndOperator","se_IntelligentTieringFilter","Tierings","se_TieringList","Destination","se_InventoryDestination","IsEnabled","se_InventoryFilter","IncludedObjectVersions","OptionalFields","se_InventoryOptionalFields","Schedule","se_InventorySchedule","se_InventoryS3BucketDestination","se_InventoryEncryption","SSES3","se_SSES3","SSEKMS","se_SSEKMS","AccountId","Encryption","Frequency","se_JSONOutput","se_LambdaFunctionConfiguration","LambdaFunctionArn","Events","se_NotificationConfigurationFilter","se_LambdaFunctionConfigurationList","se_LifecycleExpiration","Date","ExpiredObjectDeleteMarker","se_LifecycleRule","se_LifecycleRuleFilter","Transitions","se_TransitionList","NoncurrentVersionTransitions","se_NoncurrentVersionTransitionList","NoncurrentVersionExpiration","se_NoncurrentVersionExpiration","AbortIncompleteMultipartUpload","se_LifecycleRuleAndOperator","ObjectSizeGreaterThan","ObjectSizeLessThan","TargetBucket","TargetGrants","se_TargetGrants","TargetPrefix","se_MetadataEntry","EventThreshold","se_ReplicationTimeValue","se_MetricsAndOperator","AccessPointArn","se_MetricsFilter","NoncurrentDays","NewerNoncurrentVersions","se_NoncurrentVersionTransition","se_TopicConfigurationList","se_QueueConfigurationList","se_S3KeyFilter","se_ObjectIdentifier","ObjectLockEnabled","se_ObjectLockRule","RetainUntilDate","DefaultRetention","se_OutputLocation","S3","se_S3Location","se_OwnershipControlsRules","se_OwnershipControlsRule","BlockPublicAcls","IgnorePublicAcls","BlockPublicPolicy","RestrictPublicBuckets","se_QueueConfiguration","QueueArn","se_Redirect","HostName","HttpRedirectCode","Protocol","ReplaceKeyPrefixWith","ReplaceKeyWith","se_RedirectAllRequestsTo","se_ReplicaModifications","Role","se_ReplicationRules","se_ReplicationRule","Priority","se_ReplicationRuleFilter","SourceSelectionCriteria","se_SourceSelectionCriteria","ExistingObjectReplication","DeleteMarkerReplication","se_ReplicationRuleAndOperator","Time","Minutes","Enabled","GlacierJobParameters","Description","SelectParameters","se_SelectParameters","OutputLocation","se_RoutingRule","Condition","Redirect","se_RoutingRules","FilterRules","BucketName","CannedACL","UserMetadata","se_UserMetadata","Start","se_ServerSideEncryptionByDefault","SSEAlgorithm","KMSMasterKeyID","se_ServerSideEncryptionRules","se_ServerSideEncryptionRule","ApplyServerSideEncryptionByDefault","SseKmsEncryptedObjects","se_SseKmsEncryptedObjects","ReplicaModifications","KeyId","DataExport","se_StorageClassAnalysisDataExport","OutputSchemaVersion","se_TargetGrant","se_Tiering","se_TopicConfiguration","TopicArn","se_Transition","de_AbortIncompleteMultipartUpload","de_AccessControlTranslation","de_AllowedHeaders","de_AllowedMethods","de_AllowedOrigins","de_AnalyticsAndOperator","de_AnalyticsFilter","de_StorageClassAnalysis","de_AnalyticsExportDestination","de_AnalyticsS3BucketDestination","de_Tag","entries","de_Bucket","CreationDate","de_ChecksumAlgorithmList","de_CommonPrefix","de_Condition","de_CORSRule","AllowedHeader","AllowedMethod","AllowedOrigin","ExposeHeader","de_ExposeHeaders","de_DefaultRetention","de_DeletedObject","DeleteMarkerVersionId","de_DeleteMarkerEntry","IsLatest","de_DeleteMarkerReplication","de_Destination","de_EncryptionConfiguration","de_ReplicationTime","de_Metrics","de__Error","Code","Message","de_EventList","de_ExistingObjectReplication","de_FilterRule","de_FilterRuleList","TotalPartsCount","de_PartsList","de_Grant","de_Grantee","de_IntelligentTieringAndOperator","de_IntelligentTieringFilter","Tiering","de_TieringList","de_InventoryDestination","de_InventoryFilter","de_InventoryOptionalFields","de_InventorySchedule","de_InventoryS3BucketDestination","de_InventoryEncryption","de_SSES3","de_SSEKMS","de_LambdaFunctionConfiguration","Event","de_NotificationConfigurationFilter","de_LifecycleExpiration","de_LifecycleRule","de_LifecycleRuleFilter","Transition","de_TransitionList","NoncurrentVersionTransition","de_NoncurrentVersionTransitionList","de_NoncurrentVersionExpiration","de_LifecycleRuleAndOperator","de_TargetGrants","de_ReplicationTimeValue","de_MetricsAndOperator","de_MetricsFilter","de_MultipartUpload","Initiated","de_NoncurrentVersionTransition","de_S3KeyFilter","de__Object","Size","RestoreStatus","de_RestoreStatus","de_ObjectLockRule","de_ObjectPart","de_ObjectVersion","de_OwnershipControlsRules","de_OwnershipControlsRule","de_Part","IsPublic","BytesScanned","BytesProcessed","BytesReturned","de_QueueConfiguration","de_Redirect","de_ReplicaModifications","de_ReplicationRules","de_ReplicationRule","de_ReplicationRuleFilter","de_SourceSelectionCriteria","de_ReplicationRuleAndOperator","IsRestoreInProgress","RestoreExpiryDate","de_RoutingRule","FilterRule","de_ServerSideEncryptionByDefault","de_ServerSideEncryptionRules","de_ServerSideEncryptionRule","de_SseKmsEncryptedObjects","de_StorageClassAnalysisDataExport","de_TargetGrant","de_Tiering","de_TopicConfiguration","de_Transition","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","then","utf8Encoder","getOwnPropertyNames","includes","length","size","encoded","parser","attributeNamePrefix","htmlEntities","ignoreAttributes","ignoreDeclaration","parseTagValue","trimValues","tagValueProcessor","val","trim","addEntity","parsedObj","parse","textNodeName","key","parsedObjToReturn","errorBody","message"],"sources":["D:/Work/00-Mogul/konva v2/node_modules/@aws-sdk/client-s3/dist-es/protocols/Aws_restXml.js"],"sourcesContent":["import { XmlNode as __XmlNode, XmlText as __XmlText } from \"@aws-sdk/xml-builder\";\nimport { HttpRequest as __HttpRequest, isValidHostname as __isValidHostname, } from \"@smithy/protocol-http\";\nimport { collectBody, dateToUtcString as __dateToUtcString, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, expectUnion as __expectUnion, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, map, parseBoolean as __parseBoolean, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, parseRfc7231DateTime as __parseRfc7231DateTime, resolvedPath as __resolvedPath, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, withBaseException, } from \"@smithy/smithy-client\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { AnalyticsFilter, BucketAlreadyExists, BucketAlreadyOwnedByYou, InvalidObjectState, LifecycleRuleFilter, MetricsFilter, NoSuchBucket, NoSuchKey, NoSuchUpload, NotFound, ObjectNotInActiveTierError, ReplicationRuleFilter, } from \"../models/models_0\";\nimport { ObjectAlreadyInActiveTierError, } from \"../models/models_1\";\nimport { S3ServiceException as __BaseException } from \"../models/S3ServiceException\";\nexport const se_AbortMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"AbortMultipartUpload\"],\n        uploadId: [, __expectNonNull(input.UploadId, `UploadId`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_CompleteMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"CompleteMultipartUpload\"],\n        uploadId: [, __expectNonNull(input.UploadId, `UploadId`)],\n    });\n    let body;\n    if (input.MultipartUpload !== undefined) {\n        body = se_CompletedMultipartUpload(input.MultipartUpload, context);\n    }\n    let contents;\n    if (input.MultipartUpload !== undefined) {\n        contents = se_CompletedMultipartUpload(input.MultipartUpload, context);\n        contents = contents.withName(\"CompleteMultipartUpload\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_CopyObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-acl\": input.ACL,\n        \"cache-control\": input.CacheControl,\n        \"x-amz-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"content-disposition\": input.ContentDisposition,\n        \"content-encoding\": input.ContentEncoding,\n        \"content-language\": input.ContentLanguage,\n        \"content-type\": input.ContentType,\n        \"x-amz-copy-source\": input.CopySource,\n        \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n        \"x-amz-copy-source-if-modified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),\n            () => __dateToUtcString(input.CopySourceIfModifiedSince).toString(),\n        ],\n        \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n        \"x-amz-copy-source-if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),\n            () => __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString(),\n        ],\n        expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-metadata-directive\": input.MetadataDirective,\n        \"x-amz-tagging-directive\": input.TaggingDirective,\n        \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-storage-class\": input.StorageClass,\n        \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        \"x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n        \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n        \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-tagging\": input.Tagging,\n        \"x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner,\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => {\n                acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n                return acc;\n            }, {})),\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"CopyObject\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_CreateBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-acl\": input.ACL,\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write\": input.GrantWrite,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-bucket-object-lock-enabled\": [\n            () => isSerializableHeaderValue(input.ObjectLockEnabledForBucket),\n            () => input.ObjectLockEnabledForBucket.toString(),\n        ],\n        \"x-amz-object-ownership\": input.ObjectOwnership,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    let body;\n    if (input.CreateBucketConfiguration !== undefined) {\n        body = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);\n    }\n    let contents;\n    if (input.CreateBucketConfiguration !== undefined) {\n        contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const se_CreateMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-acl\": input.ACL,\n        \"cache-control\": input.CacheControl,\n        \"content-disposition\": input.ContentDisposition,\n        \"content-encoding\": input.ContentEncoding,\n        \"content-language\": input.ContentLanguage,\n        \"content-type\": input.ContentType,\n        expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-storage-class\": input.StorageClass,\n        \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        \"x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-tagging\": input.Tagging,\n        \"x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-checksum-algorithm\": input.ChecksumAlgorithm,\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => {\n                acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n                return acc;\n            }, {})),\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        uploads: [, \"\"],\n        \"x-id\": [, \"CreateMultipartUpload\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const se_DeleteBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        cors: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        encryption: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketLifecycleCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        lifecycle: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        ownershipControls: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policy: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        replication: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        tagging: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        website: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-mfa\": input.MFA,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bypass-governance-retention\": [\n            () => isSerializableHeaderValue(input.BypassGovernanceRetention),\n            () => input.BypassGovernanceRetention.toString(),\n        ],\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"DeleteObject\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteObjectsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-mfa\": input.MFA,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bypass-governance-retention\": [\n            () => isSerializableHeaderValue(input.BypassGovernanceRetention),\n            () => input.BypassGovernanceRetention.toString(),\n        ],\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        delete: [, \"\"],\n        \"x-id\": [, \"DeleteObjects\"],\n    });\n    let body;\n    if (input.Delete !== undefined) {\n        body = se_Delete(input.Delete, context);\n    }\n    let contents;\n    if (input.Delete !== undefined) {\n        contents = se_Delete(input.Delete, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeleteObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        tagging: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_DeletePublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        publicAccessBlock: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketAccelerateConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-request-payer\": input.RequestPayer,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        accelerate: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        acl: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        \"x-id\": [, \"GetBucketAnalyticsConfiguration\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        cors: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        encryption: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        \"x-id\": [, \"GetBucketIntelligentTieringConfiguration\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        \"x-id\": [, \"GetBucketInventoryConfiguration\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketLifecycleConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        lifecycle: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketLocationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        location: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketLoggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        logging: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        \"x-id\": [, \"GetBucketMetricsConfiguration\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketNotificationConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        notification: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        ownershipControls: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policy: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketPolicyStatusCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policyStatus: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        replication: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketRequestPaymentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        requestPayment: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        tagging: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketVersioningCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        versioning: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        website: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"if-match\": input.IfMatch,\n        \"if-modified-since\": [\n            () => isSerializableHeaderValue(input.IfModifiedSince),\n            () => __dateToUtcString(input.IfModifiedSince).toString(),\n        ],\n        \"if-none-match\": input.IfNoneMatch,\n        \"if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.IfUnmodifiedSince),\n            () => __dateToUtcString(input.IfUnmodifiedSince).toString(),\n        ],\n        range: input.Range,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-checksum-mode\": input.ChecksumMode,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"GetObject\"],\n        \"response-cache-control\": [, input.ResponseCacheControl],\n        \"response-content-disposition\": [, input.ResponseContentDisposition],\n        \"response-content-encoding\": [, input.ResponseContentEncoding],\n        \"response-content-language\": [, input.ResponseContentLanguage],\n        \"response-content-type\": [, input.ResponseContentType],\n        \"response-expires\": [\n            () => input.ResponseExpires !== void 0,\n            () => __dateToUtcString(input.ResponseExpires).toString(),\n        ],\n        versionId: [, input.VersionId],\n        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetObjectAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        acl: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetObjectAttributesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-max-parts\": [() => isSerializableHeaderValue(input.MaxParts), () => input.MaxParts.toString()],\n        \"x-amz-part-number-marker\": input.PartNumberMarker,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-object-attributes\": [\n            () => isSerializableHeaderValue(input.ObjectAttributes),\n            () => (input.ObjectAttributes || []).map((_entry) => _entry).join(\", \"),\n        ],\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        attributes: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetObjectLegalHoldCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"legal-hold\": [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetObjectLockConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"object-lock\": [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetObjectRetentionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        retention: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-request-payer\": input.RequestPayer,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        tagging: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetObjectTorrentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        torrent: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_GetPublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        publicAccessBlock: [, \"\"],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_HeadBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"HEAD\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const se_HeadObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"if-match\": input.IfMatch,\n        \"if-modified-since\": [\n            () => isSerializableHeaderValue(input.IfModifiedSince),\n            () => __dateToUtcString(input.IfModifiedSince).toString(),\n        ],\n        \"if-none-match\": input.IfNoneMatch,\n        \"if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.IfUnmodifiedSince),\n            () => __dateToUtcString(input.IfUnmodifiedSince).toString(),\n        ],\n        range: input.Range,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-checksum-mode\": input.ChecksumMode,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        versionId: [, input.VersionId],\n        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"HEAD\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListBucketAnalyticsConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        \"x-id\": [, \"ListBucketAnalyticsConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        \"x-id\": [, \"ListBucketIntelligentTieringConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListBucketInventoryConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        \"x-id\": [, \"ListBucketInventoryConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListBucketMetricsConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        \"x-id\": [, \"ListBucketMetricsConfigurations\"],\n        \"continuation-token\": [, input.ContinuationToken],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListBucketsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    let body;\n    body = \"\";\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const se_ListMultipartUploadsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-request-payer\": input.RequestPayer,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        uploads: [, \"\"],\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        \"key-marker\": [, input.KeyMarker],\n        \"max-uploads\": [() => input.MaxUploads !== void 0, () => input.MaxUploads.toString()],\n        prefix: [, input.Prefix],\n        \"upload-id-marker\": [, input.UploadIdMarker],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListObjectsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-optional-object-attributes\": [\n            () => isSerializableHeaderValue(input.OptionalObjectAttributes),\n            () => (input.OptionalObjectAttributes || []).map((_entry) => _entry).join(\", \"),\n        ],\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        marker: [, input.Marker],\n        \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n        prefix: [, input.Prefix],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListObjectsV2Command = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-optional-object-attributes\": [\n            () => isSerializableHeaderValue(input.OptionalObjectAttributes),\n            () => (input.OptionalObjectAttributes || []).map((_entry) => _entry).join(\", \"),\n        ],\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"list-type\": [, \"2\"],\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n        prefix: [, input.Prefix],\n        \"continuation-token\": [, input.ContinuationToken],\n        \"fetch-owner\": [() => input.FetchOwner !== void 0, () => input.FetchOwner.toString()],\n        \"start-after\": [, input.StartAfter],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListObjectVersionsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-optional-object-attributes\": [\n            () => isSerializableHeaderValue(input.OptionalObjectAttributes),\n            () => (input.OptionalObjectAttributes || []).map((_entry) => _entry).join(\", \"),\n        ],\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        versions: [, \"\"],\n        delimiter: [, input.Delimiter],\n        \"encoding-type\": [, input.EncodingType],\n        \"key-marker\": [, input.KeyMarker],\n        \"max-keys\": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],\n        prefix: [, input.Prefix],\n        \"version-id-marker\": [, input.VersionIdMarker],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListPartsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"ListParts\"],\n        \"max-parts\": [() => input.MaxParts !== void 0, () => input.MaxParts.toString()],\n        \"part-number-marker\": [, input.PartNumberMarker],\n        uploadId: [, __expectNonNull(input.UploadId, `UploadId`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketAccelerateConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        accelerate: [, \"\"],\n    });\n    let body;\n    if (input.AccelerateConfiguration !== undefined) {\n        body = se_AccelerateConfiguration(input.AccelerateConfiguration, context);\n    }\n    let contents;\n    if (input.AccelerateConfiguration !== undefined) {\n        contents = se_AccelerateConfiguration(input.AccelerateConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-acl\": input.ACL,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write\": input.GrantWrite,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        acl: [, \"\"],\n    });\n    let body;\n    if (input.AccessControlPolicy !== undefined) {\n        body = se_AccessControlPolicy(input.AccessControlPolicy, context);\n    }\n    let contents;\n    if (input.AccessControlPolicy !== undefined) {\n        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        analytics: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    if (input.AnalyticsConfiguration !== undefined) {\n        body = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);\n    }\n    let contents;\n    if (input.AnalyticsConfiguration !== undefined) {\n        contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        cors: [, \"\"],\n    });\n    let body;\n    if (input.CORSConfiguration !== undefined) {\n        body = se_CORSConfiguration(input.CORSConfiguration, context);\n    }\n    let contents;\n    if (input.CORSConfiguration !== undefined) {\n        contents = se_CORSConfiguration(input.CORSConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        encryption: [, \"\"],\n    });\n    let body;\n    if (input.ServerSideEncryptionConfiguration !== undefined) {\n        body = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n    }\n    let contents;\n    if (input.ServerSideEncryptionConfiguration !== undefined) {\n        contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"intelligent-tiering\": [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    if (input.IntelligentTieringConfiguration !== undefined) {\n        body = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n    }\n    let contents;\n    if (input.IntelligentTieringConfiguration !== undefined) {\n        contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        inventory: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    if (input.InventoryConfiguration !== undefined) {\n        body = se_InventoryConfiguration(input.InventoryConfiguration, context);\n    }\n    let contents;\n    if (input.InventoryConfiguration !== undefined) {\n        contents = se_InventoryConfiguration(input.InventoryConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketLifecycleConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        lifecycle: [, \"\"],\n    });\n    let body;\n    if (input.LifecycleConfiguration !== undefined) {\n        body = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n    }\n    let contents;\n    if (input.LifecycleConfiguration !== undefined) {\n        contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n        contents = contents.withName(\"LifecycleConfiguration\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketLoggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        logging: [, \"\"],\n    });\n    let body;\n    if (input.BucketLoggingStatus !== undefined) {\n        body = se_BucketLoggingStatus(input.BucketLoggingStatus, context);\n    }\n    let contents;\n    if (input.BucketLoggingStatus !== undefined) {\n        contents = se_BucketLoggingStatus(input.BucketLoggingStatus, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        metrics: [, \"\"],\n        id: [, __expectNonNull(input.Id, `Id`)],\n    });\n    let body;\n    if (input.MetricsConfiguration !== undefined) {\n        body = se_MetricsConfiguration(input.MetricsConfiguration, context);\n    }\n    let contents;\n    if (input.MetricsConfiguration !== undefined) {\n        contents = se_MetricsConfiguration(input.MetricsConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketNotificationConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-skip-destination-validation\": [\n            () => isSerializableHeaderValue(input.SkipDestinationValidation),\n            () => input.SkipDestinationValidation.toString(),\n        ],\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        notification: [, \"\"],\n    });\n    let body;\n    if (input.NotificationConfiguration !== undefined) {\n        body = se_NotificationConfiguration(input.NotificationConfiguration, context);\n    }\n    let contents;\n    if (input.NotificationConfiguration !== undefined) {\n        contents = se_NotificationConfiguration(input.NotificationConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        ownershipControls: [, \"\"],\n    });\n    let body;\n    if (input.OwnershipControls !== undefined) {\n        body = se_OwnershipControls(input.OwnershipControls, context);\n    }\n    let contents;\n    if (input.OwnershipControls !== undefined) {\n        contents = se_OwnershipControls(input.OwnershipControls, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"text/plain\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-confirm-remove-self-bucket-access\": [\n            () => isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess),\n            () => input.ConfirmRemoveSelfBucketAccess.toString(),\n        ],\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        policy: [, \"\"],\n    });\n    let body;\n    if (input.Policy !== undefined) {\n        body = input.Policy;\n    }\n    let contents;\n    if (input.Policy !== undefined) {\n        contents = input.Policy;\n        body = contents;\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-bucket-object-lock-token\": input.Token,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        replication: [, \"\"],\n    });\n    let body;\n    if (input.ReplicationConfiguration !== undefined) {\n        body = se_ReplicationConfiguration(input.ReplicationConfiguration, context);\n    }\n    let contents;\n    if (input.ReplicationConfiguration !== undefined) {\n        contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketRequestPaymentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        requestPayment: [, \"\"],\n    });\n    let body;\n    if (input.RequestPaymentConfiguration !== undefined) {\n        body = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n    }\n    let contents;\n    if (input.RequestPaymentConfiguration !== undefined) {\n        contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        tagging: [, \"\"],\n    });\n    let body;\n    if (input.Tagging !== undefined) {\n        body = se_Tagging(input.Tagging, context);\n    }\n    let contents;\n    if (input.Tagging !== undefined) {\n        contents = se_Tagging(input.Tagging, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketVersioningCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-mfa\": input.MFA,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        versioning: [, \"\"],\n    });\n    let body;\n    if (input.VersioningConfiguration !== undefined) {\n        body = se_VersioningConfiguration(input.VersioningConfiguration, context);\n    }\n    let contents;\n    if (input.VersioningConfiguration !== undefined) {\n        contents = se_VersioningConfiguration(input.VersioningConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        website: [, \"\"],\n    });\n    let body;\n    if (input.WebsiteConfiguration !== undefined) {\n        body = se_WebsiteConfiguration(input.WebsiteConfiguration, context);\n    }\n    let contents;\n    if (input.WebsiteConfiguration !== undefined) {\n        contents = se_WebsiteConfiguration(input.WebsiteConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": input.ContentType || \"application/octet-stream\",\n        \"x-amz-acl\": input.ACL,\n        \"cache-control\": input.CacheControl,\n        \"content-disposition\": input.ContentDisposition,\n        \"content-encoding\": input.ContentEncoding,\n        \"content-language\": input.ContentLanguage,\n        \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n        expires: [() => isSerializableHeaderValue(input.Expires), () => __dateToUtcString(input.Expires).toString()],\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-storage-class\": input.StorageClass,\n        \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        \"x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-tagging\": input.Tagging,\n        \"x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => {\n                acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n                return acc;\n            }, {})),\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"PutObject\"],\n    });\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutObjectAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-acl\": input.ACL,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-grant-full-control\": input.GrantFullControl,\n        \"x-amz-grant-read\": input.GrantRead,\n        \"x-amz-grant-read-acp\": input.GrantReadACP,\n        \"x-amz-grant-write\": input.GrantWrite,\n        \"x-amz-grant-write-acp\": input.GrantWriteACP,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        acl: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.AccessControlPolicy !== undefined) {\n        body = se_AccessControlPolicy(input.AccessControlPolicy, context);\n    }\n    let contents;\n    if (input.AccessControlPolicy !== undefined) {\n        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutObjectLegalHoldCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"legal-hold\": [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.LegalHold !== undefined) {\n        body = se_ObjectLockLegalHold(input.LegalHold, context);\n    }\n    let contents;\n    if (input.LegalHold !== undefined) {\n        contents = se_ObjectLockLegalHold(input.LegalHold, context);\n        contents = contents.withName(\"LegalHold\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutObjectLockConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bucket-object-lock-token\": input.Token,\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        \"object-lock\": [, \"\"],\n    });\n    let body;\n    if (input.ObjectLockConfiguration !== undefined) {\n        body = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);\n    }\n    let contents;\n    if (input.ObjectLockConfiguration !== undefined) {\n        contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutObjectRetentionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-bypass-governance-retention\": [\n            () => isSerializableHeaderValue(input.BypassGovernanceRetention),\n            () => input.BypassGovernanceRetention.toString(),\n        ],\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        retention: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.Retention !== undefined) {\n        body = se_ObjectLockRetention(input.Retention, context);\n    }\n    let contents;\n    if (input.Retention !== undefined) {\n        contents = se_ObjectLockRetention(input.Retention, context);\n        contents = contents.withName(\"Retention\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-request-payer\": input.RequestPayer,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        tagging: [, \"\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.Tagging !== undefined) {\n        body = se_Tagging(input.Tagging, context);\n    }\n    let contents;\n    if (input.Tagging !== undefined) {\n        contents = se_Tagging(input.Tagging, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_PutPublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    const query = map({\n        publicAccessBlock: [, \"\"],\n    });\n    let body;\n    if (input.PublicAccessBlockConfiguration !== undefined) {\n        body = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n    }\n    let contents;\n    if (input.PublicAccessBlockConfiguration !== undefined) {\n        contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_RestoreObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        restore: [, \"\"],\n        \"x-id\": [, \"RestoreObject\"],\n        versionId: [, input.VersionId],\n    });\n    let body;\n    if (input.RestoreRequest !== undefined) {\n        body = se_RestoreRequest(input.RestoreRequest, context);\n    }\n    let contents;\n    if (input.RestoreRequest !== undefined) {\n        contents = se_RestoreRequest(input.RestoreRequest, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_SelectObjectContentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/xml\",\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        select: [, \"\"],\n        \"select-type\": [, \"2\"],\n        \"x-id\": [, \"SelectObjectContent\"],\n    });\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new __XmlNode(\"SelectObjectContentRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    if (input.Expression !== undefined) {\n        const node = __XmlNode.of(\"Expression\", input.Expression).withName(\"Expression\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpressionType !== undefined) {\n        const node = __XmlNode.of(\"ExpressionType\", input.ExpressionType).withName(\"ExpressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.InputSerialization !== undefined) {\n        const node = se_InputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputSerialization !== undefined) {\n        const node = se_OutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RequestProgress !== undefined) {\n        const node = se_RequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ScanRange !== undefined) {\n        const node = se_ScanRange(input.ScanRange, context).withName(\"ScanRange\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_UploadPartCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"content-type\": \"application/octet-stream\",\n        \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n        \"content-md5\": input.ContentMD5,\n        \"x-amz-sdk-checksum-algorithm\": input.ChecksumAlgorithm,\n        \"x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-checksum-sha256\": input.ChecksumSHA256,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"UploadPart\"],\n        partNumber: [__expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],\n        uploadId: [, __expectNonNull(input.UploadId, `UploadId`)],\n    });\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_UploadPartCopyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-copy-source\": input.CopySource,\n        \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n        \"x-amz-copy-source-if-modified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),\n            () => __dateToUtcString(input.CopySourceIfModifiedSince).toString(),\n        ],\n        \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n        \"x-amz-copy-source-if-unmodified-since\": [\n            () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),\n            () => __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString(),\n        ],\n        \"x-amz-copy-source-range\": input.CopySourceRange,\n        \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n        \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n        \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n        \"x-amz-request-payer\": input.RequestPayer,\n        \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner,\n    });\n    let resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Key+}\";\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Bucket\", () => input.Bucket, \"{Bucket}\", false);\n    resolvedPath = __resolvedPath(resolvedPath, input, \"Key\", () => input.Key, \"{Key+}\", true);\n    const query = map({\n        \"x-id\": [, \"UploadPartCopy\"],\n        partNumber: [__expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],\n        uploadId: [, __expectNonNull(input.UploadId, `UploadId`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_WriteGetObjectResponseCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\",\n        \"content-type\": \"application/octet-stream\",\n        \"x-amz-request-route\": input.RequestRoute,\n        \"x-amz-request-token\": input.RequestToken,\n        \"x-amz-fwd-status\": [() => isSerializableHeaderValue(input.StatusCode), () => input.StatusCode.toString()],\n        \"x-amz-fwd-error-code\": input.ErrorCode,\n        \"x-amz-fwd-error-message\": input.ErrorMessage,\n        \"x-amz-fwd-header-accept-ranges\": input.AcceptRanges,\n        \"x-amz-fwd-header-cache-control\": input.CacheControl,\n        \"x-amz-fwd-header-content-disposition\": input.ContentDisposition,\n        \"x-amz-fwd-header-content-encoding\": input.ContentEncoding,\n        \"x-amz-fwd-header-content-language\": input.ContentLanguage,\n        \"content-length\": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],\n        \"x-amz-fwd-header-content-range\": input.ContentRange,\n        \"x-amz-fwd-header-content-type\": input.ContentType,\n        \"x-amz-fwd-header-x-amz-checksum-crc32\": input.ChecksumCRC32,\n        \"x-amz-fwd-header-x-amz-checksum-crc32c\": input.ChecksumCRC32C,\n        \"x-amz-fwd-header-x-amz-checksum-sha1\": input.ChecksumSHA1,\n        \"x-amz-fwd-header-x-amz-checksum-sha256\": input.ChecksumSHA256,\n        \"x-amz-fwd-header-x-amz-delete-marker\": [\n            () => isSerializableHeaderValue(input.DeleteMarker),\n            () => input.DeleteMarker.toString(),\n        ],\n        \"x-amz-fwd-header-etag\": input.ETag,\n        \"x-amz-fwd-header-expires\": [\n            () => isSerializableHeaderValue(input.Expires),\n            () => __dateToUtcString(input.Expires).toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-expiration\": input.Expiration,\n        \"x-amz-fwd-header-last-modified\": [\n            () => isSerializableHeaderValue(input.LastModified),\n            () => __dateToUtcString(input.LastModified).toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-missing-meta\": [\n            () => isSerializableHeaderValue(input.MissingMeta),\n            () => input.MissingMeta.toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-object-lock-mode\": input.ObjectLockMode,\n        \"x-amz-fwd-header-x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        \"x-amz-fwd-header-x-amz-object-lock-retain-until-date\": [\n            () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),\n            () => (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-mp-parts-count\": [\n            () => isSerializableHeaderValue(input.PartsCount),\n            () => input.PartsCount.toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-replication-status\": input.ReplicationStatus,\n        \"x-amz-fwd-header-x-amz-request-charged\": input.RequestCharged,\n        \"x-amz-fwd-header-x-amz-restore\": input.Restore,\n        \"x-amz-fwd-header-x-amz-server-side-encryption\": input.ServerSideEncryption,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        \"x-amz-fwd-header-x-amz-storage-class\": input.StorageClass,\n        \"x-amz-fwd-header-x-amz-tagging-count\": [\n            () => isSerializableHeaderValue(input.TagCount),\n            () => input.TagCount.toString(),\n        ],\n        \"x-amz-fwd-header-x-amz-version-id\": input.VersionId,\n        \"x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled\": [\n            () => isSerializableHeaderValue(input.BucketKeyEnabled),\n            () => input.BucketKeyEnabled.toString(),\n        ],\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => {\n                acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];\n                return acc;\n            }, {})),\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/WriteGetObjectResponse\";\n    const query = map({\n        \"x-id\": [, \"WriteGetObjectResponse\"],\n    });\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    let { hostname: resolvedHostname } = await context.endpoint();\n    if (context.disableHostPrefix !== true) {\n        resolvedHostname = \"{RequestRoute}.\" + resolvedHostname;\n        if (input.RequestRoute === undefined) {\n            throw new Error(\"Empty value provided for input host prefix: RequestRoute.\");\n        }\n        resolvedHostname = resolvedHostname.replace(\"{RequestRoute}\", input.RequestRoute);\n        if (!__isValidHostname(resolvedHostname)) {\n            throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n        }\n    }\n    return new __HttpRequest({\n        protocol,\n        hostname: resolvedHostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const de_AbortMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_AbortMultipartUploadCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_AbortMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchUpload\":\n        case \"com.amazonaws.s3#NoSuchUpload\":\n            throw await de_NoSuchUploadRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CompleteMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CompleteMultipartUploadCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(data[\"Bucket\"]);\n    }\n    if (data[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(data[\"ChecksumCRC32\"]);\n    }\n    if (data[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(data[\"ChecksumCRC32C\"]);\n    }\n    if (data[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(data[\"ChecksumSHA1\"]);\n    }\n    if (data[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(data[\"ChecksumSHA256\"]);\n    }\n    if (data[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(data[\"ETag\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = __expectString(data[\"Key\"]);\n    }\n    if (data[\"Location\"] !== undefined) {\n        contents.Location = __expectString(data[\"Location\"]);\n    }\n    return contents;\n};\nconst de_CompleteMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_CopyObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CopyObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        CopySourceVersionId: [, output.headers[\"x-amz-copy-source-version-id\"]],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.CopyObjectResult = de_CopyObjectResult(data, context);\n    return contents;\n};\nconst de_CopyObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ObjectNotInActiveTierError\":\n        case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n            throw await de_ObjectNotInActiveTierErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateBucketCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CreateBucketCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Location: [, output.headers[\"location\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_CreateBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"BucketAlreadyExists\":\n        case \"com.amazonaws.s3#BucketAlreadyExists\":\n            throw await de_BucketAlreadyExistsRes(parsedOutput, context);\n        case \"BucketAlreadyOwnedByYou\":\n        case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n            throw await de_BucketAlreadyOwnedByYouRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CreateMultipartUploadCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        AbortDate: [\n            () => void 0 !== output.headers[\"x-amz-abort-date\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"x-amz-abort-date\"])),\n        ],\n        AbortRuleId: [, output.headers[\"x-amz-abort-rule-id\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        ChecksumAlgorithm: [, output.headers[\"x-amz-checksum-algorithm\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(data[\"Bucket\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = __expectString(data[\"Key\"]);\n    }\n    if (data[\"UploadId\"] !== undefined) {\n        contents.UploadId = __expectString(data[\"UploadId\"]);\n    }\n    return contents;\n};\nconst de_CreateMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketCorsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketEncryptionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketLifecycleCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketLifecycleCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketLifecycleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketPolicyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketReplicationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteBucketWebsiteCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteObjectCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => __parseBoolean(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteObjectsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_DeleteObjectsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.Deleted === \"\") {\n        contents.Deleted = [];\n    }\n    else if (data[\"Deleted\"] !== undefined) {\n        contents.Deleted = de_DeletedObjects(__getArrayIfSingleItem(data[\"Deleted\"]), context);\n    }\n    if (data.Error === \"\") {\n        contents.Errors = [];\n    }\n    else if (data[\"Error\"] !== undefined) {\n        contents.Errors = de_Errors(__getArrayIfSingleItem(data[\"Error\"]), context);\n    }\n    return contents;\n};\nconst de_DeleteObjectsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeleteObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeleteObjectTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeleteObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_DeletePublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return de_DeletePublicAccessBlockCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_DeletePublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketAccelerateConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketAccelerateConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Status\"] !== undefined) {\n        contents.Status = __expectString(data[\"Status\"]);\n    }\n    return contents;\n};\nconst de_GetBucketAccelerateConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.AccessControlList === \"\") {\n        contents.Grants = [];\n    }\n    else if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n        contents.Grants = de_Grants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = de_Owner(data[\"Owner\"], context);\n    }\n    return contents;\n};\nconst de_GetBucketAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data, context);\n    return contents;\n};\nconst de_GetBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketCorsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CORSRule === \"\") {\n        contents.CORSRules = [];\n    }\n    else if (data[\"CORSRule\"] !== undefined) {\n        contents.CORSRules = de_CORSRules(__getArrayIfSingleItem(data[\"CORSRule\"]), context);\n    }\n    return contents;\n};\nconst de_GetBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketEncryptionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data, context);\n    return contents;\n};\nconst de_GetBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data, context);\n    return contents;\n};\nconst de_GetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.InventoryConfiguration = de_InventoryConfiguration(data, context);\n    return contents;\n};\nconst de_GetBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketLifecycleConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketLifecycleConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (data[\"Rule\"] !== undefined) {\n        contents.Rules = de_LifecycleRules(__getArrayIfSingleItem(data[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst de_GetBucketLifecycleConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketLocationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketLocationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"LocationConstraint\"] !== undefined) {\n        contents.LocationConstraint = __expectString(data[\"LocationConstraint\"]);\n    }\n    return contents;\n};\nconst de_GetBucketLocationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketLoggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketLoggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"LoggingEnabled\"] !== undefined) {\n        contents.LoggingEnabled = de_LoggingEnabled(data[\"LoggingEnabled\"], context);\n    }\n    return contents;\n};\nconst de_GetBucketLoggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.MetricsConfiguration = de_MetricsConfiguration(data, context);\n    return contents;\n};\nconst de_GetBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketNotificationConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketNotificationConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"EventBridgeConfiguration\"] !== undefined) {\n        contents.EventBridgeConfiguration = de_EventBridgeConfiguration(data[\"EventBridgeConfiguration\"], context);\n    }\n    if (data.CloudFunctionConfiguration === \"\") {\n        contents.LambdaFunctionConfigurations = [];\n    }\n    else if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n        contents.LambdaFunctionConfigurations = de_LambdaFunctionConfigurationList(__getArrayIfSingleItem(data[\"CloudFunctionConfiguration\"]), context);\n    }\n    if (data.QueueConfiguration === \"\") {\n        contents.QueueConfigurations = [];\n    }\n    else if (data[\"QueueConfiguration\"] !== undefined) {\n        contents.QueueConfigurations = de_QueueConfigurationList(__getArrayIfSingleItem(data[\"QueueConfiguration\"]), context);\n    }\n    if (data.TopicConfiguration === \"\") {\n        contents.TopicConfigurations = [];\n    }\n    else if (data[\"TopicConfiguration\"] !== undefined) {\n        contents.TopicConfigurations = de_TopicConfigurationList(__getArrayIfSingleItem(data[\"TopicConfiguration\"]), context);\n    }\n    return contents;\n};\nconst de_GetBucketNotificationConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.OwnershipControls = de_OwnershipControls(data, context);\n    return contents;\n};\nconst de_GetBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketPolicyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = await collectBodyString(output.body, context);\n    contents.Policy = __expectString(data);\n    return contents;\n};\nconst de_GetBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketPolicyStatusCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketPolicyStatusCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.PolicyStatus = de_PolicyStatus(data, context);\n    return contents;\n};\nconst de_GetBucketPolicyStatusCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketReplicationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.ReplicationConfiguration = de_ReplicationConfiguration(data, context);\n    return contents;\n};\nconst de_GetBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketRequestPaymentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketRequestPaymentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Payer\"] !== undefined) {\n        contents.Payer = __expectString(data[\"Payer\"]);\n    }\n    return contents;\n};\nconst de_GetBucketRequestPaymentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.TagSet === \"\") {\n        contents.TagSet = [];\n    }\n    else if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n        contents.TagSet = de_TagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n    }\n    return contents;\n};\nconst de_GetBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketVersioningCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketVersioningCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"MfaDelete\"] !== undefined) {\n        contents.MFADelete = __expectString(data[\"MfaDelete\"]);\n    }\n    if (data[\"Status\"] !== undefined) {\n        contents.Status = __expectString(data[\"Status\"]);\n    }\n    return contents;\n};\nconst de_GetBucketVersioningCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetBucketWebsiteCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ErrorDocument\"] !== undefined) {\n        contents.ErrorDocument = de_ErrorDocument(data[\"ErrorDocument\"], context);\n    }\n    if (data[\"IndexDocument\"] !== undefined) {\n        contents.IndexDocument = de_IndexDocument(data[\"IndexDocument\"], context);\n    }\n    if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n        contents.RedirectAllRequestsTo = de_RedirectAllRequestsTo(data[\"RedirectAllRequestsTo\"], context);\n    }\n    if (data.RoutingRules === \"\") {\n        contents.RoutingRules = [];\n    }\n    else if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n        contents.RoutingRules = de_RoutingRules(__getArrayIfSingleItem(data[\"RoutingRules\"][\"RoutingRule\"]), context);\n    }\n    return contents;\n};\nconst de_GetBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => __parseBoolean(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        AcceptRanges: [, output.headers[\"accept-ranges\"]],\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        Restore: [, output.headers[\"x-amz-restore\"]],\n        LastModified: [\n            () => void 0 !== output.headers[\"last-modified\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"])),\n        ],\n        ContentLength: [\n            () => void 0 !== output.headers[\"content-length\"],\n            () => __strictParseLong(output.headers[\"content-length\"]),\n        ],\n        ETag: [, output.headers[\"etag\"]],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        MissingMeta: [\n            () => void 0 !== output.headers[\"x-amz-missing-meta\"],\n            () => __strictParseInt32(output.headers[\"x-amz-missing-meta\"]),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        CacheControl: [, output.headers[\"cache-control\"]],\n        ContentDisposition: [, output.headers[\"content-disposition\"]],\n        ContentEncoding: [, output.headers[\"content-encoding\"]],\n        ContentLanguage: [, output.headers[\"content-language\"]],\n        ContentRange: [, output.headers[\"content-range\"]],\n        ContentType: [, output.headers[\"content-type\"]],\n        Expires: [\n            () => void 0 !== output.headers[\"expires\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"expires\"])),\n        ],\n        WebsiteRedirectLocation: [, output.headers[\"x-amz-website-redirect-location\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        StorageClass: [, output.headers[\"x-amz-storage-class\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        ReplicationStatus: [, output.headers[\"x-amz-replication-status\"]],\n        PartsCount: [\n            () => void 0 !== output.headers[\"x-amz-mp-parts-count\"],\n            () => __strictParseInt32(output.headers[\"x-amz-mp-parts-count\"]),\n        ],\n        TagCount: [\n            () => void 0 !== output.headers[\"x-amz-tagging-count\"],\n            () => __strictParseInt32(output.headers[\"x-amz-tagging-count\"]),\n        ],\n        ObjectLockMode: [, output.headers[\"x-amz-object-lock-mode\"]],\n        ObjectLockRetainUntilDate: [\n            () => void 0 !== output.headers[\"x-amz-object-lock-retain-until-date\"],\n            () => __expectNonNull(__parseRfc3339DateTimeWithOffset(output.headers[\"x-amz-object-lock-retain-until-date\"])),\n        ],\n        ObjectLockLegalHoldStatus: [, output.headers[\"x-amz-object-lock-legal-hold\"]],\n        Metadata: [\n            ,\n            Object.keys(output.headers)\n                .filter((header) => header.startsWith(\"x-amz-meta-\"))\n                .reduce((acc, header) => {\n                acc[header.substring(11)] = output.headers[header];\n                return acc;\n            }, {}),\n        ],\n    });\n    const data = output.body;\n    context.sdkStreamMixin(data);\n    contents.Body = data;\n    return contents;\n};\nconst de_GetObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidObjectState\":\n        case \"com.amazonaws.s3#InvalidObjectState\":\n            throw await de_InvalidObjectStateRes(parsedOutput, context);\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await de_NoSuchKeyRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetObjectAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetObjectAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.AccessControlList === \"\") {\n        contents.Grants = [];\n    }\n    else if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n        contents.Grants = de_Grants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = de_Owner(data[\"Owner\"], context);\n    }\n    return contents;\n};\nconst de_GetObjectAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await de_NoSuchKeyRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetObjectAttributesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetObjectAttributesCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => __parseBoolean(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        LastModified: [\n            () => void 0 !== output.headers[\"last-modified\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"])),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Checksum\"] !== undefined) {\n        contents.Checksum = de_Checksum(data[\"Checksum\"], context);\n    }\n    if (data[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(data[\"ETag\"]);\n    }\n    if (data[\"ObjectParts\"] !== undefined) {\n        contents.ObjectParts = de_GetObjectAttributesParts(data[\"ObjectParts\"], context);\n    }\n    if (data[\"ObjectSize\"] !== undefined) {\n        contents.ObjectSize = __strictParseLong(data[\"ObjectSize\"]);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(data[\"StorageClass\"]);\n    }\n    return contents;\n};\nconst de_GetObjectAttributesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await de_NoSuchKeyRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetObjectLegalHoldCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetObjectLegalHoldCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.LegalHold = de_ObjectLockLegalHold(data, context);\n    return contents;\n};\nconst de_GetObjectLegalHoldCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetObjectLockConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetObjectLockConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data, context);\n    return contents;\n};\nconst de_GetObjectLockConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetObjectRetentionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetObjectRetentionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.Retention = de_ObjectLockRetention(data, context);\n    return contents;\n};\nconst de_GetObjectRetentionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetObjectTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.TagSet === \"\") {\n        contents.TagSet = [];\n    }\n    else if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n        contents.TagSet = de_TagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n    }\n    return contents;\n};\nconst de_GetObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetObjectTorrentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetObjectTorrentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = output.body;\n    context.sdkStreamMixin(data);\n    contents.Body = data;\n    return contents;\n};\nconst de_GetObjectTorrentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_GetPublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetPublicAccessBlockCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);\n    return contents;\n};\nconst de_GetPublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_HeadBucketCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_HeadBucketCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_HeadBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NotFound\":\n        case \"com.amazonaws.s3#NotFound\":\n            throw await de_NotFoundRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_HeadObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_HeadObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: [\n            () => void 0 !== output.headers[\"x-amz-delete-marker\"],\n            () => __parseBoolean(output.headers[\"x-amz-delete-marker\"]),\n        ],\n        AcceptRanges: [, output.headers[\"accept-ranges\"]],\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        Restore: [, output.headers[\"x-amz-restore\"]],\n        ArchiveStatus: [, output.headers[\"x-amz-archive-status\"]],\n        LastModified: [\n            () => void 0 !== output.headers[\"last-modified\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"last-modified\"])),\n        ],\n        ContentLength: [\n            () => void 0 !== output.headers[\"content-length\"],\n            () => __strictParseLong(output.headers[\"content-length\"]),\n        ],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        ETag: [, output.headers[\"etag\"]],\n        MissingMeta: [\n            () => void 0 !== output.headers[\"x-amz-missing-meta\"],\n            () => __strictParseInt32(output.headers[\"x-amz-missing-meta\"]),\n        ],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        CacheControl: [, output.headers[\"cache-control\"]],\n        ContentDisposition: [, output.headers[\"content-disposition\"]],\n        ContentEncoding: [, output.headers[\"content-encoding\"]],\n        ContentLanguage: [, output.headers[\"content-language\"]],\n        ContentType: [, output.headers[\"content-type\"]],\n        Expires: [\n            () => void 0 !== output.headers[\"expires\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"expires\"])),\n        ],\n        WebsiteRedirectLocation: [, output.headers[\"x-amz-website-redirect-location\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        StorageClass: [, output.headers[\"x-amz-storage-class\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        ReplicationStatus: [, output.headers[\"x-amz-replication-status\"]],\n        PartsCount: [\n            () => void 0 !== output.headers[\"x-amz-mp-parts-count\"],\n            () => __strictParseInt32(output.headers[\"x-amz-mp-parts-count\"]),\n        ],\n        ObjectLockMode: [, output.headers[\"x-amz-object-lock-mode\"]],\n        ObjectLockRetainUntilDate: [\n            () => void 0 !== output.headers[\"x-amz-object-lock-retain-until-date\"],\n            () => __expectNonNull(__parseRfc3339DateTimeWithOffset(output.headers[\"x-amz-object-lock-retain-until-date\"])),\n        ],\n        ObjectLockLegalHoldStatus: [, output.headers[\"x-amz-object-lock-legal-hold\"]],\n        Metadata: [\n            ,\n            Object.keys(output.headers)\n                .filter((header) => header.startsWith(\"x-amz-meta-\"))\n                .reduce((acc, header) => {\n                acc[header.substring(11)] = output.headers[header];\n                return acc;\n            }, {}),\n        ],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_HeadObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NotFound\":\n        case \"com.amazonaws.s3#NotFound\":\n            throw await de_NotFoundRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListBucketAnalyticsConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListBucketAnalyticsConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.AnalyticsConfiguration === \"\") {\n        contents.AnalyticsConfigurationList = [];\n    }\n    else if (data[\"AnalyticsConfiguration\"] !== undefined) {\n        contents.AnalyticsConfigurationList = de_AnalyticsConfigurationList(__getArrayIfSingleItem(data[\"AnalyticsConfiguration\"]), context);\n    }\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst de_ListBucketAnalyticsConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_ListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListBucketIntelligentTieringConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n    }\n    if (data.IntelligentTieringConfiguration === \"\") {\n        contents.IntelligentTieringConfigurationList = [];\n    }\n    else if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n        contents.IntelligentTieringConfigurationList = de_IntelligentTieringConfigurationList(__getArrayIfSingleItem(data[\"IntelligentTieringConfiguration\"]), context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst de_ListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_ListBucketInventoryConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListBucketInventoryConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n    }\n    if (data.InventoryConfiguration === \"\") {\n        contents.InventoryConfigurationList = [];\n    }\n    else if (data[\"InventoryConfiguration\"] !== undefined) {\n        contents.InventoryConfigurationList = de_InventoryConfigurationList(__getArrayIfSingleItem(data[\"InventoryConfiguration\"]), context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst de_ListBucketInventoryConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_ListBucketMetricsConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListBucketMetricsConfigurationsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data.MetricsConfiguration === \"\") {\n        contents.MetricsConfigurationList = [];\n    }\n    else if (data[\"MetricsConfiguration\"] !== undefined) {\n        contents.MetricsConfigurationList = de_MetricsConfigurationList(__getArrayIfSingleItem(data[\"MetricsConfiguration\"]), context);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n    }\n    return contents;\n};\nconst de_ListBucketMetricsConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_ListBucketsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListBucketsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.Buckets === \"\") {\n        contents.Buckets = [];\n    }\n    else if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n        contents.Buckets = de_Buckets(__getArrayIfSingleItem(data[\"Buckets\"][\"Bucket\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = de_Owner(data[\"Owner\"], context);\n    }\n    return contents;\n};\nconst de_ListBucketsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_ListMultipartUploadsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListMultipartUploadsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(data[\"Bucket\"]);\n    }\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = de_CommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = __expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = __expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyMarker\"] !== undefined) {\n        contents.KeyMarker = __expectString(data[\"KeyMarker\"]);\n    }\n    if (data[\"MaxUploads\"] !== undefined) {\n        contents.MaxUploads = __strictParseInt32(data[\"MaxUploads\"]);\n    }\n    if (data[\"NextKeyMarker\"] !== undefined) {\n        contents.NextKeyMarker = __expectString(data[\"NextKeyMarker\"]);\n    }\n    if (data[\"NextUploadIdMarker\"] !== undefined) {\n        contents.NextUploadIdMarker = __expectString(data[\"NextUploadIdMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(data[\"Prefix\"]);\n    }\n    if (data[\"UploadIdMarker\"] !== undefined) {\n        contents.UploadIdMarker = __expectString(data[\"UploadIdMarker\"]);\n    }\n    if (data.Upload === \"\") {\n        contents.Uploads = [];\n    }\n    else if (data[\"Upload\"] !== undefined) {\n        contents.Uploads = de_MultipartUploadList(__getArrayIfSingleItem(data[\"Upload\"]), context);\n    }\n    return contents;\n};\nconst de_ListMultipartUploadsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_ListObjectsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListObjectsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = de_CommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.Contents === \"\") {\n        contents.Contents = [];\n    }\n    else if (data[\"Contents\"] !== undefined) {\n        contents.Contents = de_ObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = __expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = __expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"Marker\"] !== undefined) {\n        contents.Marker = __expectString(data[\"Marker\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = __expectString(data[\"Name\"]);\n    }\n    if (data[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = __expectString(data[\"NextMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(data[\"Prefix\"]);\n    }\n    return contents;\n};\nconst de_ListObjectsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchBucket\":\n        case \"com.amazonaws.s3#NoSuchBucket\":\n            throw await de_NoSuchBucketRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListObjectsV2Command = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListObjectsV2CommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = de_CommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.Contents === \"\") {\n        contents.Contents = [];\n    }\n    else if (data[\"Contents\"] !== undefined) {\n        contents.Contents = de_ObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n    }\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = __expectString(data[\"ContinuationToken\"]);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = __expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = __expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyCount\"] !== undefined) {\n        contents.KeyCount = __strictParseInt32(data[\"KeyCount\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = __expectString(data[\"Name\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = __expectString(data[\"NextContinuationToken\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(data[\"Prefix\"]);\n    }\n    if (data[\"StartAfter\"] !== undefined) {\n        contents.StartAfter = __expectString(data[\"StartAfter\"]);\n    }\n    return contents;\n};\nconst de_ListObjectsV2CommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchBucket\":\n        case \"com.amazonaws.s3#NoSuchBucket\":\n            throw await de_NoSuchBucketRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListObjectVersionsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListObjectVersionsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    else if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = de_CommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.DeleteMarker === \"\") {\n        contents.DeleteMarkers = [];\n    }\n    else if (data[\"DeleteMarker\"] !== undefined) {\n        contents.DeleteMarkers = de_DeleteMarkers(__getArrayIfSingleItem(data[\"DeleteMarker\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = __expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = __expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyMarker\"] !== undefined) {\n        contents.KeyMarker = __expectString(data[\"KeyMarker\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = __strictParseInt32(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = __expectString(data[\"Name\"]);\n    }\n    if (data[\"NextKeyMarker\"] !== undefined) {\n        contents.NextKeyMarker = __expectString(data[\"NextKeyMarker\"]);\n    }\n    if (data[\"NextVersionIdMarker\"] !== undefined) {\n        contents.NextVersionIdMarker = __expectString(data[\"NextVersionIdMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(data[\"Prefix\"]);\n    }\n    if (data[\"VersionIdMarker\"] !== undefined) {\n        contents.VersionIdMarker = __expectString(data[\"VersionIdMarker\"]);\n    }\n    if (data.Version === \"\") {\n        contents.Versions = [];\n    }\n    else if (data[\"Version\"] !== undefined) {\n        contents.Versions = de_ObjectVersionList(__getArrayIfSingleItem(data[\"Version\"]), context);\n    }\n    return contents;\n};\nconst de_ListObjectVersionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_ListPartsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListPartsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        AbortDate: [\n            () => void 0 !== output.headers[\"x-amz-abort-date\"],\n            () => __expectNonNull(__parseRfc7231DateTime(output.headers[\"x-amz-abort-date\"])),\n        ],\n        AbortRuleId: [, output.headers[\"x-amz-abort-rule-id\"]],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(data[\"Bucket\"]);\n    }\n    if (data[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = __expectString(data[\"ChecksumAlgorithm\"]);\n    }\n    if (data[\"Initiator\"] !== undefined) {\n        contents.Initiator = de_Initiator(data[\"Initiator\"], context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = __expectString(data[\"Key\"]);\n    }\n    if (data[\"MaxParts\"] !== undefined) {\n        contents.MaxParts = __strictParseInt32(data[\"MaxParts\"]);\n    }\n    if (data[\"NextPartNumberMarker\"] !== undefined) {\n        contents.NextPartNumberMarker = __expectString(data[\"NextPartNumberMarker\"]);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = de_Owner(data[\"Owner\"], context);\n    }\n    if (data[\"PartNumberMarker\"] !== undefined) {\n        contents.PartNumberMarker = __expectString(data[\"PartNumberMarker\"]);\n    }\n    if (data.Part === \"\") {\n        contents.Parts = [];\n    }\n    else if (data[\"Part\"] !== undefined) {\n        contents.Parts = de_Parts(__getArrayIfSingleItem(data[\"Part\"]), context);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(data[\"StorageClass\"]);\n    }\n    if (data[\"UploadId\"] !== undefined) {\n        contents.UploadId = __expectString(data[\"UploadId\"]);\n    }\n    return contents;\n};\nconst de_ListPartsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketAccelerateConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketAccelerateConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketAccelerateConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketCorsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketEncryptionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketLifecycleConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketLifecycleConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketLifecycleConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketLoggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketLoggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketLoggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketNotificationConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketNotificationConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketNotificationConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketPolicyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketReplicationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketRequestPaymentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketRequestPaymentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketRequestPaymentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketVersioningCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketVersioningCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketVersioningCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutBucketWebsiteCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        Expiration: [, output.headers[\"x-amz-expiration\"]],\n        ETag: [, output.headers[\"etag\"]],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        SSEKMSEncryptionContext: [, output.headers[\"x-amz-server-side-encryption-context\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutObjectAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutObjectAclCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutObjectAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            throw await de_NoSuchKeyRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutObjectLegalHoldCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutObjectLegalHoldCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutObjectLegalHoldCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutObjectLockConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutObjectLockConfigurationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutObjectLockConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutObjectRetentionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutObjectRetentionCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutObjectRetentionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutObjectTaggingCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        VersionId: [, output.headers[\"x-amz-version-id\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_PutPublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_PutPublicAccessBlockCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_PutPublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_RestoreObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_RestoreObjectCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n        RestoreOutputPath: [, output.headers[\"x-amz-restore-output-path\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_RestoreObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ObjectAlreadyInActiveTierError\":\n        case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n            throw await de_ObjectAlreadyInActiveTierErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_SelectObjectContentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_SelectObjectContentCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = output.body;\n    contents.Payload = de_SelectObjectContentEventStream(data, context);\n    return contents;\n};\nconst de_SelectObjectContentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_UploadPartCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_UploadPartCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        ETag: [, output.headers[\"etag\"]],\n        ChecksumCRC32: [, output.headers[\"x-amz-checksum-crc32\"]],\n        ChecksumCRC32C: [, output.headers[\"x-amz-checksum-crc32c\"]],\n        ChecksumSHA1: [, output.headers[\"x-amz-checksum-sha1\"]],\n        ChecksumSHA256: [, output.headers[\"x-amz-checksum-sha256\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_UploadPartCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_UploadPartCopyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_UploadPartCopyCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n        CopySourceVersionId: [, output.headers[\"x-amz-copy-source-version-id\"]],\n        ServerSideEncryption: [, output.headers[\"x-amz-server-side-encryption\"]],\n        SSECustomerAlgorithm: [, output.headers[\"x-amz-server-side-encryption-customer-algorithm\"]],\n        SSECustomerKeyMD5: [, output.headers[\"x-amz-server-side-encryption-customer-key-md5\"]],\n        SSEKMSKeyId: [, output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"]],\n        BucketKeyEnabled: [\n            () => void 0 !== output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"],\n            () => __parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]),\n        ],\n        RequestCharged: [, output.headers[\"x-amz-request-charged\"]],\n    });\n    const data = __expectObject(await parseBody(output.body, context));\n    contents.CopyPartResult = de_CopyPartResult(data, context);\n    return contents;\n};\nconst de_UploadPartCopyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nexport const de_WriteGetObjectResponseCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_WriteGetObjectResponseCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_WriteGetObjectResponseCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody,\n        errorCode,\n    });\n};\nconst throwDefaultError = withBaseException(__BaseException);\nconst de_BucketAlreadyExistsRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new BucketAlreadyExists({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_BucketAlreadyOwnedByYouRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new BucketAlreadyOwnedByYou({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidObjectStateRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    if (data[\"AccessTier\"] !== undefined) {\n        contents.AccessTier = __expectString(data[\"AccessTier\"]);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(data[\"StorageClass\"]);\n    }\n    const exception = new InvalidObjectState({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_NoSuchBucketRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new NoSuchBucket({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_NoSuchKeyRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new NoSuchKey({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_NoSuchUploadRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new NoSuchUpload({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_NotFoundRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new NotFound({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ObjectAlreadyInActiveTierErrorRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new ObjectAlreadyInActiveTierError({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ObjectNotInActiveTierErrorRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const exception = new ObjectNotInActiveTierError({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_SelectObjectContentEventStream = (output, context) => {\n    return context.eventStreamMarshaller.deserialize(output, async (event) => {\n        if (event[\"Records\"] != null) {\n            return {\n                Records: await de_RecordsEvent_event(event[\"Records\"], context),\n            };\n        }\n        if (event[\"Stats\"] != null) {\n            return {\n                Stats: await de_StatsEvent_event(event[\"Stats\"], context),\n            };\n        }\n        if (event[\"Progress\"] != null) {\n            return {\n                Progress: await de_ProgressEvent_event(event[\"Progress\"], context),\n            };\n        }\n        if (event[\"Cont\"] != null) {\n            return {\n                Cont: await de_ContinuationEvent_event(event[\"Cont\"], context),\n            };\n        }\n        if (event[\"End\"] != null) {\n            return {\n                End: await de_EndEvent_event(event[\"End\"], context),\n            };\n        }\n        return { $unknown: output };\n    });\n};\nconst de_ContinuationEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_ContinuationEvent(data, context));\n    return contents;\n};\nconst de_EndEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    Object.assign(contents, de_EndEvent(data, context));\n    return contents;\n};\nconst de_ProgressEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    contents.Details = de_Progress(data, context);\n    return contents;\n};\nconst de_RecordsEvent_event = async (output, context) => {\n    const contents = {};\n    contents.Payload = output.body;\n    return contents;\n};\nconst de_StatsEvent_event = async (output, context) => {\n    const contents = {};\n    const data = await parseBody(output.body, context);\n    contents.Details = de_Stats(data, context);\n    return contents;\n};\nconst se_AbortIncompleteMultipartUpload = (input, context) => {\n    const bodyNode = new __XmlNode(\"AbortIncompleteMultipartUpload\");\n    if (input.DaysAfterInitiation != null) {\n        const node = __XmlNode.of(\"DaysAfterInitiation\", String(input.DaysAfterInitiation)).withName(\"DaysAfterInitiation\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_AccelerateConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"AccelerateConfiguration\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"BucketAccelerateStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_AccessControlPolicy = (input, context) => {\n    const bodyNode = new __XmlNode(\"AccessControlPolicy\");\n    if (input.Grants != null) {\n        const nodes = se_Grants(input.Grants, context);\n        const containerNode = new __XmlNode(\"AccessControlList\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Owner != null) {\n        const node = se_Owner(input.Owner, context).withName(\"Owner\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_AccessControlTranslation = (input, context) => {\n    const bodyNode = new __XmlNode(\"AccessControlTranslation\");\n    if (input.Owner != null) {\n        const node = __XmlNode.of(\"OwnerOverride\", input.Owner).withName(\"Owner\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_AllowedHeaders = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"AllowedHeader\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst se_AllowedMethods = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"AllowedMethod\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst se_AllowedOrigins = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"AllowedOrigin\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst se_AnalyticsAndOperator = (input, context) => {\n    const bodyNode = new __XmlNode(\"AnalyticsAndOperator\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = se_TagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_AnalyticsConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"AnalyticsConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"AnalyticsId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = se_AnalyticsFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClassAnalysis != null) {\n        const node = se_StorageClassAnalysis(input.StorageClassAnalysis, context).withName(\"StorageClassAnalysis\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_AnalyticsExportDestination = (input, context) => {\n    const bodyNode = new __XmlNode(\"AnalyticsExportDestination\");\n    if (input.S3BucketDestination != null) {\n        const node = se_AnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_AnalyticsFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"AnalyticsFilter\");\n    AnalyticsFilter.visit(input, {\n        Prefix: (value) => {\n            const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = se_Tag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = se_AnalyticsAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst se_AnalyticsS3BucketDestination = (input, context) => {\n    const bodyNode = new __XmlNode(\"AnalyticsS3BucketDestination\");\n    if (input.Format != null) {\n        const node = __XmlNode.of(\"AnalyticsS3ExportFileFormat\", input.Format).withName(\"Format\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BucketAccountId != null) {\n        const node = __XmlNode.of(\"AccountId\", input.BucketAccountId).withName(\"BucketAccountId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Bucket != null) {\n        const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_BucketLifecycleConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"BucketLifecycleConfiguration\");\n    if (input.Rules != null) {\n        const nodes = se_LifecycleRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_BucketLoggingStatus = (input, context) => {\n    const bodyNode = new __XmlNode(\"BucketLoggingStatus\");\n    if (input.LoggingEnabled != null) {\n        const node = se_LoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_CompletedMultipartUpload = (input, context) => {\n    const bodyNode = new __XmlNode(\"CompletedMultipartUpload\");\n    if (input.Parts != null) {\n        const nodes = se_CompletedPartList(input.Parts, context);\n        nodes.map((node) => {\n            node = node.withName(\"Part\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_CompletedPart = (input, context) => {\n    const bodyNode = new __XmlNode(\"CompletedPart\");\n    if (input.ETag != null) {\n        const node = __XmlNode.of(\"ETag\", input.ETag).withName(\"ETag\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumCRC32 != null) {\n        const node = __XmlNode.of(\"ChecksumCRC32\", input.ChecksumCRC32).withName(\"ChecksumCRC32\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumCRC32C != null) {\n        const node = __XmlNode.of(\"ChecksumCRC32C\", input.ChecksumCRC32C).withName(\"ChecksumCRC32C\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumSHA1 != null) {\n        const node = __XmlNode.of(\"ChecksumSHA1\", input.ChecksumSHA1).withName(\"ChecksumSHA1\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ChecksumSHA256 != null) {\n        const node = __XmlNode.of(\"ChecksumSHA256\", input.ChecksumSHA256).withName(\"ChecksumSHA256\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.PartNumber != null) {\n        const node = __XmlNode.of(\"PartNumber\", String(input.PartNumber)).withName(\"PartNumber\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_CompletedPartList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_CompletedPart(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_Condition = (input, context) => {\n    const bodyNode = new __XmlNode(\"Condition\");\n    if (input.HttpErrorCodeReturnedEquals != null) {\n        const node = __XmlNode\n            .of(\"HttpErrorCodeReturnedEquals\", input.HttpErrorCodeReturnedEquals)\n            .withName(\"HttpErrorCodeReturnedEquals\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KeyPrefixEquals != null) {\n        const node = __XmlNode.of(\"KeyPrefixEquals\", input.KeyPrefixEquals).withName(\"KeyPrefixEquals\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_CORSConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"CORSConfiguration\");\n    if (input.CORSRules != null) {\n        const nodes = se_CORSRules(input.CORSRules, context);\n        nodes.map((node) => {\n            node = node.withName(\"CORSRule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_CORSRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"CORSRule\");\n    if (input.ID != null) {\n        const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AllowedHeaders != null) {\n        const nodes = se_AllowedHeaders(input.AllowedHeaders, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedHeader\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AllowedMethods != null) {\n        const nodes = se_AllowedMethods(input.AllowedMethods, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedMethod\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AllowedOrigins != null) {\n        const nodes = se_AllowedOrigins(input.AllowedOrigins, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedOrigin\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.ExposeHeaders != null) {\n        const nodes = se_ExposeHeaders(input.ExposeHeaders, context);\n        nodes.map((node) => {\n            node = node.withName(\"ExposeHeader\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.MaxAgeSeconds != null) {\n        const node = __XmlNode.of(\"MaxAgeSeconds\", String(input.MaxAgeSeconds)).withName(\"MaxAgeSeconds\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_CORSRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_CORSRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_CreateBucketConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"CreateBucketConfiguration\");\n    if (input.LocationConstraint != null) {\n        const node = __XmlNode.of(\"BucketLocationConstraint\", input.LocationConstraint).withName(\"LocationConstraint\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_CSVInput = (input, context) => {\n    const bodyNode = new __XmlNode(\"CSVInput\");\n    if (input.FileHeaderInfo != null) {\n        const node = __XmlNode.of(\"FileHeaderInfo\", input.FileHeaderInfo).withName(\"FileHeaderInfo\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Comments != null) {\n        const node = __XmlNode.of(\"Comments\", input.Comments).withName(\"Comments\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteEscapeCharacter != null) {\n        const node = __XmlNode.of(\"QuoteEscapeCharacter\", input.QuoteEscapeCharacter).withName(\"QuoteEscapeCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RecordDelimiter != null) {\n        const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldDelimiter != null) {\n        const node = __XmlNode.of(\"FieldDelimiter\", input.FieldDelimiter).withName(\"FieldDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteCharacter != null) {\n        const node = __XmlNode.of(\"QuoteCharacter\", input.QuoteCharacter).withName(\"QuoteCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AllowQuotedRecordDelimiter != null) {\n        const node = __XmlNode\n            .of(\"AllowQuotedRecordDelimiter\", String(input.AllowQuotedRecordDelimiter))\n            .withName(\"AllowQuotedRecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_CSVOutput = (input, context) => {\n    const bodyNode = new __XmlNode(\"CSVOutput\");\n    if (input.QuoteFields != null) {\n        const node = __XmlNode.of(\"QuoteFields\", input.QuoteFields).withName(\"QuoteFields\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteEscapeCharacter != null) {\n        const node = __XmlNode.of(\"QuoteEscapeCharacter\", input.QuoteEscapeCharacter).withName(\"QuoteEscapeCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RecordDelimiter != null) {\n        const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldDelimiter != null) {\n        const node = __XmlNode.of(\"FieldDelimiter\", input.FieldDelimiter).withName(\"FieldDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteCharacter != null) {\n        const node = __XmlNode.of(\"QuoteCharacter\", input.QuoteCharacter).withName(\"QuoteCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_DefaultRetention = (input, context) => {\n    const bodyNode = new __XmlNode(\"DefaultRetention\");\n    if (input.Mode != null) {\n        const node = __XmlNode.of(\"ObjectLockRetentionMode\", input.Mode).withName(\"Mode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days != null) {\n        const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Years != null) {\n        const node = __XmlNode.of(\"Years\", String(input.Years)).withName(\"Years\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_Delete = (input, context) => {\n    const bodyNode = new __XmlNode(\"Delete\");\n    if (input.Objects != null) {\n        const nodes = se_ObjectIdentifierList(input.Objects, context);\n        nodes.map((node) => {\n            node = node.withName(\"Object\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Quiet != null) {\n        const node = __XmlNode.of(\"Quiet\", String(input.Quiet)).withName(\"Quiet\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_DeleteMarkerReplication = (input, context) => {\n    const bodyNode = new __XmlNode(\"DeleteMarkerReplication\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"DeleteMarkerReplicationStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_Destination = (input, context) => {\n    const bodyNode = new __XmlNode(\"Destination\");\n    if (input.Bucket != null) {\n        const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Account != null) {\n        const node = __XmlNode.of(\"AccountId\", input.Account).withName(\"Account\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass != null) {\n        const node = __XmlNode.of(\"StorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlTranslation != null) {\n        const node = se_AccessControlTranslation(input.AccessControlTranslation, context).withName(\"AccessControlTranslation\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EncryptionConfiguration != null) {\n        const node = se_EncryptionConfiguration(input.EncryptionConfiguration, context).withName(\"EncryptionConfiguration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplicationTime != null) {\n        const node = se_ReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Metrics != null) {\n        const node = se_Metrics(input.Metrics, context).withName(\"Metrics\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_Encryption = (input, context) => {\n    const bodyNode = new __XmlNode(\"Encryption\");\n    if (input.EncryptionType != null) {\n        const node = __XmlNode.of(\"ServerSideEncryption\", input.EncryptionType).withName(\"EncryptionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSKeyId != null) {\n        const node = __XmlNode.of(\"SSEKMSKeyId\", input.KMSKeyId).withName(\"KMSKeyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSContext != null) {\n        const node = __XmlNode.of(\"KMSContext\", input.KMSContext).withName(\"KMSContext\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_EncryptionConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"EncryptionConfiguration\");\n    if (input.ReplicaKmsKeyID != null) {\n        const node = __XmlNode.of(\"ReplicaKmsKeyID\", input.ReplicaKmsKeyID).withName(\"ReplicaKmsKeyID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ErrorDocument = (input, context) => {\n    const bodyNode = new __XmlNode(\"ErrorDocument\");\n    if (input.Key != null) {\n        const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_EventBridgeConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"EventBridgeConfiguration\");\n    return bodyNode;\n};\nconst se_EventList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"Event\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst se_ExistingObjectReplication = (input, context) => {\n    const bodyNode = new __XmlNode(\"ExistingObjectReplication\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ExistingObjectReplicationStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ExposeHeaders = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"ExposeHeader\", entry);\n        return node.withName(\"member\");\n    });\n};\nconst se_FilterRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"FilterRule\");\n    if (input.Name != null) {\n        const node = __XmlNode.of(\"FilterRuleName\", input.Name).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value != null) {\n        const node = __XmlNode.of(\"FilterRuleValue\", input.Value).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_FilterRuleList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_FilterRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_GlacierJobParameters = (input, context) => {\n    const bodyNode = new __XmlNode(\"GlacierJobParameters\");\n    if (input.Tier != null) {\n        const node = __XmlNode.of(\"Tier\", input.Tier).withName(\"Tier\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_Grant = (input, context) => {\n    const bodyNode = new __XmlNode(\"Grant\");\n    if (input.Grantee != null) {\n        const node = se_Grantee(input.Grantee, context).withName(\"Grantee\");\n        node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Permission != null) {\n        const node = __XmlNode.of(\"Permission\", input.Permission).withName(\"Permission\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_Grantee = (input, context) => {\n    const bodyNode = new __XmlNode(\"Grantee\");\n    if (input.DisplayName != null) {\n        const node = __XmlNode.of(\"DisplayName\", input.DisplayName).withName(\"DisplayName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EmailAddress != null) {\n        const node = __XmlNode.of(\"EmailAddress\", input.EmailAddress).withName(\"EmailAddress\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID != null) {\n        const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.URI != null) {\n        const node = __XmlNode.of(\"URI\", input.URI).withName(\"URI\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Type != null) {\n        bodyNode.addAttribute(\"xsi:type\", input.Type);\n    }\n    return bodyNode;\n};\nconst se_Grants = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_Grant(entry, context);\n        return node.withName(\"Grant\");\n    });\n};\nconst se_IndexDocument = (input, context) => {\n    const bodyNode = new __XmlNode(\"IndexDocument\");\n    if (input.Suffix != null) {\n        const node = __XmlNode.of(\"Suffix\", input.Suffix).withName(\"Suffix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_InputSerialization = (input, context) => {\n    const bodyNode = new __XmlNode(\"InputSerialization\");\n    if (input.CSV != null) {\n        const node = se_CSVInput(input.CSV, context).withName(\"CSV\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CompressionType != null) {\n        const node = __XmlNode.of(\"CompressionType\", input.CompressionType).withName(\"CompressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.JSON != null) {\n        const node = se_JSONInput(input.JSON, context).withName(\"JSON\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Parquet != null) {\n        const node = se_ParquetInput(input.Parquet, context).withName(\"Parquet\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_IntelligentTieringAndOperator = (input, context) => {\n    const bodyNode = new __XmlNode(\"IntelligentTieringAndOperator\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = se_TagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_IntelligentTieringConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"IntelligentTieringConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"IntelligentTieringId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = se_IntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"IntelligentTieringStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tierings != null) {\n        const nodes = se_TieringList(input.Tierings, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tiering\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_IntelligentTieringFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"IntelligentTieringFilter\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tag != null) {\n        const node = se_Tag(input.Tag, context).withName(\"Tag\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.And != null) {\n        const node = se_IntelligentTieringAndOperator(input.And, context).withName(\"And\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_InventoryConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventoryConfiguration\");\n    if (input.Destination != null) {\n        const node = se_InventoryDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IsEnabled != null) {\n        const node = __XmlNode.of(\"IsEnabled\", String(input.IsEnabled)).withName(\"IsEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = se_InventoryFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"InventoryId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IncludedObjectVersions != null) {\n        const node = __XmlNode\n            .of(\"InventoryIncludedObjectVersions\", input.IncludedObjectVersions)\n            .withName(\"IncludedObjectVersions\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OptionalFields != null) {\n        const nodes = se_InventoryOptionalFields(input.OptionalFields, context);\n        const containerNode = new __XmlNode(\"OptionalFields\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Schedule != null) {\n        const node = se_InventorySchedule(input.Schedule, context).withName(\"Schedule\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_InventoryDestination = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventoryDestination\");\n    if (input.S3BucketDestination != null) {\n        const node = se_InventoryS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_InventoryEncryption = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventoryEncryption\");\n    if (input.SSES3 != null) {\n        const node = se_SSES3(input.SSES3, context).withName(\"SSE-S3\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SSEKMS != null) {\n        const node = se_SSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_InventoryFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventoryFilter\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_InventoryOptionalFields = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = __XmlNode.of(\"InventoryOptionalField\", entry);\n        return node.withName(\"Field\");\n    });\n};\nconst se_InventoryS3BucketDestination = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventoryS3BucketDestination\");\n    if (input.AccountId != null) {\n        const node = __XmlNode.of(\"AccountId\", input.AccountId).withName(\"AccountId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Bucket != null) {\n        const node = __XmlNode.of(\"BucketName\", input.Bucket).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Format != null) {\n        const node = __XmlNode.of(\"InventoryFormat\", input.Format).withName(\"Format\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Encryption != null) {\n        const node = se_InventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_InventorySchedule = (input, context) => {\n    const bodyNode = new __XmlNode(\"InventorySchedule\");\n    if (input.Frequency != null) {\n        const node = __XmlNode.of(\"InventoryFrequency\", input.Frequency).withName(\"Frequency\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_JSONInput = (input, context) => {\n    const bodyNode = new __XmlNode(\"JSONInput\");\n    if (input.Type != null) {\n        const node = __XmlNode.of(\"JSONType\", input.Type).withName(\"Type\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_JSONOutput = (input, context) => {\n    const bodyNode = new __XmlNode(\"JSONOutput\");\n    if (input.RecordDelimiter != null) {\n        const node = __XmlNode.of(\"RecordDelimiter\", input.RecordDelimiter).withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_LambdaFunctionConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"LambdaFunctionConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.LambdaFunctionArn != null) {\n        const node = __XmlNode.of(\"LambdaFunctionArn\", input.LambdaFunctionArn).withName(\"CloudFunction\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events != null) {\n        const nodes = se_EventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter != null) {\n        const node = se_NotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_LambdaFunctionConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_LambdaFunctionConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_LifecycleExpiration = (input, context) => {\n    const bodyNode = new __XmlNode(\"LifecycleExpiration\");\n    if (input.Date != null) {\n        const node = __XmlNode.of(\"Date\", (input.Date.toISOString().split(\".\")[0] + \"Z\").toString()).withName(\"Date\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days != null) {\n        const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpiredObjectDeleteMarker != null) {\n        const node = __XmlNode\n            .of(\"ExpiredObjectDeleteMarker\", String(input.ExpiredObjectDeleteMarker))\n            .withName(\"ExpiredObjectDeleteMarker\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_LifecycleRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"LifecycleRule\");\n    if (input.Expiration != null) {\n        const node = se_LifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID != null) {\n        const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = se_LifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ExpirationStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Transitions != null) {\n        const nodes = se_TransitionList(input.Transitions, context);\n        nodes.map((node) => {\n            node = node.withName(\"Transition\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.NoncurrentVersionTransitions != null) {\n        const nodes = se_NoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n        nodes.map((node) => {\n            node = node.withName(\"NoncurrentVersionTransition\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.NoncurrentVersionExpiration != null) {\n        const node = se_NoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\"NoncurrentVersionExpiration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AbortIncompleteMultipartUpload != null) {\n        const node = se_AbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName(\"AbortIncompleteMultipartUpload\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_LifecycleRuleAndOperator = (input, context) => {\n    const bodyNode = new __XmlNode(\"LifecycleRuleAndOperator\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = se_TagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.ObjectSizeGreaterThan != null) {\n        const node = __XmlNode\n            .of(\"ObjectSizeGreaterThanBytes\", String(input.ObjectSizeGreaterThan))\n            .withName(\"ObjectSizeGreaterThan\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ObjectSizeLessThan != null) {\n        const node = __XmlNode\n            .of(\"ObjectSizeLessThanBytes\", String(input.ObjectSizeLessThan))\n            .withName(\"ObjectSizeLessThan\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_LifecycleRuleFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"LifecycleRuleFilter\");\n    LifecycleRuleFilter.visit(input, {\n        Prefix: (value) => {\n            const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = se_Tag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        ObjectSizeGreaterThan: (value) => {\n            const node = __XmlNode.of(\"ObjectSizeGreaterThanBytes\", String(value)).withName(\"ObjectSizeGreaterThan\");\n            bodyNode.addChildNode(node);\n        },\n        ObjectSizeLessThan: (value) => {\n            const node = __XmlNode.of(\"ObjectSizeLessThanBytes\", String(value)).withName(\"ObjectSizeLessThan\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = se_LifecycleRuleAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst se_LifecycleRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_LifecycleRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_LoggingEnabled = (input, context) => {\n    const bodyNode = new __XmlNode(\"LoggingEnabled\");\n    if (input.TargetBucket != null) {\n        const node = __XmlNode.of(\"TargetBucket\", input.TargetBucket).withName(\"TargetBucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TargetGrants != null) {\n        const nodes = se_TargetGrants(input.TargetGrants, context);\n        const containerNode = new __XmlNode(\"TargetGrants\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.TargetPrefix != null) {\n        const node = __XmlNode.of(\"TargetPrefix\", input.TargetPrefix).withName(\"TargetPrefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_MetadataEntry = (input, context) => {\n    const bodyNode = new __XmlNode(\"MetadataEntry\");\n    if (input.Name != null) {\n        const node = __XmlNode.of(\"MetadataKey\", input.Name).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value != null) {\n        const node = __XmlNode.of(\"MetadataValue\", input.Value).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_Metrics = (input, context) => {\n    const bodyNode = new __XmlNode(\"Metrics\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"MetricsStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EventThreshold != null) {\n        const node = se_ReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_MetricsAndOperator = (input, context) => {\n    const bodyNode = new __XmlNode(\"MetricsAndOperator\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = se_TagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AccessPointArn != null) {\n        const node = __XmlNode.of(\"AccessPointArn\", input.AccessPointArn).withName(\"AccessPointArn\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_MetricsConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"MetricsConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"MetricsId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = se_MetricsFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_MetricsFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"MetricsFilter\");\n    MetricsFilter.visit(input, {\n        Prefix: (value) => {\n            const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = se_Tag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        AccessPointArn: (value) => {\n            const node = __XmlNode.of(\"AccessPointArn\", value).withName(\"AccessPointArn\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = se_MetricsAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst se_NoncurrentVersionExpiration = (input, context) => {\n    const bodyNode = new __XmlNode(\"NoncurrentVersionExpiration\");\n    if (input.NoncurrentDays != null) {\n        const node = __XmlNode.of(\"Days\", String(input.NoncurrentDays)).withName(\"NoncurrentDays\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.NewerNoncurrentVersions != null) {\n        const node = __XmlNode\n            .of(\"VersionCount\", String(input.NewerNoncurrentVersions))\n            .withName(\"NewerNoncurrentVersions\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_NoncurrentVersionTransition = (input, context) => {\n    const bodyNode = new __XmlNode(\"NoncurrentVersionTransition\");\n    if (input.NoncurrentDays != null) {\n        const node = __XmlNode.of(\"Days\", String(input.NoncurrentDays)).withName(\"NoncurrentDays\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass != null) {\n        const node = __XmlNode.of(\"TransitionStorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.NewerNoncurrentVersions != null) {\n        const node = __XmlNode\n            .of(\"VersionCount\", String(input.NewerNoncurrentVersions))\n            .withName(\"NewerNoncurrentVersions\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_NoncurrentVersionTransitionList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_NoncurrentVersionTransition(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_NotificationConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"NotificationConfiguration\");\n    if (input.TopicConfigurations != null) {\n        const nodes = se_TopicConfigurationList(input.TopicConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"TopicConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.QueueConfigurations != null) {\n        const nodes = se_QueueConfigurationList(input.QueueConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"QueueConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.LambdaFunctionConfigurations != null) {\n        const nodes = se_LambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"CloudFunctionConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.EventBridgeConfiguration != null) {\n        const node = se_EventBridgeConfiguration(input.EventBridgeConfiguration, context).withName(\"EventBridgeConfiguration\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_NotificationConfigurationFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"NotificationConfigurationFilter\");\n    if (input.Key != null) {\n        const node = se_S3KeyFilter(input.Key, context).withName(\"S3Key\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ObjectIdentifier = (input, context) => {\n    const bodyNode = new __XmlNode(\"ObjectIdentifier\");\n    if (input.Key != null) {\n        const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.VersionId != null) {\n        const node = __XmlNode.of(\"ObjectVersionId\", input.VersionId).withName(\"VersionId\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ObjectIdentifierList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_ObjectIdentifier(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_ObjectLockConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"ObjectLockConfiguration\");\n    if (input.ObjectLockEnabled != null) {\n        const node = __XmlNode.of(\"ObjectLockEnabled\", input.ObjectLockEnabled).withName(\"ObjectLockEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Rule != null) {\n        const node = se_ObjectLockRule(input.Rule, context).withName(\"Rule\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ObjectLockLegalHold = (input, context) => {\n    const bodyNode = new __XmlNode(\"ObjectLockLegalHold\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ObjectLockLegalHoldStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ObjectLockRetention = (input, context) => {\n    const bodyNode = new __XmlNode(\"ObjectLockRetention\");\n    if (input.Mode != null) {\n        const node = __XmlNode.of(\"ObjectLockRetentionMode\", input.Mode).withName(\"Mode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RetainUntilDate != null) {\n        const node = __XmlNode\n            .of(\"Date\", (input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString())\n            .withName(\"RetainUntilDate\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ObjectLockRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"ObjectLockRule\");\n    if (input.DefaultRetention != null) {\n        const node = se_DefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_OutputLocation = (input, context) => {\n    const bodyNode = new __XmlNode(\"OutputLocation\");\n    if (input.S3 != null) {\n        const node = se_S3Location(input.S3, context).withName(\"S3\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_OutputSerialization = (input, context) => {\n    const bodyNode = new __XmlNode(\"OutputSerialization\");\n    if (input.CSV != null) {\n        const node = se_CSVOutput(input.CSV, context).withName(\"CSV\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.JSON != null) {\n        const node = se_JSONOutput(input.JSON, context).withName(\"JSON\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_Owner = (input, context) => {\n    const bodyNode = new __XmlNode(\"Owner\");\n    if (input.DisplayName != null) {\n        const node = __XmlNode.of(\"DisplayName\", input.DisplayName).withName(\"DisplayName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID != null) {\n        const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_OwnershipControls = (input, context) => {\n    const bodyNode = new __XmlNode(\"OwnershipControls\");\n    if (input.Rules != null) {\n        const nodes = se_OwnershipControlsRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_OwnershipControlsRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"OwnershipControlsRule\");\n    if (input.ObjectOwnership != null) {\n        const node = __XmlNode.of(\"ObjectOwnership\", input.ObjectOwnership).withName(\"ObjectOwnership\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_OwnershipControlsRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_OwnershipControlsRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_ParquetInput = (input, context) => {\n    const bodyNode = new __XmlNode(\"ParquetInput\");\n    return bodyNode;\n};\nconst se_PublicAccessBlockConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"PublicAccessBlockConfiguration\");\n    if (input.BlockPublicAcls != null) {\n        const node = __XmlNode.of(\"Setting\", String(input.BlockPublicAcls)).withName(\"BlockPublicAcls\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IgnorePublicAcls != null) {\n        const node = __XmlNode.of(\"Setting\", String(input.IgnorePublicAcls)).withName(\"IgnorePublicAcls\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BlockPublicPolicy != null) {\n        const node = __XmlNode.of(\"Setting\", String(input.BlockPublicPolicy)).withName(\"BlockPublicPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RestrictPublicBuckets != null) {\n        const node = __XmlNode.of(\"Setting\", String(input.RestrictPublicBuckets)).withName(\"RestrictPublicBuckets\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_QueueConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"QueueConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueueArn != null) {\n        const node = __XmlNode.of(\"QueueArn\", input.QueueArn).withName(\"Queue\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events != null) {\n        const nodes = se_EventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter != null) {\n        const node = se_NotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_QueueConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_QueueConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_Redirect = (input, context) => {\n    const bodyNode = new __XmlNode(\"Redirect\");\n    if (input.HostName != null) {\n        const node = __XmlNode.of(\"HostName\", input.HostName).withName(\"HostName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.HttpRedirectCode != null) {\n        const node = __XmlNode.of(\"HttpRedirectCode\", input.HttpRedirectCode).withName(\"HttpRedirectCode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Protocol != null) {\n        const node = __XmlNode.of(\"Protocol\", input.Protocol).withName(\"Protocol\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplaceKeyPrefixWith != null) {\n        const node = __XmlNode.of(\"ReplaceKeyPrefixWith\", input.ReplaceKeyPrefixWith).withName(\"ReplaceKeyPrefixWith\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplaceKeyWith != null) {\n        const node = __XmlNode.of(\"ReplaceKeyWith\", input.ReplaceKeyWith).withName(\"ReplaceKeyWith\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_RedirectAllRequestsTo = (input, context) => {\n    const bodyNode = new __XmlNode(\"RedirectAllRequestsTo\");\n    if (input.HostName != null) {\n        const node = __XmlNode.of(\"HostName\", input.HostName).withName(\"HostName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Protocol != null) {\n        const node = __XmlNode.of(\"Protocol\", input.Protocol).withName(\"Protocol\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ReplicaModifications = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicaModifications\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ReplicaModificationsStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ReplicationConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationConfiguration\");\n    if (input.Role != null) {\n        const node = __XmlNode.of(\"Role\", input.Role).withName(\"Role\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Rules != null) {\n        const nodes = se_ReplicationRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_ReplicationRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationRule\");\n    if (input.ID != null) {\n        const node = __XmlNode.of(\"ID\", input.ID).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Priority != null) {\n        const node = __XmlNode.of(\"Priority\", String(input.Priority)).withName(\"Priority\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter != null) {\n        const node = se_ReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ReplicationRuleStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SourceSelectionCriteria != null) {\n        const node = se_SourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\"SourceSelectionCriteria\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExistingObjectReplication != null) {\n        const node = se_ExistingObjectReplication(input.ExistingObjectReplication, context).withName(\"ExistingObjectReplication\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Destination != null) {\n        const node = se_Destination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.DeleteMarkerReplication != null) {\n        const node = se_DeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\"DeleteMarkerReplication\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ReplicationRuleAndOperator = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationRuleAndOperator\");\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"Prefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags != null) {\n        const nodes = se_TagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_ReplicationRuleFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationRuleFilter\");\n    ReplicationRuleFilter.visit(input, {\n        Prefix: (value) => {\n            const node = __XmlNode.of(\"Prefix\", value).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = se_Tag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = se_ReplicationRuleAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst se_ReplicationRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_ReplicationRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_ReplicationTime = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationTime\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"ReplicationTimeStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Time != null) {\n        const node = se_ReplicationTimeValue(input.Time, context).withName(\"Time\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ReplicationTimeValue = (input, context) => {\n    const bodyNode = new __XmlNode(\"ReplicationTimeValue\");\n    if (input.Minutes != null) {\n        const node = __XmlNode.of(\"Minutes\", String(input.Minutes)).withName(\"Minutes\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_RequestPaymentConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"RequestPaymentConfiguration\");\n    if (input.Payer != null) {\n        const node = __XmlNode.of(\"Payer\", input.Payer).withName(\"Payer\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_RequestProgress = (input, context) => {\n    const bodyNode = new __XmlNode(\"RequestProgress\");\n    if (input.Enabled != null) {\n        const node = __XmlNode.of(\"EnableRequestProgress\", String(input.Enabled)).withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_RestoreRequest = (input, context) => {\n    const bodyNode = new __XmlNode(\"RestoreRequest\");\n    if (input.Days != null) {\n        const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.GlacierJobParameters != null) {\n        const node = se_GlacierJobParameters(input.GlacierJobParameters, context).withName(\"GlacierJobParameters\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Type != null) {\n        const node = __XmlNode.of(\"RestoreRequestType\", input.Type).withName(\"Type\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tier != null) {\n        const node = __XmlNode.of(\"Tier\", input.Tier).withName(\"Tier\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Description != null) {\n        const node = __XmlNode.of(\"Description\", input.Description).withName(\"Description\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SelectParameters != null) {\n        const node = se_SelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputLocation != null) {\n        const node = se_OutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_RoutingRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"RoutingRule\");\n    if (input.Condition != null) {\n        const node = se_Condition(input.Condition, context).withName(\"Condition\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Redirect != null) {\n        const node = se_Redirect(input.Redirect, context).withName(\"Redirect\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_RoutingRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_RoutingRule(entry, context);\n        return node.withName(\"RoutingRule\");\n    });\n};\nconst se_S3KeyFilter = (input, context) => {\n    const bodyNode = new __XmlNode(\"S3KeyFilter\");\n    if (input.FilterRules != null) {\n        const nodes = se_FilterRuleList(input.FilterRules, context);\n        nodes.map((node) => {\n            node = node.withName(\"FilterRule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_S3Location = (input, context) => {\n    const bodyNode = new __XmlNode(\"S3Location\");\n    if (input.BucketName != null) {\n        const node = __XmlNode.of(\"BucketName\", input.BucketName).withName(\"BucketName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix != null) {\n        const node = __XmlNode.of(\"LocationPrefix\", input.Prefix).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Encryption != null) {\n        const node = se_Encryption(input.Encryption, context).withName(\"Encryption\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CannedACL != null) {\n        const node = __XmlNode.of(\"ObjectCannedACL\", input.CannedACL).withName(\"CannedACL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlList != null) {\n        const nodes = se_Grants(input.AccessControlList, context);\n        const containerNode = new __XmlNode(\"AccessControlList\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Tagging != null) {\n        const node = se_Tagging(input.Tagging, context).withName(\"Tagging\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.UserMetadata != null) {\n        const nodes = se_UserMetadata(input.UserMetadata, context);\n        const containerNode = new __XmlNode(\"UserMetadata\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.StorageClass != null) {\n        const node = __XmlNode.of(\"StorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ScanRange = (input, context) => {\n    const bodyNode = new __XmlNode(\"ScanRange\");\n    if (input.Start != null) {\n        const node = __XmlNode.of(\"Start\", String(input.Start)).withName(\"Start\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.End != null) {\n        const node = __XmlNode.of(\"End\", String(input.End)).withName(\"End\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_SelectParameters = (input, context) => {\n    const bodyNode = new __XmlNode(\"SelectParameters\");\n    if (input.InputSerialization != null) {\n        const node = se_InputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpressionType != null) {\n        const node = __XmlNode.of(\"ExpressionType\", input.ExpressionType).withName(\"ExpressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Expression != null) {\n        const node = __XmlNode.of(\"Expression\", input.Expression).withName(\"Expression\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputSerialization != null) {\n        const node = se_OutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ServerSideEncryptionByDefault = (input, context) => {\n    const bodyNode = new __XmlNode(\"ServerSideEncryptionByDefault\");\n    if (input.SSEAlgorithm != null) {\n        const node = __XmlNode.of(\"ServerSideEncryption\", input.SSEAlgorithm).withName(\"SSEAlgorithm\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSMasterKeyID != null) {\n        const node = __XmlNode.of(\"SSEKMSKeyId\", input.KMSMasterKeyID).withName(\"KMSMasterKeyID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ServerSideEncryptionConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"ServerSideEncryptionConfiguration\");\n    if (input.Rules != null) {\n        const nodes = se_ServerSideEncryptionRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst se_ServerSideEncryptionRule = (input, context) => {\n    const bodyNode = new __XmlNode(\"ServerSideEncryptionRule\");\n    if (input.ApplyServerSideEncryptionByDefault != null) {\n        const node = se_ServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName(\"ApplyServerSideEncryptionByDefault\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BucketKeyEnabled != null) {\n        const node = __XmlNode.of(\"BucketKeyEnabled\", String(input.BucketKeyEnabled)).withName(\"BucketKeyEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_ServerSideEncryptionRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_ServerSideEncryptionRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_SourceSelectionCriteria = (input, context) => {\n    const bodyNode = new __XmlNode(\"SourceSelectionCriteria\");\n    if (input.SseKmsEncryptedObjects != null) {\n        const node = se_SseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\"SseKmsEncryptedObjects\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplicaModifications != null) {\n        const node = se_ReplicaModifications(input.ReplicaModifications, context).withName(\"ReplicaModifications\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_SSEKMS = (input, context) => {\n    const bodyNode = new __XmlNode(\"SSE-KMS\");\n    if (input.KeyId != null) {\n        const node = __XmlNode.of(\"SSEKMSKeyId\", input.KeyId).withName(\"KeyId\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_SseKmsEncryptedObjects = (input, context) => {\n    const bodyNode = new __XmlNode(\"SseKmsEncryptedObjects\");\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"SseKmsEncryptedObjectsStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_SSES3 = (input, context) => {\n    const bodyNode = new __XmlNode(\"SSE-S3\");\n    return bodyNode;\n};\nconst se_StorageClassAnalysis = (input, context) => {\n    const bodyNode = new __XmlNode(\"StorageClassAnalysis\");\n    if (input.DataExport != null) {\n        const node = se_StorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_StorageClassAnalysisDataExport = (input, context) => {\n    const bodyNode = new __XmlNode(\"StorageClassAnalysisDataExport\");\n    if (input.OutputSchemaVersion != null) {\n        const node = __XmlNode\n            .of(\"StorageClassAnalysisSchemaVersion\", input.OutputSchemaVersion)\n            .withName(\"OutputSchemaVersion\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Destination != null) {\n        const node = se_AnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_Tag = (input, context) => {\n    const bodyNode = new __XmlNode(\"Tag\");\n    if (input.Key != null) {\n        const node = __XmlNode.of(\"ObjectKey\", input.Key).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value != null) {\n        const node = __XmlNode.of(\"Value\", input.Value).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_Tagging = (input, context) => {\n    const bodyNode = new __XmlNode(\"Tagging\");\n    if (input.TagSet != null) {\n        const nodes = se_TagSet(input.TagSet, context);\n        const containerNode = new __XmlNode(\"TagSet\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst se_TagSet = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_Tag(entry, context);\n        return node.withName(\"Tag\");\n    });\n};\nconst se_TargetGrant = (input, context) => {\n    const bodyNode = new __XmlNode(\"TargetGrant\");\n    if (input.Grantee != null) {\n        const node = se_Grantee(input.Grantee, context).withName(\"Grantee\");\n        node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Permission != null) {\n        const node = __XmlNode.of(\"BucketLogsPermission\", input.Permission).withName(\"Permission\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_TargetGrants = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_TargetGrant(entry, context);\n        return node.withName(\"Grant\");\n    });\n};\nconst se_Tiering = (input, context) => {\n    const bodyNode = new __XmlNode(\"Tiering\");\n    if (input.Days != null) {\n        const node = __XmlNode.of(\"IntelligentTieringDays\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessTier != null) {\n        const node = __XmlNode.of(\"IntelligentTieringAccessTier\", input.AccessTier).withName(\"AccessTier\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_TieringList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_Tiering(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_TopicConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"TopicConfiguration\");\n    if (input.Id != null) {\n        const node = __XmlNode.of(\"NotificationId\", input.Id).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TopicArn != null) {\n        const node = __XmlNode.of(\"TopicArn\", input.TopicArn).withName(\"Topic\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events != null) {\n        const nodes = se_EventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter != null) {\n        const node = se_NotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_TopicConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_TopicConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_Transition = (input, context) => {\n    const bodyNode = new __XmlNode(\"Transition\");\n    if (input.Date != null) {\n        const node = __XmlNode.of(\"Date\", (input.Date.toISOString().split(\".\")[0] + \"Z\").toString()).withName(\"Date\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days != null) {\n        const node = __XmlNode.of(\"Days\", String(input.Days)).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass != null) {\n        const node = __XmlNode.of(\"TransitionStorageClass\", input.StorageClass).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_TransitionList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_Transition(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst se_UserMetadata = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        const node = se_MetadataEntry(entry, context);\n        return node.withName(\"MetadataEntry\");\n    });\n};\nconst se_VersioningConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"VersioningConfiguration\");\n    if (input.MFADelete != null) {\n        const node = __XmlNode.of(\"MFADelete\", input.MFADelete).withName(\"MfaDelete\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status != null) {\n        const node = __XmlNode.of(\"BucketVersioningStatus\", input.Status).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst se_WebsiteConfiguration = (input, context) => {\n    const bodyNode = new __XmlNode(\"WebsiteConfiguration\");\n    if (input.ErrorDocument != null) {\n        const node = se_ErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IndexDocument != null) {\n        const node = se_IndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RedirectAllRequestsTo != null) {\n        const node = se_RedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\"RedirectAllRequestsTo\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RoutingRules != null) {\n        const nodes = se_RoutingRules(input.RoutingRules, context);\n        const containerNode = new __XmlNode(\"RoutingRules\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst de_AbortIncompleteMultipartUpload = (output, context) => {\n    const contents = {};\n    if (output[\"DaysAfterInitiation\"] !== undefined) {\n        contents.DaysAfterInitiation = __strictParseInt32(output[\"DaysAfterInitiation\"]);\n    }\n    return contents;\n};\nconst de_AccessControlTranslation = (output, context) => {\n    const contents = {};\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = __expectString(output[\"Owner\"]);\n    }\n    return contents;\n};\nconst de_AllowedHeaders = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst de_AllowedMethods = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst de_AllowedOrigins = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst de_AnalyticsAndOperator = (output, context) => {\n    const contents = {};\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = de_TagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst de_AnalyticsConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = de_AnalyticsFilter(__expectUnion(output[\"Filter\"]), context);\n    }\n    if (output[\"StorageClassAnalysis\"] !== undefined) {\n        contents.StorageClassAnalysis = de_StorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n    }\n    return contents;\n};\nconst de_AnalyticsConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AnalyticsConfiguration(entry, context);\n    });\n};\nconst de_AnalyticsExportDestination = (output, context) => {\n    const contents = {};\n    if (output[\"S3BucketDestination\"] !== undefined) {\n        contents.S3BucketDestination = de_AnalyticsS3BucketDestination(output[\"S3BucketDestination\"], context);\n    }\n    return contents;\n};\nconst de_AnalyticsFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: __expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: de_Tag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: de_AnalyticsAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_AnalyticsS3BucketDestination = (output, context) => {\n    const contents = {};\n    if (output[\"Format\"] !== undefined) {\n        contents.Format = __expectString(output[\"Format\"]);\n    }\n    if (output[\"BucketAccountId\"] !== undefined) {\n        contents.BucketAccountId = __expectString(output[\"BucketAccountId\"]);\n    }\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst de_Bucket = (output, context) => {\n    const contents = {};\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = __expectString(output[\"Name\"]);\n    }\n    if (output[\"CreationDate\"] !== undefined) {\n        contents.CreationDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"CreationDate\"]));\n    }\n    return contents;\n};\nconst de_Buckets = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Bucket(entry, context);\n    });\n};\nconst de_Checksum = (output, context) => {\n    const contents = {};\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst de_ChecksumAlgorithmList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst de_CommonPrefix = (output, context) => {\n    const contents = {};\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst de_CommonPrefixList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_CommonPrefix(entry, context);\n    });\n};\nconst de_Condition = (output, context) => {\n    const contents = {};\n    if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n        contents.HttpErrorCodeReturnedEquals = __expectString(output[\"HttpErrorCodeReturnedEquals\"]);\n    }\n    if (output[\"KeyPrefixEquals\"] !== undefined) {\n        contents.KeyPrefixEquals = __expectString(output[\"KeyPrefixEquals\"]);\n    }\n    return contents;\n};\nconst de_ContinuationEvent = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst de_CopyObjectResult = (output, context) => {\n    const contents = {};\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(output[\"ETag\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst de_CopyPartResult = (output, context) => {\n    const contents = {};\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(output[\"ETag\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst de_CORSRule = (output, context) => {\n    const contents = {};\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    if (output.AllowedHeader === \"\") {\n        contents.AllowedHeaders = [];\n    }\n    else if (output[\"AllowedHeader\"] !== undefined) {\n        contents.AllowedHeaders = de_AllowedHeaders(__getArrayIfSingleItem(output[\"AllowedHeader\"]), context);\n    }\n    if (output.AllowedMethod === \"\") {\n        contents.AllowedMethods = [];\n    }\n    else if (output[\"AllowedMethod\"] !== undefined) {\n        contents.AllowedMethods = de_AllowedMethods(__getArrayIfSingleItem(output[\"AllowedMethod\"]), context);\n    }\n    if (output.AllowedOrigin === \"\") {\n        contents.AllowedOrigins = [];\n    }\n    else if (output[\"AllowedOrigin\"] !== undefined) {\n        contents.AllowedOrigins = de_AllowedOrigins(__getArrayIfSingleItem(output[\"AllowedOrigin\"]), context);\n    }\n    if (output.ExposeHeader === \"\") {\n        contents.ExposeHeaders = [];\n    }\n    else if (output[\"ExposeHeader\"] !== undefined) {\n        contents.ExposeHeaders = de_ExposeHeaders(__getArrayIfSingleItem(output[\"ExposeHeader\"]), context);\n    }\n    if (output[\"MaxAgeSeconds\"] !== undefined) {\n        contents.MaxAgeSeconds = __strictParseInt32(output[\"MaxAgeSeconds\"]);\n    }\n    return contents;\n};\nconst de_CORSRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_CORSRule(entry, context);\n    });\n};\nconst de_DefaultRetention = (output, context) => {\n    const contents = {};\n    if (output[\"Mode\"] !== undefined) {\n        contents.Mode = __expectString(output[\"Mode\"]);\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = __strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"Years\"] !== undefined) {\n        contents.Years = __strictParseInt32(output[\"Years\"]);\n    }\n    return contents;\n};\nconst de_DeletedObject = (output, context) => {\n    const contents = {};\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = __expectString(output[\"VersionId\"]);\n    }\n    if (output[\"DeleteMarker\"] !== undefined) {\n        contents.DeleteMarker = __parseBoolean(output[\"DeleteMarker\"]);\n    }\n    if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n        contents.DeleteMarkerVersionId = __expectString(output[\"DeleteMarkerVersionId\"]);\n    }\n    return contents;\n};\nconst de_DeletedObjects = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_DeletedObject(entry, context);\n    });\n};\nconst de_DeleteMarkerEntry = (output, context) => {\n    const contents = {};\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = de_Owner(output[\"Owner\"], context);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = __expectString(output[\"VersionId\"]);\n    }\n    if (output[\"IsLatest\"] !== undefined) {\n        contents.IsLatest = __parseBoolean(output[\"IsLatest\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    return contents;\n};\nconst de_DeleteMarkerReplication = (output, context) => {\n    const contents = {};\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst de_DeleteMarkers = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_DeleteMarkerEntry(entry, context);\n    });\n};\nconst de_Destination = (output, context) => {\n    const contents = {};\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = __expectString(output[\"Account\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"AccessControlTranslation\"] !== undefined) {\n        contents.AccessControlTranslation = de_AccessControlTranslation(output[\"AccessControlTranslation\"], context);\n    }\n    if (output[\"EncryptionConfiguration\"] !== undefined) {\n        contents.EncryptionConfiguration = de_EncryptionConfiguration(output[\"EncryptionConfiguration\"], context);\n    }\n    if (output[\"ReplicationTime\"] !== undefined) {\n        contents.ReplicationTime = de_ReplicationTime(output[\"ReplicationTime\"], context);\n    }\n    if (output[\"Metrics\"] !== undefined) {\n        contents.Metrics = de_Metrics(output[\"Metrics\"], context);\n    }\n    return contents;\n};\nconst de_EncryptionConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n        contents.ReplicaKmsKeyID = __expectString(output[\"ReplicaKmsKeyID\"]);\n    }\n    return contents;\n};\nconst de_EndEvent = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst de__Error = (output, context) => {\n    const contents = {};\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = __expectString(output[\"VersionId\"]);\n    }\n    if (output[\"Code\"] !== undefined) {\n        contents.Code = __expectString(output[\"Code\"]);\n    }\n    if (output[\"Message\"] !== undefined) {\n        contents.Message = __expectString(output[\"Message\"]);\n    }\n    return contents;\n};\nconst de_ErrorDocument = (output, context) => {\n    const contents = {};\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    return contents;\n};\nconst de_Errors = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de__Error(entry, context);\n    });\n};\nconst de_EventBridgeConfiguration = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst de_EventList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst de_ExistingObjectReplication = (output, context) => {\n    const contents = {};\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst de_ExposeHeaders = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst de_FilterRule = (output, context) => {\n    const contents = {};\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = __expectString(output[\"Name\"]);\n    }\n    if (output[\"Value\"] !== undefined) {\n        contents.Value = __expectString(output[\"Value\"]);\n    }\n    return contents;\n};\nconst de_FilterRuleList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_FilterRule(entry, context);\n    });\n};\nconst de_GetObjectAttributesParts = (output, context) => {\n    const contents = {};\n    if (output[\"PartsCount\"] !== undefined) {\n        contents.TotalPartsCount = __strictParseInt32(output[\"PartsCount\"]);\n    }\n    if (output[\"PartNumberMarker\"] !== undefined) {\n        contents.PartNumberMarker = __expectString(output[\"PartNumberMarker\"]);\n    }\n    if (output[\"NextPartNumberMarker\"] !== undefined) {\n        contents.NextPartNumberMarker = __expectString(output[\"NextPartNumberMarker\"]);\n    }\n    if (output[\"MaxParts\"] !== undefined) {\n        contents.MaxParts = __strictParseInt32(output[\"MaxParts\"]);\n    }\n    if (output[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = __parseBoolean(output[\"IsTruncated\"]);\n    }\n    if (output.Part === \"\") {\n        contents.Parts = [];\n    }\n    else if (output[\"Part\"] !== undefined) {\n        contents.Parts = de_PartsList(__getArrayIfSingleItem(output[\"Part\"]), context);\n    }\n    return contents;\n};\nconst de_Grant = (output, context) => {\n    const contents = {};\n    if (output[\"Grantee\"] !== undefined) {\n        contents.Grantee = de_Grantee(output[\"Grantee\"], context);\n    }\n    if (output[\"Permission\"] !== undefined) {\n        contents.Permission = __expectString(output[\"Permission\"]);\n    }\n    return contents;\n};\nconst de_Grantee = (output, context) => {\n    const contents = {};\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = __expectString(output[\"DisplayName\"]);\n    }\n    if (output[\"EmailAddress\"] !== undefined) {\n        contents.EmailAddress = __expectString(output[\"EmailAddress\"]);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    if (output[\"URI\"] !== undefined) {\n        contents.URI = __expectString(output[\"URI\"]);\n    }\n    if (output[\"xsi:type\"] !== undefined) {\n        contents.Type = __expectString(output[\"xsi:type\"]);\n    }\n    return contents;\n};\nconst de_Grants = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Grant(entry, context);\n    });\n};\nconst de_IndexDocument = (output, context) => {\n    const contents = {};\n    if (output[\"Suffix\"] !== undefined) {\n        contents.Suffix = __expectString(output[\"Suffix\"]);\n    }\n    return contents;\n};\nconst de_Initiator = (output, context) => {\n    const contents = {};\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = __expectString(output[\"DisplayName\"]);\n    }\n    return contents;\n};\nconst de_IntelligentTieringAndOperator = (output, context) => {\n    const contents = {};\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = de_TagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst de_IntelligentTieringConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = de_IntelligentTieringFilter(output[\"Filter\"], context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    if (output.Tiering === \"\") {\n        contents.Tierings = [];\n    }\n    else if (output[\"Tiering\"] !== undefined) {\n        contents.Tierings = de_TieringList(__getArrayIfSingleItem(output[\"Tiering\"]), context);\n    }\n    return contents;\n};\nconst de_IntelligentTieringConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_IntelligentTieringConfiguration(entry, context);\n    });\n};\nconst de_IntelligentTieringFilter = (output, context) => {\n    const contents = {};\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output[\"Tag\"] !== undefined) {\n        contents.Tag = de_Tag(output[\"Tag\"], context);\n    }\n    if (output[\"And\"] !== undefined) {\n        contents.And = de_IntelligentTieringAndOperator(output[\"And\"], context);\n    }\n    return contents;\n};\nconst de_InventoryConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = de_InventoryDestination(output[\"Destination\"], context);\n    }\n    if (output[\"IsEnabled\"] !== undefined) {\n        contents.IsEnabled = __parseBoolean(output[\"IsEnabled\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = de_InventoryFilter(output[\"Filter\"], context);\n    }\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output[\"IncludedObjectVersions\"] !== undefined) {\n        contents.IncludedObjectVersions = __expectString(output[\"IncludedObjectVersions\"]);\n    }\n    if (output.OptionalFields === \"\") {\n        contents.OptionalFields = [];\n    }\n    else if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n        contents.OptionalFields = de_InventoryOptionalFields(__getArrayIfSingleItem(output[\"OptionalFields\"][\"Field\"]), context);\n    }\n    if (output[\"Schedule\"] !== undefined) {\n        contents.Schedule = de_InventorySchedule(output[\"Schedule\"], context);\n    }\n    return contents;\n};\nconst de_InventoryConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InventoryConfiguration(entry, context);\n    });\n};\nconst de_InventoryDestination = (output, context) => {\n    const contents = {};\n    if (output[\"S3BucketDestination\"] !== undefined) {\n        contents.S3BucketDestination = de_InventoryS3BucketDestination(output[\"S3BucketDestination\"], context);\n    }\n    return contents;\n};\nconst de_InventoryEncryption = (output, context) => {\n    const contents = {};\n    if (output[\"SSE-S3\"] !== undefined) {\n        contents.SSES3 = de_SSES3(output[\"SSE-S3\"], context);\n    }\n    if (output[\"SSE-KMS\"] !== undefined) {\n        contents.SSEKMS = de_SSEKMS(output[\"SSE-KMS\"], context);\n    }\n    return contents;\n};\nconst de_InventoryFilter = (output, context) => {\n    const contents = {};\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst de_InventoryOptionalFields = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return __expectString(entry);\n    });\n};\nconst de_InventoryS3BucketDestination = (output, context) => {\n    const contents = {};\n    if (output[\"AccountId\"] !== undefined) {\n        contents.AccountId = __expectString(output[\"AccountId\"]);\n    }\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = __expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Format\"] !== undefined) {\n        contents.Format = __expectString(output[\"Format\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output[\"Encryption\"] !== undefined) {\n        contents.Encryption = de_InventoryEncryption(output[\"Encryption\"], context);\n    }\n    return contents;\n};\nconst de_InventorySchedule = (output, context) => {\n    const contents = {};\n    if (output[\"Frequency\"] !== undefined) {\n        contents.Frequency = __expectString(output[\"Frequency\"]);\n    }\n    return contents;\n};\nconst de_LambdaFunctionConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output[\"CloudFunction\"] !== undefined) {\n        contents.LambdaFunctionArn = __expectString(output[\"CloudFunction\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    else if (output[\"Event\"] !== undefined) {\n        contents.Events = de_EventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = de_NotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst de_LambdaFunctionConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_LambdaFunctionConfiguration(entry, context);\n    });\n};\nconst de_LifecycleExpiration = (output, context) => {\n    const contents = {};\n    if (output[\"Date\"] !== undefined) {\n        contents.Date = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Date\"]));\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = __strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n        contents.ExpiredObjectDeleteMarker = __parseBoolean(output[\"ExpiredObjectDeleteMarker\"]);\n    }\n    return contents;\n};\nconst de_LifecycleRule = (output, context) => {\n    const contents = {};\n    if (output[\"Expiration\"] !== undefined) {\n        contents.Expiration = de_LifecycleExpiration(output[\"Expiration\"], context);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = de_LifecycleRuleFilter(__expectUnion(output[\"Filter\"]), context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    if (output.Transition === \"\") {\n        contents.Transitions = [];\n    }\n    else if (output[\"Transition\"] !== undefined) {\n        contents.Transitions = de_TransitionList(__getArrayIfSingleItem(output[\"Transition\"]), context);\n    }\n    if (output.NoncurrentVersionTransition === \"\") {\n        contents.NoncurrentVersionTransitions = [];\n    }\n    else if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n        contents.NoncurrentVersionTransitions = de_NoncurrentVersionTransitionList(__getArrayIfSingleItem(output[\"NoncurrentVersionTransition\"]), context);\n    }\n    if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n        contents.NoncurrentVersionExpiration = de_NoncurrentVersionExpiration(output[\"NoncurrentVersionExpiration\"], context);\n    }\n    if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n        contents.AbortIncompleteMultipartUpload = de_AbortIncompleteMultipartUpload(output[\"AbortIncompleteMultipartUpload\"], context);\n    }\n    return contents;\n};\nconst de_LifecycleRuleAndOperator = (output, context) => {\n    const contents = {};\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = de_TagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    if (output[\"ObjectSizeGreaterThan\"] !== undefined) {\n        contents.ObjectSizeGreaterThan = __strictParseLong(output[\"ObjectSizeGreaterThan\"]);\n    }\n    if (output[\"ObjectSizeLessThan\"] !== undefined) {\n        contents.ObjectSizeLessThan = __strictParseLong(output[\"ObjectSizeLessThan\"]);\n    }\n    return contents;\n};\nconst de_LifecycleRuleFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: __expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: de_Tag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"ObjectSizeGreaterThan\"] !== undefined) {\n        return {\n            ObjectSizeGreaterThan: __strictParseLong(output[\"ObjectSizeGreaterThan\"]),\n        };\n    }\n    if (output[\"ObjectSizeLessThan\"] !== undefined) {\n        return {\n            ObjectSizeLessThan: __strictParseLong(output[\"ObjectSizeLessThan\"]),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: de_LifecycleRuleAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_LifecycleRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_LifecycleRule(entry, context);\n    });\n};\nconst de_LoggingEnabled = (output, context) => {\n    const contents = {};\n    if (output[\"TargetBucket\"] !== undefined) {\n        contents.TargetBucket = __expectString(output[\"TargetBucket\"]);\n    }\n    if (output.TargetGrants === \"\") {\n        contents.TargetGrants = [];\n    }\n    else if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n        contents.TargetGrants = de_TargetGrants(__getArrayIfSingleItem(output[\"TargetGrants\"][\"Grant\"]), context);\n    }\n    if (output[\"TargetPrefix\"] !== undefined) {\n        contents.TargetPrefix = __expectString(output[\"TargetPrefix\"]);\n    }\n    return contents;\n};\nconst de_Metrics = (output, context) => {\n    const contents = {};\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    if (output[\"EventThreshold\"] !== undefined) {\n        contents.EventThreshold = de_ReplicationTimeValue(output[\"EventThreshold\"], context);\n    }\n    return contents;\n};\nconst de_MetricsAndOperator = (output, context) => {\n    const contents = {};\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = de_TagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    if (output[\"AccessPointArn\"] !== undefined) {\n        contents.AccessPointArn = __expectString(output[\"AccessPointArn\"]);\n    }\n    return contents;\n};\nconst de_MetricsConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = de_MetricsFilter(__expectUnion(output[\"Filter\"]), context);\n    }\n    return contents;\n};\nconst de_MetricsConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MetricsConfiguration(entry, context);\n    });\n};\nconst de_MetricsFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: __expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: de_Tag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"AccessPointArn\"] !== undefined) {\n        return {\n            AccessPointArn: __expectString(output[\"AccessPointArn\"]),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: de_MetricsAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_MultipartUpload = (output, context) => {\n    const contents = {};\n    if (output[\"UploadId\"] !== undefined) {\n        contents.UploadId = __expectString(output[\"UploadId\"]);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"Initiated\"] !== undefined) {\n        contents.Initiated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Initiated\"]));\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = de_Owner(output[\"Owner\"], context);\n    }\n    if (output[\"Initiator\"] !== undefined) {\n        contents.Initiator = de_Initiator(output[\"Initiator\"], context);\n    }\n    if (output[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = __expectString(output[\"ChecksumAlgorithm\"]);\n    }\n    return contents;\n};\nconst de_MultipartUploadList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MultipartUpload(entry, context);\n    });\n};\nconst de_NoncurrentVersionExpiration = (output, context) => {\n    const contents = {};\n    if (output[\"NoncurrentDays\"] !== undefined) {\n        contents.NoncurrentDays = __strictParseInt32(output[\"NoncurrentDays\"]);\n    }\n    if (output[\"NewerNoncurrentVersions\"] !== undefined) {\n        contents.NewerNoncurrentVersions = __strictParseInt32(output[\"NewerNoncurrentVersions\"]);\n    }\n    return contents;\n};\nconst de_NoncurrentVersionTransition = (output, context) => {\n    const contents = {};\n    if (output[\"NoncurrentDays\"] !== undefined) {\n        contents.NoncurrentDays = __strictParseInt32(output[\"NoncurrentDays\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"NewerNoncurrentVersions\"] !== undefined) {\n        contents.NewerNoncurrentVersions = __strictParseInt32(output[\"NewerNoncurrentVersions\"]);\n    }\n    return contents;\n};\nconst de_NoncurrentVersionTransitionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_NoncurrentVersionTransition(entry, context);\n    });\n};\nconst de_NotificationConfigurationFilter = (output, context) => {\n    const contents = {};\n    if (output[\"S3Key\"] !== undefined) {\n        contents.Key = de_S3KeyFilter(output[\"S3Key\"], context);\n    }\n    return contents;\n};\nconst de__Object = (output, context) => {\n    const contents = {};\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(output[\"ETag\"]);\n    }\n    if (output.ChecksumAlgorithm === \"\") {\n        contents.ChecksumAlgorithm = [];\n    }\n    else if (output[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = de_ChecksumAlgorithmList(__getArrayIfSingleItem(output[\"ChecksumAlgorithm\"]), context);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = __strictParseLong(output[\"Size\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = de_Owner(output[\"Owner\"], context);\n    }\n    if (output[\"RestoreStatus\"] !== undefined) {\n        contents.RestoreStatus = de_RestoreStatus(output[\"RestoreStatus\"], context);\n    }\n    return contents;\n};\nconst de_ObjectList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de__Object(entry, context);\n    });\n};\nconst de_ObjectLockConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"ObjectLockEnabled\"] !== undefined) {\n        contents.ObjectLockEnabled = __expectString(output[\"ObjectLockEnabled\"]);\n    }\n    if (output[\"Rule\"] !== undefined) {\n        contents.Rule = de_ObjectLockRule(output[\"Rule\"], context);\n    }\n    return contents;\n};\nconst de_ObjectLockLegalHold = (output, context) => {\n    const contents = {};\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst de_ObjectLockRetention = (output, context) => {\n    const contents = {};\n    if (output[\"Mode\"] !== undefined) {\n        contents.Mode = __expectString(output[\"Mode\"]);\n    }\n    if (output[\"RetainUntilDate\"] !== undefined) {\n        contents.RetainUntilDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"RetainUntilDate\"]));\n    }\n    return contents;\n};\nconst de_ObjectLockRule = (output, context) => {\n    const contents = {};\n    if (output[\"DefaultRetention\"] !== undefined) {\n        contents.DefaultRetention = de_DefaultRetention(output[\"DefaultRetention\"], context);\n    }\n    return contents;\n};\nconst de_ObjectPart = (output, context) => {\n    const contents = {};\n    if (output[\"PartNumber\"] !== undefined) {\n        contents.PartNumber = __strictParseInt32(output[\"PartNumber\"]);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = __strictParseLong(output[\"Size\"]);\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst de_ObjectVersion = (output, context) => {\n    const contents = {};\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(output[\"ETag\"]);\n    }\n    if (output.ChecksumAlgorithm === \"\") {\n        contents.ChecksumAlgorithm = [];\n    }\n    else if (output[\"ChecksumAlgorithm\"] !== undefined) {\n        contents.ChecksumAlgorithm = de_ChecksumAlgorithmList(__getArrayIfSingleItem(output[\"ChecksumAlgorithm\"]), context);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = __strictParseLong(output[\"Size\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = __expectString(output[\"VersionId\"]);\n    }\n    if (output[\"IsLatest\"] !== undefined) {\n        contents.IsLatest = __parseBoolean(output[\"IsLatest\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = de_Owner(output[\"Owner\"], context);\n    }\n    if (output[\"RestoreStatus\"] !== undefined) {\n        contents.RestoreStatus = de_RestoreStatus(output[\"RestoreStatus\"], context);\n    }\n    return contents;\n};\nconst de_ObjectVersionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ObjectVersion(entry, context);\n    });\n};\nconst de_Owner = (output, context) => {\n    const contents = {};\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = __expectString(output[\"DisplayName\"]);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    return contents;\n};\nconst de_OwnershipControls = (output, context) => {\n    const contents = {};\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (output[\"Rule\"] !== undefined) {\n        contents.Rules = de_OwnershipControlsRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst de_OwnershipControlsRule = (output, context) => {\n    const contents = {};\n    if (output[\"ObjectOwnership\"] !== undefined) {\n        contents.ObjectOwnership = __expectString(output[\"ObjectOwnership\"]);\n    }\n    return contents;\n};\nconst de_OwnershipControlsRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_OwnershipControlsRule(entry, context);\n    });\n};\nconst de_Part = (output, context) => {\n    const contents = {};\n    if (output[\"PartNumber\"] !== undefined) {\n        contents.PartNumber = __strictParseInt32(output[\"PartNumber\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"LastModified\"]));\n    }\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = __expectString(output[\"ETag\"]);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = __strictParseLong(output[\"Size\"]);\n    }\n    if (output[\"ChecksumCRC32\"] !== undefined) {\n        contents.ChecksumCRC32 = __expectString(output[\"ChecksumCRC32\"]);\n    }\n    if (output[\"ChecksumCRC32C\"] !== undefined) {\n        contents.ChecksumCRC32C = __expectString(output[\"ChecksumCRC32C\"]);\n    }\n    if (output[\"ChecksumSHA1\"] !== undefined) {\n        contents.ChecksumSHA1 = __expectString(output[\"ChecksumSHA1\"]);\n    }\n    if (output[\"ChecksumSHA256\"] !== undefined) {\n        contents.ChecksumSHA256 = __expectString(output[\"ChecksumSHA256\"]);\n    }\n    return contents;\n};\nconst de_Parts = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Part(entry, context);\n    });\n};\nconst de_PartsList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ObjectPart(entry, context);\n    });\n};\nconst de_PolicyStatus = (output, context) => {\n    const contents = {};\n    if (output[\"IsPublic\"] !== undefined) {\n        contents.IsPublic = __parseBoolean(output[\"IsPublic\"]);\n    }\n    return contents;\n};\nconst de_Progress = (output, context) => {\n    const contents = {};\n    if (output[\"BytesScanned\"] !== undefined) {\n        contents.BytesScanned = __strictParseLong(output[\"BytesScanned\"]);\n    }\n    if (output[\"BytesProcessed\"] !== undefined) {\n        contents.BytesProcessed = __strictParseLong(output[\"BytesProcessed\"]);\n    }\n    if (output[\"BytesReturned\"] !== undefined) {\n        contents.BytesReturned = __strictParseLong(output[\"BytesReturned\"]);\n    }\n    return contents;\n};\nconst de_PublicAccessBlockConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"BlockPublicAcls\"] !== undefined) {\n        contents.BlockPublicAcls = __parseBoolean(output[\"BlockPublicAcls\"]);\n    }\n    if (output[\"IgnorePublicAcls\"] !== undefined) {\n        contents.IgnorePublicAcls = __parseBoolean(output[\"IgnorePublicAcls\"]);\n    }\n    if (output[\"BlockPublicPolicy\"] !== undefined) {\n        contents.BlockPublicPolicy = __parseBoolean(output[\"BlockPublicPolicy\"]);\n    }\n    if (output[\"RestrictPublicBuckets\"] !== undefined) {\n        contents.RestrictPublicBuckets = __parseBoolean(output[\"RestrictPublicBuckets\"]);\n    }\n    return contents;\n};\nconst de_QueueConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output[\"Queue\"] !== undefined) {\n        contents.QueueArn = __expectString(output[\"Queue\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    else if (output[\"Event\"] !== undefined) {\n        contents.Events = de_EventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = de_NotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst de_QueueConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_QueueConfiguration(entry, context);\n    });\n};\nconst de_Redirect = (output, context) => {\n    const contents = {};\n    if (output[\"HostName\"] !== undefined) {\n        contents.HostName = __expectString(output[\"HostName\"]);\n    }\n    if (output[\"HttpRedirectCode\"] !== undefined) {\n        contents.HttpRedirectCode = __expectString(output[\"HttpRedirectCode\"]);\n    }\n    if (output[\"Protocol\"] !== undefined) {\n        contents.Protocol = __expectString(output[\"Protocol\"]);\n    }\n    if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n        contents.ReplaceKeyPrefixWith = __expectString(output[\"ReplaceKeyPrefixWith\"]);\n    }\n    if (output[\"ReplaceKeyWith\"] !== undefined) {\n        contents.ReplaceKeyWith = __expectString(output[\"ReplaceKeyWith\"]);\n    }\n    return contents;\n};\nconst de_RedirectAllRequestsTo = (output, context) => {\n    const contents = {};\n    if (output[\"HostName\"] !== undefined) {\n        contents.HostName = __expectString(output[\"HostName\"]);\n    }\n    if (output[\"Protocol\"] !== undefined) {\n        contents.Protocol = __expectString(output[\"Protocol\"]);\n    }\n    return contents;\n};\nconst de_ReplicaModifications = (output, context) => {\n    const contents = {};\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst de_ReplicationConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"Role\"] !== undefined) {\n        contents.Role = __expectString(output[\"Role\"]);\n    }\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (output[\"Rule\"] !== undefined) {\n        contents.Rules = de_ReplicationRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst de_ReplicationRule = (output, context) => {\n    const contents = {};\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = __expectString(output[\"ID\"]);\n    }\n    if (output[\"Priority\"] !== undefined) {\n        contents.Priority = __strictParseInt32(output[\"Priority\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Filter === \"\") {\n    }\n    else if (output[\"Filter\"] !== undefined) {\n        contents.Filter = de_ReplicationRuleFilter(__expectUnion(output[\"Filter\"]), context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    if (output[\"SourceSelectionCriteria\"] !== undefined) {\n        contents.SourceSelectionCriteria = de_SourceSelectionCriteria(output[\"SourceSelectionCriteria\"], context);\n    }\n    if (output[\"ExistingObjectReplication\"] !== undefined) {\n        contents.ExistingObjectReplication = de_ExistingObjectReplication(output[\"ExistingObjectReplication\"], context);\n    }\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = de_Destination(output[\"Destination\"], context);\n    }\n    if (output[\"DeleteMarkerReplication\"] !== undefined) {\n        contents.DeleteMarkerReplication = de_DeleteMarkerReplication(output[\"DeleteMarkerReplication\"], context);\n    }\n    return contents;\n};\nconst de_ReplicationRuleAndOperator = (output, context) => {\n    const contents = {};\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = __expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    else if (output[\"Tag\"] !== undefined) {\n        contents.Tags = de_TagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst de_ReplicationRuleFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: __expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: de_Tag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: de_ReplicationRuleAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst de_ReplicationRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ReplicationRule(entry, context);\n    });\n};\nconst de_ReplicationTime = (output, context) => {\n    const contents = {};\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    if (output[\"Time\"] !== undefined) {\n        contents.Time = de_ReplicationTimeValue(output[\"Time\"], context);\n    }\n    return contents;\n};\nconst de_ReplicationTimeValue = (output, context) => {\n    const contents = {};\n    if (output[\"Minutes\"] !== undefined) {\n        contents.Minutes = __strictParseInt32(output[\"Minutes\"]);\n    }\n    return contents;\n};\nconst de_RestoreStatus = (output, context) => {\n    const contents = {};\n    if (output[\"IsRestoreInProgress\"] !== undefined) {\n        contents.IsRestoreInProgress = __parseBoolean(output[\"IsRestoreInProgress\"]);\n    }\n    if (output[\"RestoreExpiryDate\"] !== undefined) {\n        contents.RestoreExpiryDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"RestoreExpiryDate\"]));\n    }\n    return contents;\n};\nconst de_RoutingRule = (output, context) => {\n    const contents = {};\n    if (output[\"Condition\"] !== undefined) {\n        contents.Condition = de_Condition(output[\"Condition\"], context);\n    }\n    if (output[\"Redirect\"] !== undefined) {\n        contents.Redirect = de_Redirect(output[\"Redirect\"], context);\n    }\n    return contents;\n};\nconst de_RoutingRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_RoutingRule(entry, context);\n    });\n};\nconst de_S3KeyFilter = (output, context) => {\n    const contents = {};\n    if (output.FilterRule === \"\") {\n        contents.FilterRules = [];\n    }\n    else if (output[\"FilterRule\"] !== undefined) {\n        contents.FilterRules = de_FilterRuleList(__getArrayIfSingleItem(output[\"FilterRule\"]), context);\n    }\n    return contents;\n};\nconst de_ServerSideEncryptionByDefault = (output, context) => {\n    const contents = {};\n    if (output[\"SSEAlgorithm\"] !== undefined) {\n        contents.SSEAlgorithm = __expectString(output[\"SSEAlgorithm\"]);\n    }\n    if (output[\"KMSMasterKeyID\"] !== undefined) {\n        contents.KMSMasterKeyID = __expectString(output[\"KMSMasterKeyID\"]);\n    }\n    return contents;\n};\nconst de_ServerSideEncryptionConfiguration = (output, context) => {\n    const contents = {};\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    else if (output[\"Rule\"] !== undefined) {\n        contents.Rules = de_ServerSideEncryptionRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst de_ServerSideEncryptionRule = (output, context) => {\n    const contents = {};\n    if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n        contents.ApplyServerSideEncryptionByDefault = de_ServerSideEncryptionByDefault(output[\"ApplyServerSideEncryptionByDefault\"], context);\n    }\n    if (output[\"BucketKeyEnabled\"] !== undefined) {\n        contents.BucketKeyEnabled = __parseBoolean(output[\"BucketKeyEnabled\"]);\n    }\n    return contents;\n};\nconst de_ServerSideEncryptionRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ServerSideEncryptionRule(entry, context);\n    });\n};\nconst de_SourceSelectionCriteria = (output, context) => {\n    const contents = {};\n    if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n        contents.SseKmsEncryptedObjects = de_SseKmsEncryptedObjects(output[\"SseKmsEncryptedObjects\"], context);\n    }\n    if (output[\"ReplicaModifications\"] !== undefined) {\n        contents.ReplicaModifications = de_ReplicaModifications(output[\"ReplicaModifications\"], context);\n    }\n    return contents;\n};\nconst de_SSEKMS = (output, context) => {\n    const contents = {};\n    if (output[\"KeyId\"] !== undefined) {\n        contents.KeyId = __expectString(output[\"KeyId\"]);\n    }\n    return contents;\n};\nconst de_SseKmsEncryptedObjects = (output, context) => {\n    const contents = {};\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = __expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst de_SSES3 = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst de_Stats = (output, context) => {\n    const contents = {};\n    if (output[\"BytesScanned\"] !== undefined) {\n        contents.BytesScanned = __strictParseLong(output[\"BytesScanned\"]);\n    }\n    if (output[\"BytesProcessed\"] !== undefined) {\n        contents.BytesProcessed = __strictParseLong(output[\"BytesProcessed\"]);\n    }\n    if (output[\"BytesReturned\"] !== undefined) {\n        contents.BytesReturned = __strictParseLong(output[\"BytesReturned\"]);\n    }\n    return contents;\n};\nconst de_StorageClassAnalysis = (output, context) => {\n    const contents = {};\n    if (output[\"DataExport\"] !== undefined) {\n        contents.DataExport = de_StorageClassAnalysisDataExport(output[\"DataExport\"], context);\n    }\n    return contents;\n};\nconst de_StorageClassAnalysisDataExport = (output, context) => {\n    const contents = {};\n    if (output[\"OutputSchemaVersion\"] !== undefined) {\n        contents.OutputSchemaVersion = __expectString(output[\"OutputSchemaVersion\"]);\n    }\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = de_AnalyticsExportDestination(output[\"Destination\"], context);\n    }\n    return contents;\n};\nconst de_Tag = (output, context) => {\n    const contents = {};\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = __expectString(output[\"Key\"]);\n    }\n    if (output[\"Value\"] !== undefined) {\n        contents.Value = __expectString(output[\"Value\"]);\n    }\n    return contents;\n};\nconst de_TagSet = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Tag(entry, context);\n    });\n};\nconst de_TargetGrant = (output, context) => {\n    const contents = {};\n    if (output[\"Grantee\"] !== undefined) {\n        contents.Grantee = de_Grantee(output[\"Grantee\"], context);\n    }\n    if (output[\"Permission\"] !== undefined) {\n        contents.Permission = __expectString(output[\"Permission\"]);\n    }\n    return contents;\n};\nconst de_TargetGrants = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_TargetGrant(entry, context);\n    });\n};\nconst de_Tiering = (output, context) => {\n    const contents = {};\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = __strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"AccessTier\"] !== undefined) {\n        contents.AccessTier = __expectString(output[\"AccessTier\"]);\n    }\n    return contents;\n};\nconst de_TieringList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Tiering(entry, context);\n    });\n};\nconst de_TopicConfiguration = (output, context) => {\n    const contents = {};\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = __expectString(output[\"Id\"]);\n    }\n    if (output[\"Topic\"] !== undefined) {\n        contents.TopicArn = __expectString(output[\"Topic\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    else if (output[\"Event\"] !== undefined) {\n        contents.Events = de_EventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = de_NotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst de_TopicConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_TopicConfiguration(entry, context);\n    });\n};\nconst de_Transition = (output, context) => {\n    const contents = {};\n    if (output[\"Date\"] !== undefined) {\n        contents.Date = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Date\"]));\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = __strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = __expectString(output[\"StorageClass\"]);\n    }\n    return contents;\n};\nconst de_TransitionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Transition(entry, context);\n    });\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst isSerializableHeaderValue = (value) => value !== undefined &&\n    value !== null &&\n    value !== \"\" &&\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        const parser = new XMLParser({\n            attributeNamePrefix: \"\",\n            htmlEntities: true,\n            ignoreAttributes: false,\n            ignoreDeclaration: true,\n            parseTagValue: false,\n            trimValues: false,\n            tagValueProcessor: (_, val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined),\n        });\n        parser.addEntity(\"#xD\", \"\\r\");\n        parser.addEntity(\"#10\", \"\\n\");\n        const parsedObj = parser.parse(encoded);\n        const textNodeName = \"#text\";\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return __getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    if (value.Error) {\n        value.Error.message = value.Error.message ?? value.Error.Message;\n    }\n    return value;\n};\nconst loadRestXmlErrorCode = (output, data) => {\n    if (data?.Code !== undefined) {\n        return data.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}